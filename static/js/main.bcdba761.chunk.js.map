{"version":3,"sources":["store/reducers/Map.jsx","store/actions/actionTypes.js","store/store.js","store/actions/Map.jsx","constants.js","utils.jsx","Components/SearchResults/SearchResults.jsx","Components/SearchResults/index.js","store/prop-types.js","Components/SearchField/SearchField.jsx","Components/SearchField/index.js","Components/RoutingMenu/RoutingMenu.jsx","Components/RoutingMenu/index.js","Components/RouteInfosDialog/RouteInfosDialog.jsx","Components/RouteInfosDialog/index.js","config/styleConfig.js","Components/MapComponent/MapComponent.jsx","Components/MapComponent/index.js","Components/Permalink/Permalink.jsx","Components/Permalink/index.js","Components/NotificationHandler/NotificationHandler.jsx","Components/NotificationHandler/index.js","Components/App/App.jsx","Components/App/index.js","serviceWorker.js","index.js"],"names":["initialState","center","currentMot","currentStops","currentStopsGeoJSON","clickLocation","notificationMessage","notificationType","isFieldFocused","showLoadingBar","selectedRoutes","isRouteInfoOpen","dialogPosition","x","y","olMap","Map","controls","routingElevation","resolveHops","setCenter","state","action","updatedState","setCurrentStops","setCurrentStopsGeoJSON","setCurrentMot","setClickLocation","showNotification","setIsFieldFocused","setShowLoadingBar","setSelectedRoutes","setIsRouteInfoOpen","setDialogPosition","setRoutingElevation","setResolveHops","reducer","type","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","MapReducer","store","createStore","applyMiddleware","thunk","DEFAULT_MOTS","OTHER_MOTS","VALID_MOTS","GRAPHHOPPER_MOTS","findMotIcon","name","result","capitalName","charAt","toUpperCase","slice","title","to4326","coord","decimal","transform","map","c","toFixed","to3857","renderSecondary","id","code","countryCode","ifopt","display","push","filter","l","join","SearchResults","props","currentSearchResults","processClickedResultHandler","length","Paper","square","elevation","List","component","aria-label","searchResult","index","ListItem","onClick","button","key","nextId","ListItemIcon","ListItemText","primary","properties","secondary","country_code","selected","defaultProps","propTypeCoordinates","PropTypes","arrayOf","number","isRequired","geometry","shape","string","feature","oneOfType","currentStop","features","useStyles","makeStyles","gridContainer","width","padding","boxSizing","color","height","fieldWrapper","maxWidth","buttonWrapper","SearchField","val","classes","dispatch","useDispatch","addNewSearchFieldHandler","removeSearchFieldHandler","searchStopsHandler","singleStop","processHighlightedResultSelectHandler","onFieldFocusHandler","onPanViaClick","inputReference","fieldLeftIcon","searchFieldSize","searchFieldLabel","fieldRightIcon","addNextHopDisabled","Tooltip","IconButton","className","size","fontSize","Grid","item","xs","disabled","container","spacing","alignItems","TextField","style","inputRef","label","onChange","e","value","Array","isArray","onKeyDown","onFocus","onBlur","setTimeout","event","target","select","TabPanel","children","Typography","role","hidden","aria-labelledby","tabs","tab","minWidth","dropDown","backgroundColor","selectInput","checkbox","margin","abortController","AbortController","RoutingMenu","mots","stationSearchUrl","APIKey","isActiveRoute","onZoomRouteClick","validateMots","motsArray","validationMots","currentMotsArray","mot","includes","forEach","providedMot","requestedMot","find","icon","currentMotsVal","otherMotsVal","useSelector","elRefs","React","useRef","current","fill","el","i","createRef","useState","currentMots","otherMots","lastChangedFieldIdx","setLastChangedFieldIdx","setCurrentSearchResults","searchMotOnly","setSearchMotOnly","focusedFieldIndex","setFocusedFieldIndex","undefined","currentOtherMot","setCurrentOtherMot","useEffect","updateCurrentStops","updatedCurrentStops","updatedCurrentStopsGeoJSON","updatedFocusedFieldIndex","updateFieldOnMapClick","_","clone","tempGeoJSON","reverse","coordinates","handleMotChange","newMot","fieldIndex","currStops","indexToInsertAt","splice","Object","keys","k","parseInt","indexToRemoveFrom","abort","signal","reqUrl","fetch","then","response","json","error","catch","err","console","warn","firstSearchResult","updateCurrentSearchResults","toString","Tabs","indicatorColor","textColor","singleMot","Tab","FormControl","Select","renderValue","root","labelId","disableUnderline","displayEmpty","evt","MenuItem","onDragEnd","destination","source","removed","newSource","droppableId","provided","droppableProps","ref","innerRef","background","draggableId","prov","snpsht","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","placeholder","Checkbox","checked","inputProps","Button","variant","startIcon","LinearProgress","tickFormatter","isMeter","Math","round","everyNth","arr","interval","start","getTooltipX","dist","xPosition","RouteInfosDialog","alt","maxAlt","routes","hoveredCoords","onHighlightPoint","clearHighlightPoint","hoveredPoint","setHoveredPoint","setLength","maxAltitude","setMaxAltitude","routePoints","setRoutePoints","distanceUnit","setDistanceUnit","setIsMeter","pointArray","coords","concat","r","getGeometry","getFlatCoordinates","collec","GeometryCollection","lgth","getLength","xArray","yArray","altitudesArray","max","idx","xVal","yVal","distance","Dialog","isOpen","isDraggable","onDragStop","position","lastX","lastY","classNameHeader","classNameCloseBt","cancelDraggable","onClose","data","onMouseLeave","axisLine","tickLine","offset","dataKey","vertical","dot","stroke","strokeWidth","cursor","content","hovCoords","linePoints","routeLine","format","GeoJSON","line","combine","writeFeaturesObject","dataProjection","featureProjection","hoveredFeat","Feature","Point","pt","writeFeatureObject","turfClosestPt","nearestPointOnLine","lineCoordinates","nearestPts","nearestPt","reduce","prev","curr","goal","abs","hoveredLineIdx","indexOf","nearestPtIndex","point","renderPrograTooltip","tooltipProps","payload","renderTooltip","memo","lineStyler","lineStyle","Style","Stroke","lineDash","railLineStyle","railLineHoveredStyle","busLineStyle","busLineHoveredStyle","pedestrianLineStyle","pedestrianLineHoveredStyle","carLineStyle","carLineHoveredStyle","othersLineStyle","othersLineHoveredStyle","railPointStyle","image","Circle","radius","Fill","pedestrianPointStyle","carPointStyle","busPointStyle","othersPointStyle","pointStyleFunction","lineStyleFunction","isHovered","MapComponent","onMapMoved","onSetCenter","newCenter","getView","getCenter","drawNewRoute","hops","routingUrl","onShowNotification","onSetShowLoadingBar","onSetSelectedRoutes","uid","routeVectorSource","clear","addFeatures","readFeatures","setIsActiveRoute","getFeatures","routeVectorLayer","olLayer","setStyle","onSetClickLocation","mapRef","hoveredFeature","hoveredRoute","initialRouteDrag","hoveredStationOpen","hoveredStationName","bind","projection","layerService","LayerService","ConfigReader","readConfig","visible","isBaseLayer","url","VectorSource","addLayer","Layer","VectorLayer","zIndex","highlightVectorSource","markerVectorSource","markerVectorLayer","getLayer","layers","getLayers","translate","Translate","hitTolerance","on","featureIndex","onSetCurrentStops","onSetCurrentStopsGeoJSON","newCurrentStops","newCurentStopsGeoJSON","getArray","getProperties","findIndex","coordinate","modify","Modify","pixelTolerance","condition","mapBrowserEvent","newHopIdx","flatCoords","f","lineString","getFirstCoordinate","getLastCoordinate","closestSegment","getClosestFeatureToCoordinate","closestEdges","segment","every","defaultInteractions","extend","interaction","addInteraction","featExtent","getExtent","Number","isFinite","fit","getSize","duration","featureCoord","animate","setState","getFeaturesAtPixel","pixel","getType","featCountryCode","get","flatCoordinates","prevProps","this","currentMotChanged","currentStopsGeoJSONChanged","feat","node","Snackbar","anchorOrigin","horizontal","open","message","BasicMap","onFeaturesHover","zoom","tabIndex","viewOptions","Component","getExtentCenter","extent","indexInGeom","lineGeom","connect","actions","getGeoJson","viaString","split","geoJson","coordArray","isNaN","parseFloat","validateUrlCoordinates","coords3857","Promise","resolve","test","replace","Permalink","urlSearch","qs","parse","location","search","appState","params","setParams","newParams","z","setZoom","via","geoJsonArray","all","values","stop","geoJsonObject","getZoom","currentStopsGeoJson","NotificationHandler","handleOpen","handleClose","autoHideDuration","Alert","severity","App","apiKey","process","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bcdba761.chunk.js","sourcesContent":["import { Map } from 'ol';\nimport * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n  center: [949042.143189, 5899715.591163],\n  currentMot: 'rail',\n  currentStops: ['', ''],\n  currentStopsGeoJSON: {},\n  clickLocation: null,\n  notificationMessage: '',\n  notificationType: 'info',\n  isFieldFocused: false,\n  showLoadingBar: false,\n  selectedRoutes: [],\n  isRouteInfoOpen: false,\n  dialogPosition: {\n    x: 10,\n    y: 275,\n  },\n  olMap: new Map({\n    controls: [],\n  }),\n  routingElevation: 1,\n  resolveHops: false,\n};\n\nconst setCenter = (state, action) => {\n  const updatedState = {\n    center: action.center,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setCurrentStops = (state, action) => {\n  const updatedState = {\n    currentStops: action.currentStops,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setCurrentStopsGeoJSON = (state, action) => {\n  const updatedState = {\n    currentStopsGeoJSON: action.currentStopsGeoJSON,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setCurrentMot = (state, action) => {\n  const updatedState = {\n    currentMot: action.currentMot,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setClickLocation = (state, action) => {\n  const updatedState = {\n    clickLocation: action.clickLocation,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst showNotification = (state, action) => {\n  const updatedState = {\n    notificationMessage: action.notificationMessage,\n    notificationType: action.notificationType,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setIsFieldFocused = (state, action) => {\n  const updatedState = {\n    isFieldFocused: action.isFieldFocused,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setShowLoadingBar = (state, action) => {\n  const updatedState = {\n    showLoadingBar: action.showLoadingBar,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setSelectedRoutes = (state, action) => {\n  const updatedState = {\n    selectedRoutes: action.selectedRoutes,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setIsRouteInfoOpen = (state, action) => {\n  const updatedState = {\n    isRouteInfoOpen: action.isRouteInfoOpen,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setDialogPosition = (state, action) => {\n  const updatedState = {\n    dialogPosition: action.dialogPosition,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setRoutingElevation = (state, action) => {\n  const updatedState = {\n    routingElevation: action.routingElevation,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setResolveHops = (state, action) => {\n  const updatedState = {\n    resolveHops: action.resolveHops,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_CENTER:\n      return setCenter(state, action);\n    case actionTypes.SET_CURRENT_STOPS:\n      return setCurrentStops(state, action);\n    case actionTypes.SET_CURRENT_STOPS_GEOJSON:\n      return setCurrentStopsGeoJSON(state, action);\n    case actionTypes.SET_CURRENT_MOT:\n      return setCurrentMot(state, action);\n    case actionTypes.SET_CLICK_LOCATION:\n      return setClickLocation(state, action);\n    case actionTypes.SHOW_NOTIFICATION:\n      return showNotification(state, action);\n    case actionTypes.SET_IS_FIELD_FOCUSED:\n      return setIsFieldFocused(state, action);\n    case actionTypes.SET_SHOW_LOADING_BAR:\n      return setShowLoadingBar(state, action);\n    case actionTypes.SET_SELECTED_ROUTES:\n      return setSelectedRoutes(state, action);\n    case actionTypes.SET_IS_ROUTE_INFO_OPEN:\n      return setIsRouteInfoOpen(state, action);\n    case actionTypes.SET_DIALOG_POSITION:\n      return setDialogPosition(state, action);\n    case actionTypes.SET_ROUTING_ELEVATION:\n      return setRoutingElevation(state, action);\n    case actionTypes.SET_RESOLVE_HOPS:\n      return setResolveHops(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","export const SET_CENTER = 'SET_CENTER';\nexport const SET_CURRENT_STOPS = 'SET_CURRENT_STOPS';\nexport const SET_CURRENT_STOPS_GEOJSON = 'SET_CURRENT_STOPS_GEOJSON';\nexport const SET_CURRENT_MOT = 'SET_CURRENT_MOT';\nexport const SET_CLICK_LOCATION = 'SET_CLICK_LOCATION';\nexport const SHOW_NOTIFICATION = 'SHOW_NOTIFICATION';\nexport const SET_IS_FIELD_FOCUSED = 'SET_IS_FIELD_FOCUSED';\nexport const SET_SHOW_LOADING_BAR = 'SET_SHOW_LOADING_BAR';\nexport const SET_SELECTED_ROUTES = 'SET_SELECTED_ROUTES';\nexport const SET_IS_ROUTE_INFO_OPEN = 'SET_IS_ROUTE_INFO_OPEN';\nexport const SET_DIALOG_POSITION = 'SET_DIALOG_POSITION';\nexport const SET_ROUTING_ELEVATION = 'SET_ROUTING_ELEVATION';\nexport const SET_RESOLVE_HOPS = 'SET_RESOLVE_HOPS';\n","import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport MapReducer from './reducers/Map';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({ MapReducer });\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import * as actionTypes from './actionTypes';\n\nexport const setCenter = center => {\n  return {\n    type: actionTypes.SET_CENTER,\n    center,\n  };\n};\n\nexport const setCurrentStops = currentStops => {\n  return {\n    type: actionTypes.SET_CURRENT_STOPS,\n    currentStops,\n  };\n};\n\nexport const setCurrentStopsGeoJSON = currentStopsGeoJSON => {\n  return {\n    type: actionTypes.SET_CURRENT_STOPS_GEOJSON,\n    currentStopsGeoJSON,\n  };\n};\n\nexport const setCurrentMot = currentMot => {\n  return {\n    type: actionTypes.SET_CURRENT_MOT,\n    currentMot,\n  };\n};\n\nexport const setClickLocation = clickLocation => {\n  return {\n    type: actionTypes.SET_CLICK_LOCATION,\n    clickLocation,\n  };\n};\n\nexport const showNotification = (notificationMessage, notificationType) => {\n  return {\n    type: actionTypes.SHOW_NOTIFICATION,\n    notificationMessage,\n    notificationType,\n  };\n};\n\nexport const setIsFieldFocused = isFieldFocused => {\n  return {\n    type: actionTypes.SET_IS_FIELD_FOCUSED,\n    isFieldFocused,\n  };\n};\n\nexport const setShowLoadingBar = showLoadingBar => {\n  return {\n    type: actionTypes.SET_SHOW_LOADING_BAR,\n    showLoadingBar,\n  };\n};\n\nexport const setSelectedRoutes = selectedRoutes => {\n  return {\n    type: actionTypes.SET_SELECTED_ROUTES,\n    selectedRoutes,\n  };\n};\n\nexport const setIsRouteInfoOpen = isRouteInfoOpen => {\n  return {\n    type: actionTypes.SET_IS_ROUTE_INFO_OPEN,\n    isRouteInfoOpen,\n  };\n};\n\nexport const setDialogPosition = dialogPosition => {\n  return {\n    type: actionTypes.SET_DIALOG_POSITION,\n    dialogPosition,\n  };\n};\n\nexport const setRoutingElevation = routingElevation => {\n  return {\n    type: actionTypes.SET_ROUTING_ELEVATION,\n    routingElevation,\n  };\n};\n\nexport const setResolveHops = resolveHops => {\n  return {\n    type: actionTypes.SET_RESOLVE_HOPS,\n    resolveHops,\n  };\n};\n","/**\n * The valid supported mots by the application\n * @type {string[]}\n * @category Constants\n */\nexport const DEFAULT_MOTS = ['rail', 'bus', 'foot'];\n\nexport const OTHER_MOTS = [\n  'tram',\n  'subway',\n  'gondola',\n  'funicular',\n  'ferry',\n  'car',\n];\n\nexport const VALID_MOTS = [...DEFAULT_MOTS, ...OTHER_MOTS];\n\nexport const GRAPHHOPPER_MOTS = ['foot', 'car'];\n","import DirectionsBusIcon from '@material-ui/icons/DirectionsBus';\nimport DirectionsRailwayIcon from '@material-ui/icons/DirectionsRailway';\nimport DirectionsWalkIcon from '@material-ui/icons/DirectionsWalk';\nimport React from 'react';\nimport { transform } from 'ol/proj';\n\n/**\n * Map each mot to an icon\n * @param {string} name The name of the mot, ex('bus' or 'train')\n * @returns {Icon} MotIcon\n * @category Utils\n */\nexport const findMotIcon = name => {\n  let result = null;\n  const capitalName = name.charAt(0).toUpperCase() + name.slice(1);\n  switch (name) {\n    case 'rail':\n      result = <DirectionsRailwayIcon />;\n      break;\n    case 'foot':\n      result = <DirectionsWalkIcon />;\n      break;\n    default:\n      result = <DirectionsBusIcon />;\n      break;\n  }\n  return <span title={capitalName}>{result}</span>;\n};\n\nexport const to4326 = (coord, decimal = 4) => {\n  return transform(coord, 'EPSG:3857', 'EPSG:4326').map(c =>\n    c.toFixed(decimal),\n  );\n};\n\nexport const to3857 = coord => {\n  return transform(coord, 'EPSG:4326', 'EPSG:3857');\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport nextId from 'react-id-generator';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport MapMarkerIcon from '@material-ui/icons/LocationOn';\n\nconst renderSecondary = (id, code, countryCode, ifopt) => {\n  const display = [];\n\n  if (countryCode) {\n    display.push(\n      `${countryCode}${id || code ? ':' : ''}${id ? ` ${id}` : ''}${\n        code ? ` ${code}` : ''\n      }`,\n    );\n  } else {\n    display.push(\n      `${id ? `${id}` : ''}${id && code ? ' ' : ''}${code ? `${code}` : ''}`,\n    );\n  }\n  if (ifopt) {\n    display.push(`ifopt: ${ifopt}`);\n  }\n  return display.filter(l => l !== '').join(', ');\n};\n\n/**\n * The component that displays the station search results\n * @category RoutingMenu\n */\nfunction SearchResults(props) {\n  const { currentSearchResults, processClickedResultHandler } = props;\n  if (currentSearchResults.length === 0) {\n    return null;\n  }\n  return (\n    <Paper square elevation={3}>\n      <List component=\"nav\" aria-label=\"search results\">\n        {currentSearchResults.map((searchResult, index) => {\n          if (index !== 0) {\n            return (\n              <ListItem\n                onClick={() => {\n                  processClickedResultHandler(searchResult);\n                }}\n                button\n                key={nextId()}\n              >\n                <ListItemIcon>\n                  <MapMarkerIcon />\n                </ListItemIcon>\n                <ListItemText\n                  primary={searchResult.properties.name}\n                  secondary={renderSecondary(\n                    searchResult.properties.id,\n                    searchResult.properties.code,\n                    searchResult.properties.country_code,\n                    searchResult.properties.ifopt,\n                  )}\n                />\n              </ListItem>\n            );\n          }\n          // First item\n          return (\n            <ListItem\n              onClick={() => processClickedResultHandler(searchResult)}\n              button\n              selected\n              key={`searchResult-${searchResult.properties.name}`}\n            >\n              <ListItemIcon>\n                <MapMarkerIcon />\n              </ListItemIcon>\n              <ListItemText\n                primary={searchResult.properties.name}\n                secondary={renderSecondary(\n                  searchResult.properties.id,\n                  searchResult.properties.code,\n                  searchResult.properties.country_code,\n                  searchResult.properties.ifopt,\n                )}\n              />\n            </ListItem>\n          );\n        })}\n      </List>\n    </Paper>\n  );\n}\n\nSearchResults.propTypes = {\n  currentSearchResults: PropTypes.arrayOf(PropTypes.object),\n  processClickedResultHandler: PropTypes.func.isRequired,\n};\n\nSearchResults.defaultProps = {\n  currentSearchResults: [],\n};\n\nexport default SearchResults;\n","import SearchResults from './SearchResults';\n\nexport default SearchResults;\n","import PropTypes from 'prop-types';\n\nconst propTypeCoordinates = PropTypes.arrayOf(PropTypes.number.isRequired)\n  .isRequired;\n\nconst geometry = PropTypes.shape({\n  propTypeCoordinates,\n  type: PropTypes.string.isRequired,\n});\n\nconst feature = PropTypes.shape({\n  geometry,\n  properties: PropTypes.shape({\n    id: PropTypes.oneOfType([\n      PropTypes.string.isRequired,\n      PropTypes.string.isRequired,\n    ]),\n    type: PropTypes.string.isRequired,\n  }),\n  type: PropTypes.string.isRequired,\n});\n\nconst currentStop = PropTypes.shape({\n  features: PropTypes.shape({\n    '0': PropTypes.oneOfType([feature, propTypeCoordinates]),\n    '1': PropTypes.oneOfType([feature, propTypeCoordinates]),\n  }),\n  type: PropTypes.string.isRequired,\n});\n\nconst propTypeCurrentStopsGeoJSON = PropTypes.shape({\n  '0': currentStop,\n  '1': currentStop,\n});\n\nconst propTypeCurrentStops = PropTypes.arrayOf(\n  PropTypes.oneOfType([PropTypes.string.isRequired, propTypeCoordinates]),\n);\n\nexport {\n  propTypeCoordinates,\n  propTypeCurrentStops,\n  propTypeCurrentStopsGeoJSON,\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport Adjust from '@material-ui/icons/Adjust';\nimport Room from '@material-ui/icons/Room';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\nimport { propTypeCurrentStops } from '../../store/prop-types';\nimport { to4326 } from '../../utils';\nimport { setIsFieldFocused } from '../../store/actions/Map';\n\nconst useStyles = makeStyles(() => ({\n  gridContainer: {\n    width: '100%',\n    padding: '0px 0px 0px 20px',\n    boxSizing: 'unset',\n  },\n  button: {\n    color: 'black',\n    '& svg': {\n      height: '20px',\n      width: '20px',\n    },\n  },\n  fieldWrapper: {\n    maxWidth: '75%',\n  },\n  buttonWrapper: {\n    maxWidth: '26px',\n  },\n}));\n\n/**\n * The component that displays the search field(s)\n * @category RoutingMenu\n */\nfunction SearchField(props) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const {\n    index,\n    addNewSearchFieldHandler,\n    currentStops,\n    removeSearchFieldHandler,\n    searchStopsHandler,\n    singleStop,\n    processHighlightedResultSelectHandler,\n    onFieldFocusHandler,\n    onPanViaClick,\n    inputReference,\n  } = props;\n  let fieldLeftIcon = null;\n  let searchFieldSize = 10;\n  let searchFieldLabel = '';\n  let fieldRightIcon = null;\n\n  const formatSingleStop = val => (Array.isArray(val) ? to4326(val) : val);\n\n  const addNextHopDisabled =\n    currentStops[index] === '' ||\n    (currentStops.length > 2 && currentStops[index + 1] === '');\n  if (index === 0) {\n    // Start station field\n    fieldLeftIcon = (\n      <Tooltip title=\"Pan to the feature\">\n        <IconButton\n          onClick={() => onPanViaClick(singleStop, index)}\n          className={classes.button}\n          aria-label=\"Pan to the feature\"\n          size=\"small\"\n        >\n          <RadioButtonCheckedIcon fontSize=\"small\" color=\"primary\" />\n        </IconButton>\n      </Tooltip>\n    );\n    searchFieldLabel = 'Start';\n    fieldRightIcon = (\n      <Grid item xs={1} className={classes.buttonWrapper}>\n        <Tooltip title=\"Add Hop\">\n          <IconButton\n            onClick={() => addNewSearchFieldHandler(currentStops, index + 1)}\n            disabled={addNextHopDisabled}\n            className={classes.button}\n            aria-label=\"Add Hop\"\n            size=\"small\"\n          >\n            <AddCircleOutlineIcon fontSize=\"small\" />\n          </IconButton>\n        </Tooltip>\n      </Grid>\n    );\n  } else if (index === currentStops.length - 1) {\n    fieldLeftIcon = (\n      <Tooltip title=\"Pan to the feature\">\n        <IconButton\n          onClick={() => onPanViaClick(singleStop, index)}\n          className={classes.button}\n          aria-label=\"Pan to the feature\"\n          size=\"small\"\n        >\n          <Room color=\"primary\" />\n        </IconButton>\n      </Tooltip>\n    );\n    searchFieldLabel = 'End';\n  } else {\n    fieldLeftIcon = (\n      <Tooltip title=\"Pan to the feature\">\n        <IconButton\n          onClick={() => onPanViaClick(singleStop, index)}\n          className={classes.button}\n          aria-label=\"Pan to the feature\"\n          size=\"small\"\n        >\n          <Adjust fontSize=\"small\" color=\"primary\" />\n        </IconButton>\n      </Tooltip>\n    );\n    searchFieldSize = 9;\n    searchFieldLabel = 'Hop';\n    fieldRightIcon = (\n      <>\n        <Grid item xs={1} className={classes.buttonWrapper}>\n          <Tooltip title=\"Add Hop\">\n            <IconButton\n              disabled={addNextHopDisabled}\n              onClick={() => addNewSearchFieldHandler(currentStops, index + 1)}\n              className={classes.button}\n              aria-label=\"addHop\"\n              size=\"small\"\n            >\n              <AddCircleOutlineIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n        <Grid item xs={1} className={classes.buttonWrapper}>\n          <Tooltip title=\"Remove Hop\">\n            <IconButton\n              onClick={() => removeSearchFieldHandler(index)}\n              className={classes.button}\n              aria-label=\"removeHop\"\n              size=\"small\"\n            >\n              <RemoveCircleOutlineIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n      </>\n    );\n  }\n  return (\n    <Grid\n      container\n      spacing={1}\n      className={classes.gridContainer}\n      alignItems=\"flex-end\"\n    >\n      <Grid item xs={1}>\n        {fieldLeftIcon}\n      </Grid>\n      <Grid item xs={searchFieldSize} className={classes.fieldWrapper}>\n        <TextField\n          style={{\n            width: '100%',\n          }}\n          inputRef={inputReference}\n          label={searchFieldLabel}\n          color=\"primary\"\n          onChange={e => searchStopsHandler(e, index)}\n          value={formatSingleStop(singleStop)}\n          onKeyDown={processHighlightedResultSelectHandler}\n          onFocus={() => {\n            dispatch(setIsFieldFocused(true));\n            onFieldFocusHandler(index);\n          }}\n          onBlur={() =>\n            setTimeout(() => {\n              dispatch(setIsFieldFocused(false));\n            }, 500)\n          }\n          onClick={event => {\n            if (event.target.select) {\n              event.target.select();\n            }\n          }}\n        />\n      </Grid>\n      {fieldRightIcon}\n    </Grid>\n  );\n}\n\nSearchField.propTypes = {\n  index: PropTypes.number.isRequired,\n  addNewSearchFieldHandler: PropTypes.func.isRequired,\n  currentStops: propTypeCurrentStops,\n  removeSearchFieldHandler: PropTypes.func.isRequired,\n  searchStopsHandler: PropTypes.func.isRequired,\n  singleStop: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.number),\n  ]),\n  processHighlightedResultSelectHandler: PropTypes.func.isRequired,\n  onFieldFocusHandler: PropTypes.func.isRequired,\n  onPanViaClick: PropTypes.func.isRequired,\n  inputReference: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.shape({ current: PropTypes.instanceOf(Element) }),\n  ]).isRequired,\n};\n\nSearchField.defaultProps = {\n  currentStops: [],\n  singleStop: '',\n};\n\nexport default SearchField;\n","import SearchField from './SearchField';\n\nexport default SearchField;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Button from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Grid from '@material-ui/core/Grid';\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport InfoIcon from '@material-ui/icons/Info';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport PropTypes from 'prop-types';\nimport nextId from 'react-id-generator';\nimport _ from 'lodash/core';\n\nimport {\n  setCurrentStops,\n  setCurrentStopsGeoJSON,\n  setCurrentMot,\n  showNotification,\n  setIsFieldFocused,\n  setShowLoadingBar,\n  setSelectedRoutes,\n  setIsRouteInfoOpen,\n} from '../../store/actions/Map';\nimport './RoutingMenu.scss';\nimport {\n  VALID_MOTS,\n  DEFAULT_MOTS,\n  OTHER_MOTS,\n  GRAPHHOPPER_MOTS,\n} from '../../constants';\nimport { to4326, to3857, findMotIcon } from '../../utils';\nimport SearchResults from '../SearchResults';\nimport SearchField from '../SearchField';\n\nfunction TabPanel(props) {\n  const { children, value, index } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={nextId()}\n      aria-labelledby={`simple-tab-${index}`}\n    >\n      {value === index && children}\n    </Typography>\n  );\n}\n\n/**\n * The routing menu props\n * @typedef RoutingMenuProps\n * @type {props}\n * @property {string} stationSearchUrl The station search API used for searching.\n * @property {string} APIKey key obtained from geOps that enables you to used the previous API services.\n * @property {string[]} mots List of mots to be available (ex: ['bus', 'train'])\n * @property {LongLat} clickLocation The location clicked by the user in the form of [long,lat].\n * @category Props\n */\n\nconst useStyles = makeStyles(() => ({\n  tabs: {\n    width: '75%',\n  },\n  tab: {\n    minWidth: '33%',\n    width: '33%',\n  },\n  dropDown: {\n    width: '25%',\n    backgroundColor: 'white',\n  },\n  select: {\n    height: '100%',\n  },\n  selectInput: {\n    backgroundColor: 'white',\n    '&:focus': {\n      backgroundColor: 'white',\n    },\n  },\n  checkbox: {\n    margin: '0px 5px 0px 13px',\n  },\n}));\n\nlet abortController = new AbortController();\n\n/**\n * The routing menu that controls station search\n * @category RoutingMenu\n */\nfunction RoutingMenu({\n  mots,\n  stationSearchUrl,\n  APIKey,\n  isActiveRoute,\n  onZoomRouteClick,\n  onPanViaClick,\n}) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  /**\n   * Validate the mots provided from the props, then retrieve the icons for the valid ones.\n   * @param mots The provided mots\n   * @returns {Array} The valid mots with their icons\n   * @category RoutingMenu\n   */\n  const validateMots = (motsArray, validationMots) => {\n    const currentMotsArray = [];\n\n    motsArray\n      .filter(mot => {\n        return validationMots.includes(mot);\n      })\n      .forEach(providedMot => {\n        const requestedMot = validationMots.find(mot => mot === providedMot);\n        if (requestedMot) {\n          currentMotsArray.push({\n            name: requestedMot,\n            icon: findMotIcon(requestedMot),\n          });\n        }\n      });\n    if (currentMotsArray.length === 0) {\n      currentMotsArray.push({\n        name: VALID_MOTS[0],\n        icon: findMotIcon(VALID_MOTS[0]),\n      });\n    }\n    return currentMotsArray;\n  };\n\n  const currentMotsVal = validateMots(mots, DEFAULT_MOTS);\n  const otherMotsVal = validateMots(mots, OTHER_MOTS);\n\n  const center = useSelector(state => state.MapReducer.center);\n  const clickLocation = useSelector(state => state.MapReducer.clickLocation);\n  const currentStops = useSelector(state => state.MapReducer.currentStops);\n  const showLoadingBar = useSelector(state => state.MapReducer.showLoadingBar);\n  const isRouteInfoOpen = useSelector(\n    state => state.MapReducer.isRouteInfoOpen,\n  );\n  const currentStopsGeoJSON = useSelector(\n    state => state.MapReducer.currentStopsGeoJSON,\n  );\n  const currentMot = useSelector(state => state.MapReducer.currentMot);\n\n  const elRefs = React.useRef([]);\n  if (elRefs.current.length !== currentStops.length) {\n    elRefs.current = Array(currentStops.length)\n      .fill()\n      .map((el, i) => elRefs.current[i] || React.createRef());\n  }\n\n  const [currentMots] = useState(currentMotsVal);\n  const [otherMots] = useState(otherMotsVal);\n  const [lastChangedFieldIdx, setLastChangedFieldIdx] = useState(null);\n  const [currentSearchResults, setCurrentSearchResults] = useState([]);\n  const [searchMotOnly, setSearchMotOnly] = React.useState(true);\n  const [focusedFieldIndex, setFocusedFieldIndex] = useState(0);\n  const [currentOtherMot, setCurrentOtherMot] = useState(undefined);\n\n  useEffect(() => {\n    if (isRouteInfoOpen) {\n      dispatch(setSelectedRoutes([]));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentStops]);\n\n  /**\n   * Update the current stops array (string array) and the GeoJSON array in the local state.\n   * @param updatedCurrentStops The updated stops.\n   * @param updatedCurrentStopsGeoJSON The updated GeoJSON.\n   * @category RoutingMenu\n   */\n  const updateCurrentStops = (\n    updatedCurrentStops,\n    updatedCurrentStopsGeoJSON,\n    updatedFocusedFieldIndex,\n  ) => {\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    setFocusedFieldIndex(updatedFocusedFieldIndex);\n  };\n\n  const updateFieldOnMapClick = (\n    updatedCurrentStops,\n    updatedFocusedFieldIndex,\n  ) => {\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    // Create GeoJSON\n    const tempGeoJSON = {\n      type: 'FeatureCollection',\n      features: [\n        {\n          type: 'Feature',\n          properties: {\n            id: clickLocation.slice().reverse(),\n            type: 'coordinates',\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: clickLocation,\n          },\n        },\n      ],\n    };\n    updatedCurrentStopsGeoJSON[focusedFieldIndex] = tempGeoJSON;\n    updateCurrentStops(\n      updatedCurrentStops,\n      updatedCurrentStopsGeoJSON,\n      updatedFocusedFieldIndex,\n    );\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * If a location was received through the props (user click on map) act accordingly.\n   * @category RoutingMenu\n   */\n  useEffect(() => {\n    if (clickLocation) {\n      // A click occurred on the map\n      if (currentStops[focusedFieldIndex] === '') {\n        // Performs when there's an empty field.\n        const updatedCurrentStops = currentStops;\n        updatedCurrentStops[focusedFieldIndex] = clickLocation;\n        updateFieldOnMapClick(\n          currentStops,\n          focusedFieldIndex + 1 < currentStops.length\n            ? focusedFieldIndex + 1\n            : focusedFieldIndex,\n        );\n      } else {\n        const updatedCurrentStops = currentStops;\n        const updatedFocusedFieldIndex = focusedFieldIndex;\n        updatedCurrentStops[focusedFieldIndex] = clickLocation;\n        updateFieldOnMapClick(updatedCurrentStops, focusedFieldIndex);\n\n        const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n        // Create GeoJSON\n        const tempGeoJSON = {\n          type: 'FeatureCollection',\n          features: [\n            {\n              type: 'Feature',\n              properties: {\n                id: clickLocation.slice().reverse(),\n                type: 'coordinates',\n              },\n              geometry: {\n                type: 'Point',\n                coordinates: clickLocation,\n              },\n            },\n          ],\n        };\n        updatedCurrentStopsGeoJSON[focusedFieldIndex] = tempGeoJSON;\n        updateCurrentStops(\n          updatedCurrentStops,\n          updatedCurrentStopsGeoJSON,\n          updatedFocusedFieldIndex,\n        );\n        dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickLocation]);\n\n  /**\n   * Process changing the current selected mot, save in local state and dispatch store action.\n   * @param event The change event\n   * @param newMot The new selected mot\n   * @category RoutingMenu\n   */\n  const handleMotChange = (event, newMot) => {\n    setCurrentOtherMot(null);\n    dispatch(setCurrentMot(newMot));\n  };\n\n  /**\n   * Gets callled when a search field is in focus. Keep track of the last focused/selected field.\n   * @param fieldIndex The search field index(order)\n   * @category RoutingMenu\n   */\n  const onFieldFocusHandler = fieldIndex => {\n    setFocusedFieldIndex(fieldIndex);\n    dispatch(setIsFieldFocused(true));\n  };\n\n  /**\n   * Create a new search field (hop) between already existing search fields\n   * @param indexToInsertAt The index to insert the new search field at.\n   * @category RoutingMenu\n   */\n  const addNewSearchFieldHandler = (currStops, indexToInsertAt) => {\n    const updatedCurrentStops = _.clone(currentStops);\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    updatedCurrentStops.splice(indexToInsertAt, 0, '');\n\n    if (updatedCurrentStopsGeoJSON[indexToInsertAt]) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON)\n        .filter(k => k >= indexToInsertAt)\n        .reverse();\n      keys.forEach(k => {\n        updatedCurrentStopsGeoJSON[`${parseInt(k, 10) + 1}`] =\n          updatedCurrentStopsGeoJSON[k];\n      });\n    }\n\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * Remove a search field (hop) from a defined index. Then dispatch an update to the stops,\n   * so that the route can be updated if exists.\n   * @param indexToRemoveFrom The index to remove the search field from.\n   * @category RoutingMenu\n   */\n  const removeSearchFieldHandler = indexToRemoveFrom => {\n    const updatedCurrentStops = _.clone(currentStops);\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    updatedCurrentStops.splice(indexToRemoveFrom, 1);\n\n    if (updatedCurrentStopsGeoJSON[indexToRemoveFrom]) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON);\n      keys.forEach(key => {\n        const k = parseInt(key, 10);\n        if (k === indexToRemoveFrom) {\n          delete updatedCurrentStopsGeoJSON[indexToRemoveFrom];\n        } else if (k > indexToRemoveFrom) {\n          updatedCurrentStopsGeoJSON[k - 1] = updatedCurrentStopsGeoJSON[k];\n        }\n      });\n      delete updatedCurrentStopsGeoJSON[keys.length - 1];\n    }\n\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * Perform searching for stations through the station API\n   * @param event\n   * @param fieldIndex The search field(hop) index(order)\n   * @category RoutingMenu\n   */\n  const searchStopsHandler = (event, fieldIndex) => {\n    setLastChangedFieldIdx(fieldIndex);\n    // only search if text is available\n    if (!event.target.value) {\n      const updatedCurrentStops = currentStops;\n      updatedCurrentStops[fieldIndex] = '';\n      setCurrentSearchResults([]);\n      dispatch(setCurrentStops(updatedCurrentStops));\n      dispatch(setShowLoadingBar(false));\n      return;\n    }\n    const updatedCurrentStops = _.clone(currentStops);\n    updatedCurrentStops[fieldIndex] = event.target.value;\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setShowLoadingBar(true));\n\n    abortController.abort();\n    abortController = new AbortController();\n    const { signal } = abortController;\n\n    const reqUrl = `${stationSearchUrl}?q=${event.target.value}&key=${APIKey}${\n      !GRAPHHOPPER_MOTS.includes(currentMot)\n        ? `&mots=${searchMotOnly ? currentMot : ''}`\n        : ''\n    }&ref_location=${to4326(center)\n      .reverse()\n      .join(',')}`;\n\n    fetch(reqUrl, { signal })\n      .then(response => response.json())\n      .then(response => {\n        if (response.error) {\n          dispatch(showNotification(\"Couldn't find stations\", 'warning'));\n          return;\n        }\n        if (response.features.length === 0) {\n          dispatch(showNotification(\"Couldn't find stations\", 'warning'));\n        }\n        setCurrentSearchResults(response.features);\n        dispatch(setShowLoadingBar(false));\n      })\n      .catch(err => {\n        if (err.name === 'AbortError') {\n          // eslint-disable-next-line no-console\n          console.warn(`Abort ${reqUrl}`);\n          return;\n        }\n        // It's important to rethrow all other errors so you don't silence them!\n        // For example, any error thrown by setState(), will pass through here.\n        throw err;\n      });\n  };\n\n  const retriggerSearch = () => {\n    if (lastChangedFieldIdx === null) {\n      return;\n    }\n    searchStopsHandler(\n      {\n        target: {\n          value: elRefs.current[lastChangedFieldIdx].current.value,\n        },\n      },\n      lastChangedFieldIdx,\n    );\n  };\n\n  /**\n   * The user makes changes to the current search. Either select the first result,\n   * or delete the text to make a new search.\n   * @param event\n   * @category RoutingMenu\n   */\n  const processHighlightedResultSelectHandler = event => {\n    const [firstSearchResult] = currentSearchResults;\n    if (event.key === 'Enter' && firstSearchResult) {\n      // The user has chosen the first result by pressing 'Enter' key on keyboard\n      const updatedCurrentStops = currentStops;\n      updateCurrentStops[focusedFieldIndex] = firstSearchResult.properties.name;\n      const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n      updatedCurrentStopsGeoJSON[focusedFieldIndex] = firstSearchResult;\n      dispatch(setCurrentStops(updatedCurrentStops));\n      setCurrentSearchResults([]);\n      dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    }\n    if (event.key === 'Backspace') {\n      // The user has erased some of the search query. Reset everything and start all over.\n      let updateCurrentSearchResults = [];\n      if (event.target.value) updateCurrentSearchResults = currentSearchResults;\n      const updatedCurrentStopsGeoJSON = {};\n      Object.keys(currentStopsGeoJSON).forEach(key => {\n        if (key !== focusedFieldIndex.toString()) {\n          updatedCurrentStopsGeoJSON[key] = currentStopsGeoJSON[key];\n        }\n      });\n      setCurrentSearchResults(updateCurrentSearchResults);\n      dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    }\n  };\n\n  /**\n   * The user uses the mouse/touch to select one of the search results.\n   * @param searchResult The clicked search result.\n   * @category RoutingMenu\n   */\n  const processClickedResultHandler = searchResult => {\n    const updatedCurrentStops = currentStops;\n    updatedCurrentStops[focusedFieldIndex] = searchResult.properties.name;\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    updatedCurrentStopsGeoJSON[focusedFieldIndex] = searchResult;\n    dispatch(setCurrentStops(updatedCurrentStops));\n    setCurrentSearchResults([]);\n\n    Object.keys(updatedCurrentStopsGeoJSON).forEach(key => {\n      if (key === focusedFieldIndex.toString()) {\n        updatedCurrentStopsGeoJSON[key].geometry.coordinates = to3857(\n          updatedCurrentStopsGeoJSON[key].geometry.coordinates,\n        );\n      }\n    });\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  const changeCurrentOtherMot = evt => {\n    if (!evt) {\n      setCurrentOtherMot(null);\n    } else {\n      const { value } = evt.target;\n      handleMotChange({}, value);\n      setCurrentOtherMot(value);\n    }\n  };\n\n  const getItemStyle = (isDragging, draggableStyle) => ({\n    userSelect: 'none',\n    background: isDragging ? '#ededed' : 'white',\n    ...draggableStyle,\n  });\n\n  const onDragEnd = result => {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const updatedCurrentStops = _.clone(currentStops);\n    const [removed] = updatedCurrentStops.splice(result.source.index, 1);\n    updatedCurrentStops.splice(result.destination.index, 0, removed);\n\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n\n    const newSource = { ...updatedCurrentStopsGeoJSON[result.source.index] };\n    if (result.destination.index < result.source.index) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON)\n        .filter(k => {\n          return (\n            parseInt(k, 10) >= result.destination.index &&\n            parseInt(k, 10) < result.source.index\n          );\n        })\n        .reverse();\n      keys.forEach(k => {\n        updatedCurrentStopsGeoJSON[`${parseInt(k, 10) + 1}`] =\n          updatedCurrentStopsGeoJSON[k];\n      });\n      updatedCurrentStopsGeoJSON[result.destination.index] = newSource;\n    } else if (result.destination.index > result.source.index) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON).filter(\n        k =>\n          parseInt(k, 10) >= result.source.index &&\n          parseInt(k, 10) <= result.destination.index,\n      );\n      keys.forEach(k => {\n        if (parseInt(k, 10) === result.destination.index) {\n          updatedCurrentStopsGeoJSON[result.destination.index] = newSource;\n        } else {\n          updatedCurrentStopsGeoJSON[k] =\n            updatedCurrentStopsGeoJSON[`${parseInt(k, 10) + 1}`];\n        }\n      });\n    }\n\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * Render the component to the dom.\n   * @category RoutingMenu\n   */\n\n  if (!onZoomRouteClick || !onPanViaClick) {\n    return null;\n  }\n  return (\n    <div className=\"rd-routing-menu\">\n      <Paper square elevation={3}>\n        <div className=\"rd-routing-menu-header\">\n          <Tabs\n            value={DEFAULT_MOTS.includes(currentMot) ? currentMot : false}\n            className={classes.tabs}\n            onChange={(e, mot) => {\n              handleMotChange(e, mot);\n            }}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            aria-label=\"mots icons\"\n          >\n            {currentMots.map(singleMot => {\n              return (\n                <Tab\n                  className={classes.tab}\n                  key={`mot-${singleMot.name}`}\n                  value={singleMot.name}\n                  icon={singleMot.icon}\n                  aria-label={singleMot.name}\n                />\n              );\n            })}\n          </Tabs>\n          <FormControl className={classes.dropDown}>\n            <Select\n              renderValue={val => (val !== '' ? val : 'Other MOTs')}\n              className={classes.select}\n              classes={{ root: classes.selectInput }}\n              labelId=\"rd-other-mot-label\"\n              value={currentOtherMot || ''}\n              disableUnderline={!currentOtherMot}\n              displayEmpty\n              onChange={changeCurrentOtherMot}\n            >\n              {otherMots.map(mot => {\n                return (\n                  <MenuItem value={mot.name} key={`other-mot-${mot.name}`}>\n                    {mot.name}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </div>\n        <TabPanel>\n          <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"droppable\">\n              {provided => (\n                <div\n                  // eslint-disable-next-line react/jsx-props-no-spreading\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                  style={{\n                    background: 'white',\n                  }}\n                >\n                  {currentStops.map((item, index) => (\n                    <Draggable\n                      // eslint-disable-next-line react/no-array-index-key\n                      key={`searchField-${index}`}\n                      draggableId={`searchField-${index}`}\n                      index={index}\n                    >\n                      {(prov, snpsht) => (\n                        <div\n                          ref={prov.innerRef}\n                          // eslint-disable-next-line react/jsx-props-no-spreading\n                          {...prov.draggableProps}\n                          // eslint-disable-next-line react/jsx-props-no-spreading\n                          {...prov.dragHandleProps}\n                          style={getItemStyle(\n                            snpsht.isDragging,\n                            prov.draggableProps.style,\n                          )}\n                        >\n                          <SearchField\n                            // eslint-disable-next-line react/no-array-index-key\n                            key={`searchField-${index}`}\n                            index={index}\n                            inputReference={elRefs.current[index]}\n                            addNewSearchFieldHandler={addNewSearchFieldHandler}\n                            currentStops={currentStops}\n                            removeSearchFieldHandler={removeSearchFieldHandler}\n                            searchStopsHandler={searchStopsHandler}\n                            singleStop={item}\n                            processHighlightedResultSelectHandler={\n                              processHighlightedResultSelectHandler\n                            }\n                            onFieldFocusHandler={onFieldFocusHandler}\n                            onPanViaClick={onPanViaClick}\n                          />\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n          <div className=\"rd-mot-checkbox\">\n            <Checkbox\n              className={classes.checkbox}\n              checked={searchMotOnly}\n              onChange={() => {\n                setSearchMotOnly(!searchMotOnly);\n                retriggerSearch(lastChangedFieldIdx);\n              }}\n              color=\"primary\"\n              inputProps={{ 'aria-label': 'use only mot' }}\n            />\n            <span>Search only selected mode of transport</span>\n          </div>\n          <div className=\"rd-route-buttons\">\n            <Grid item xs={6}>\n              <Tooltip title=\"Zoom to the route\">\n                <Button\n                  onClick={() => onZoomRouteClick()}\n                  aria-label=\"Zoom to the route\"\n                  disabled={!isActiveRoute}\n                  variant=\"contained\"\n                  color=\"default\"\n                  classes={{\n                    root: 'rd-button-root',\n                    disabled: 'rd-button-disabled',\n                  }}\n                  startIcon={<ZoomInIcon fontSize=\"small\" />}\n                >\n                  <Typography>Zoom to the route</Typography>\n                </Button>\n              </Tooltip>\n            </Grid>\n            <Grid item xs={6}>\n              <Tooltip title=\"Route information\">\n                <Button\n                  onClick={() => {\n                    dispatch(setIsRouteInfoOpen(!isRouteInfoOpen));\n                  }}\n                  aria-label=\"Route information\"\n                  disabled={!isActiveRoute}\n                  variant=\"contained\"\n                  color=\"default\"\n                  className={isRouteInfoOpen ? 'rd-button-active' : ''}\n                  classes={{\n                    root: 'rd-button-root',\n                    disabled: 'rd-button-disabled',\n                  }}\n                  startIcon={<InfoIcon fontSize=\"small\" />}\n                >\n                  <Typography>Route information</Typography>\n                </Button>\n              </Tooltip>\n            </Grid>\n          </div>\n        </TabPanel>\n        {showLoadingBar ? <LinearProgress /> : null}\n      </Paper>\n      <SearchResults\n        currentSearchResults={currentSearchResults}\n        processClickedResultHandler={processClickedResultHandler}\n      />\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node.isRequired,\n  value: PropTypes.string,\n  index: PropTypes.number,\n};\n\nTabPanel.defaultProps = {\n  value: null,\n  index: null,\n};\n\nRoutingMenu.propTypes = {\n  mots: PropTypes.arrayOf(PropTypes.string).isRequired,\n  APIKey: PropTypes.string.isRequired,\n  stationSearchUrl: PropTypes.string.isRequired,\n  isActiveRoute: PropTypes.bool.isRequired,\n  onZoomRouteClick: PropTypes.func,\n  onPanViaClick: PropTypes.func,\n};\n\nRoutingMenu.defaultProps = {\n  onZoomRouteClick: undefined,\n  onPanViaClick: undefined,\n};\n\nexport default RoutingMenu;\n","import RoutingMenu from './RoutingMenu';\n\nexport default RoutingMenu;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Feature } from 'ol';\nimport { getLength } from 'ol/sphere';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport nearestPointOnLine from '@turf/nearest-point-on-line';\nimport combine from '@turf/combine';\nimport { Point, GeometryCollection } from 'ol/geom';\nimport Dialog from '@geops/react-ui/components/Dialog';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Label,\n  Tooltip,\n  ReferenceDot,\n  ReferenceLine,\n} from 'recharts';\nimport { setIsRouteInfoOpen, setDialogPosition } from '../../store/actions/Map';\nimport './RouteInfosDialog.scss';\n\nconst propTypes = {\n  routes: PropTypes.arrayOf(PropTypes.instanceOf(Feature)).isRequired,\n  hoveredCoords: PropTypes.arrayOf(PropTypes.number),\n  onHighlightPoint: PropTypes.func.isRequired,\n  clearHighlightPoint: PropTypes.func.isRequired,\n};\n\nconst defaultProps = {\n  hoveredCoords: null,\n};\n\nconst tickFormatter = (length, isMeter) => {\n  let output;\n  if (!isMeter) {\n    output = `${Math.round((length / 1000) * 100) / 100}`;\n  } else {\n    output = `${Math.round(length * 100) / 100}`;\n  }\n  return output;\n};\n\nconst everyNth = (arr, interval, start) => {\n  const result = [];\n  for (let i = start || 0; i < arr.length; i += interval || 1) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\nconst getTooltipX = (dist, length) => {\n  const xPosition = (dist / length) * 300;\n  return xPosition >= 80 ? xPosition : 80;\n};\n\nconst getTooltipY = (alt, maxAlt) => {\n  return alt / maxAlt > 0.5 ? 110 : 20;\n};\n\nfunction RouteInfosDialog({\n  routes,\n  hoveredCoords,\n  onHighlightPoint,\n  clearHighlightPoint,\n}) {\n  const dispatch = useDispatch();\n  const [hoveredPoint, setHoveredPoint] = useState(null);\n  const [length, setLength] = useState(null);\n  const [maxAltitude, setMaxAltitude] = useState(null);\n  const [routePoints, setRoutePoints] = useState([]);\n  const [distanceUnit, setDistanceUnit] = useState(null);\n  const [isMeter, setIsMeter] = useState(null);\n\n  const dialogPosition = useSelector(state => state.MapReducer.dialogPosition);\n\n  const onDragStop = (evt, position) => {\n    dispatch(\n      setDialogPosition({\n        x: position.lastX,\n        y: position.lastY,\n      }),\n    );\n  };\n\n  const renderPrograTooltip = (hovCoords, linePoints, routeLine) => {\n    const format = new GeoJSON();\n\n    const line = combine(\n      format.writeFeaturesObject(routeLine, {\n        dataProjection: 'EPSG:4326',\n        featureProjection: 'EPSG:3857',\n      }),\n    ).features[0];\n\n    const hoveredFeat = new Feature({\n      geometry: new Point(hovCoords),\n    });\n    const pt = format.writeFeatureObject(hoveredFeat, {\n      dataProjection: 'EPSG:4326',\n      featureProjection: 'EPSG:3857',\n    });\n\n    const turfClosestPt = nearestPointOnLine(line, pt);\n    const lineCoordinates = line.geometry.coordinates;\n    const nearestPts = lineCoordinates.map(coords => {\n      return coords[turfClosestPt.properties.index];\n    });\n    const nearestPt = nearestPts.reduce((prev, curr) => {\n      const goal = turfClosestPt.geometry.coordinates[0];\n      if (!prev) {\n        return curr;\n      }\n      return curr && prev && Math.abs(curr[0] - goal) < Math.abs(prev[0] - goal)\n        ? curr\n        : prev;\n    });\n\n    const hoveredLineIdx = nearestPts.indexOf(nearestPt);\n    // Turf only return the index within the closest feature.\n    // We need to add the length of each preceding feature to have the correct index.\n    let nearestPtIndex = turfClosestPt.properties.index;\n    for (let i = 0; i < hoveredLineIdx; i += 1) {\n      nearestPtIndex += lineCoordinates[i].length;\n    }\n\n    const point = linePoints[nearestPtIndex];\n    setHoveredPoint(point);\n\n    if (!point) {\n      return null;\n    }\n    return (\n      <div className=\"rd-tootip-wrapper\">\n        <div>altitude: {point.alt} m</div>\n        <div>\n          distance: {tickFormatter(point.distance, isMeter)}\n          {isMeter ? ' m' : ' km'}\n        </div>\n      </div>\n    );\n  };\n\n  const renderTooltip = tooltipProps => {\n    if (hoveredPoint) {\n      setHoveredPoint(null);\n    }\n    if (!tooltipProps.payload.length) {\n      return;\n    }\n    const { xVal, yVal, alt, distance } = tooltipProps.payload[0].payload;\n\n    onHighlightPoint([xVal, yVal]);\n    // eslint-disable-next-line consistent-return\n    return (\n      <div className=\"rd-tootip-wrapper\">\n        <div>altitude: {alt} m</div>\n        <div>\n          distance: {tickFormatter(distance, isMeter)}\n          {isMeter ? ' m' : ' km'}\n        </div>\n      </div>\n    );\n  };\n\n  useEffect(() => {\n    const pointArray = [];\n    const coords = [].concat(\n      ...routes.map(r => r.getGeometry().getFlatCoordinates()),\n    );\n\n    const collec = new GeometryCollection(routes.map(r => r.getGeometry()));\n    const lgth = getLength(collec);\n    setLength(lgth);\n    setDistanceUnit(lgth > 1000 ? 'km' : 'm');\n    setIsMeter(distanceUnit === 'm');\n\n    const xArray = everyNth(coords, 3, 0);\n    const yArray = everyNth(coords, 3, 1);\n    const altitudesArray = everyNth(coords, 3, 2);\n    setMaxAltitude(Math.max(...altitudesArray));\n\n    altitudesArray.forEach((alt, idx) => {\n      pointArray.push({\n        alt,\n        xVal: xArray[idx],\n        yVal: yArray[idx],\n        distance: lgth * (idx / (altitudesArray.length - 1)),\n      });\n    });\n\n    setRoutePoints(pointArray);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [routes]);\n\n  return (\n    <Dialog\n      isOpen\n      title={<span>Route information</span>}\n      isDraggable\n      onDragStop={onDragStop}\n      className=\"rd-dialog-container\"\n      classNameHeader=\"rd-dialog-header\"\n      classNameCloseBt=\"rd-dialog-close-bt\"\n      cancelDraggable=\".tm-dialog-body\"\n      position={dialogPosition}\n      onClose={() => dispatch(setIsRouteInfoOpen(false))}\n    >\n      <LineChart\n        width={450}\n        height={220}\n        data={routePoints}\n        onMouseLeave={clearHighlightPoint}\n      >\n        <YAxis axisLine={false} tickLine={false}>\n          <Label value=\"m\" offset={10} position=\"top\" />\n        </YAxis>\n        <XAxis\n          type=\"number\"\n          dataKey=\"distance\"\n          tickFormatter={dist => tickFormatter(dist, isMeter)}\n        >\n          <Label value={distanceUnit} offset={10} position=\"right\" />\n        </XAxis>\n        <CartesianGrid vertical={false} />\n        <Line\n          type=\"monotone\"\n          dataKey=\"alt\"\n          dot={false}\n          stroke=\"#3f51b5\"\n          strokeWidth={2}\n        />\n        {hoveredCoords && hoveredPoint && (\n          <ReferenceLine x={hoveredPoint.distance} stroke=\"lightgrey\" />\n        )}\n        {hoveredCoords && hoveredPoint && (\n          <ReferenceDot\n            r={4}\n            x={hoveredPoint.distance}\n            y={hoveredPoint.alt}\n            fill=\"#3f51b5\"\n            stroke=\"white\"\n          />\n        )}\n        <Tooltip\n          cursor={hoveredPoint ? true : 'auto'}\n          position={\n            hoveredPoint\n              ? {\n                  x: getTooltipX(hoveredPoint.distance, length),\n                  y: getTooltipY(hoveredPoint.alt, maxAltitude),\n                }\n              : 'auto'\n          }\n          content={content =>\n            hoveredCoords\n              ? renderPrograTooltip(hoveredCoords, routePoints, routes)\n              : renderTooltip(content)\n          }\n        />\n      </LineChart>\n    </Dialog>\n  );\n}\n\nRouteInfosDialog.propTypes = propTypes;\nRouteInfosDialog.defaultProps = defaultProps;\n\nexport default React.memo(RouteInfosDialog);\n","import RouteInfosDialog from './RouteInfosDialog';\n\nexport default RouteInfosDialog;\n","import { Style, Circle, Stroke, Fill } from 'ol/style';\n\nconst lineStyler = lineStyle => {\n  return lineStyle.map(\n    style =>\n      new Style({\n        stroke: new Stroke({\n          color: style[0],\n          width: style[1],\n          lineDash: style[2],\n        }),\n      }),\n  );\n};\n\nconst railLineStyle = lineStyler([\n  ['darkred', 6],\n  ['red', 3],\n]);\n\nconst railLineHoveredStyle = lineStyler([\n  ['darkred', 7],\n  ['red', 4],\n]);\n\nconst busLineStyle = lineStyler([\n  ['rgb(153,153,0)', 6],\n  ['yellow', 3],\n]);\n\nconst busLineHoveredStyle = lineStyler([\n  ['rgb(153,153,0)', 7],\n  ['yellow', 4],\n]);\n\nconst pedestrianLineStyle = lineStyler([\n  ['rgb(96, 186, 219)', 6],\n  ['rgb(173, 216, 230)', 3],\n]);\n\nconst pedestrianLineHoveredStyle = lineStyler([\n  ['rgb(96, 186, 219)', 7],\n  ['rgb(173, 216, 230)', 4],\n]);\n\nconst carLineStyle = lineStyler([\n  ['grey', 6],\n  ['darkgrey', 3],\n]);\n\nconst carLineHoveredStyle = lineStyler([\n  ['grey', 7],\n  ['darkgrey', 4],\n]);\n\nconst othersLineStyle = lineStyler([\n  ['darkblue', 6],\n  ['blue', 3],\n]);\n\nconst othersLineHoveredStyle = lineStyler([\n  ['darkblue', 7],\n  ['blue', 4],\n]);\n\nconst railPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'red' }),\n    stroke: new Stroke({ color: 'darkred', width: 2 }),\n  }),\n});\n\nconst pedestrianPointStyle = new Style({\n  image: new Circle({\n    radius: 3,\n    fill: new Fill({ color: 'rgb(173, 216, 230)' }),\n    stroke: new Stroke({ color: 'rgb(96, 186, 219)', width: 2 }),\n  }),\n});\n\nconst carPointStyle = new Style({\n  image: new Circle({\n    radius: 3,\n    fill: new Fill({ color: 'darkgrey' }),\n    stroke: new Stroke({ color: 'grey', width: 2 }),\n  }),\n});\n\nconst busPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'yellow' }),\n    stroke: new Stroke({ color: 'rgb(153,153,0)', width: 2 }),\n  }),\n});\n\nconst othersPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'blue' }),\n    stroke: new Stroke({ color: 'darkblue', width: 2 }),\n  }),\n});\n\nconst pointStyleFunction = mot => {\n  if (mot === 'rail') {\n    return railPointStyle;\n  }\n  if (mot === 'bus') {\n    return busPointStyle;\n  }\n  if (mot === 'foot') {\n    return pedestrianPointStyle;\n  }\n  if (mot === 'car') {\n    return carPointStyle;\n  }\n  return othersPointStyle;\n};\n\nconst lineStyleFunction = (mot, isHovered) => {\n  if (mot === 'rail') {\n    return isHovered ? railLineHoveredStyle : railLineStyle;\n  }\n  if (mot === 'bus') {\n    return isHovered ? busLineHoveredStyle : busLineStyle;\n  }\n  if (mot === 'foot') {\n    return isHovered ? pedestrianLineHoveredStyle : pedestrianLineStyle;\n  }\n  if (mot === 'car') {\n    return isHovered ? carLineHoveredStyle : carLineStyle;\n  }\n  return isHovered ? othersLineHoveredStyle : othersLineStyle;\n};\n\nexport { lineStyleFunction, pointStyleFunction };\n","import React, { Component, createRef } from 'react';\nimport { connect } from 'react-redux';\nimport ConfigReader from 'react-spatial/ConfigReader';\nimport LayerService from 'react-spatial/LayerService';\nimport Layer from 'react-spatial/layers/Layer';\nimport BasicMap from 'react-spatial/components/BasicMap';\nimport { Map, Feature } from 'ol';\nimport { Vector as VectorLayer } from 'ol/layer';\nimport _ from 'lodash/core';\nimport { Point } from 'ol/geom';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { Vector as VectorSource } from 'ol/source';\nimport {\n  defaults as defaultInteractions,\n  Translate,\n  Modify,\n} from 'ol/interaction';\nimport PropTypes from 'prop-types';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport RoutingMenu from '../RoutingMenu';\nimport RouteInfosDialog from '../RouteInfosDialog';\nimport {\n  lineStyleFunction,\n  pointStyleFunction,\n} from '../../config/styleConfig';\nimport {\n  propTypeCoordinates,\n  propTypeCurrentStops,\n  propTypeCurrentStopsGeoJSON,\n} from '../../store/prop-types';\nimport { GRAPHHOPPER_MOTS } from '../../constants';\nimport { to4326 } from '../../utils';\nimport './MapComponent.scss';\nimport * as actions from '../../store/actions';\n\n/**\n * The map props\n * @typedef MapComponentProps\n * @type {props}\n * @property {string} APIKey key obtained from geOps that enables you to used the previous API services.\n * @property {string} routingUrl The API routing url to be used for navigation.\n * @property {string} currentMot The current selected mot by user, example 'bus'.\n * @property {Object} currentStopsGeoJSON The current stops defined by user in geojson format inside a dictionary, key is the stop index(order) and the value is the geoJSON itself.\n * @property {function} onShowNotification A store action that can be dispatched, takes the notification message and type as arguments.\n * @property {function} onSetClickLocation A store action that can be dispatched, takes the clicked location on map array of [long,lat] and stores it in the store.\n * @category Props\n */\n\nlet abortController = new AbortController();\nconst zoom = 6;\n\n/**\n * The only true map that shows inside the application.\n * @category Map\n */\nclass MapComponent extends Component {\n  static getExtentCenter = extent => {\n    const X = extent[0] + (extent[2] - extent[0]) / 2;\n    const Y = extent[1] + (extent[3] - extent[1]) / 2;\n    return [X, Y];\n  };\n\n  static indexInGeom = (lineGeom, point) => {\n    const firstBreakIdx = lineGeom.indexOf(point[0]);\n    const secondBreakIdx = lineGeom.indexOf(point[1]);\n\n    return firstBreakIdx === secondBreakIdx - 1;\n  };\n\n  /**\n   * Default constructor, gets called automatically upon initialization.\n   * @param {...MapComponentProps} props Props received so that the component can function properly.\n   * @category Map\n   */\n  constructor(props) {\n    super(props);\n    const { APIKey, onSetClickLocation, olMap } = this.props;\n    this.map = olMap;\n    this.mapRef = createRef();\n    this.hoveredFeature = null;\n    this.hoveredRoute = null;\n    this.initialRouteDrag = null;\n    this.state = {\n      hoveredStationOpen: false,\n      hoveredStationName: '',\n      isActiveRoute: false,\n      hoveredPoint: null,\n    };\n\n    this.onHighlightPoint = this.onHighlightPoint.bind(this);\n\n    this.projection = 'EPSG:3857';\n\n    const layerService = new LayerService(\n      ConfigReader.readConfig([\n        {\n          name: 'Basemap',\n          visible: true,\n          isBaseLayer: true,\n          data: {\n            type: 'mapbox',\n            url: `https://maps.geops.io/styles/travic/style.json?key=${APIKey}`,\n          },\n        },\n      ]),\n    );\n\n    // Define route vectorLayer.\n    this.routeVectorSource = new VectorSource({\n      features: [],\n    });\n    layerService.addLayer(\n      new Layer({\n        key: 'routeLayer',\n        name: 'routeLayer',\n        olLayer: new VectorLayer({\n          zIndex: 1,\n          source: this.routeVectorSource,\n        }),\n      }),\n    );\n\n    // Define highlight vectorLayer.\n    this.highlightVectorSource = new VectorSource({});\n    layerService.addLayer(\n      new Layer({\n        key: 'highlightLayer',\n        name: 'highlightLayer',\n        olLayer: new VectorLayer({\n          zIndex: 1,\n          source: this.highlightVectorSource,\n        }),\n      }),\n    );\n\n    // Define stop vectorLayer.\n    this.markerVectorSource = new VectorSource({});\n    layerService.addLayer(\n      new Layer({\n        key: 'markerLayer',\n        name: 'markerLayer',\n        olLayer: new VectorLayer({\n          zIndex: 1,\n          source: this.markerVectorSource,\n        }),\n      }),\n    );\n\n    this.markerVectorLayer = layerService.getLayer('markerLayer');\n    this.routeVectorLayer = layerService.getLayer('routeLayer');\n    this.layers = [...layerService.getLayers()];\n\n    const translate = new Translate({\n      layers: [this.markerVectorLayer.olLayer],\n      hitTolerance: 3,\n    });\n\n    translate.on('translateend', evt => {\n      const {\n        currentStops,\n        currentStopsGeoJSON,\n        onSetCurrentStops,\n        onSetCurrentStopsGeoJSON,\n      } = this.props;\n      const newCurrentStops = _.clone(currentStops);\n      const newCurentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n\n      const { name, id } = evt.features.getArray()[0].getProperties();\n      let featureIndex;\n      if (name) {\n        featureIndex = currentStops.indexOf(name);\n      } else {\n        const isCoordPresent = el => {\n          if (!Array.isArray(el)) {\n            return false;\n          }\n          const coords = id.slice().reverse();\n          return el[0] === coords[0] && el[1] === coords[1];\n        };\n        featureIndex = currentStops.findIndex(isCoordPresent);\n      }\n      newCurrentStops[featureIndex] = evt.coordinate;\n      newCurentStopsGeoJSON[featureIndex] = {\n        type: 'FeatureCollection',\n        features: [\n          {\n            type: 'Feature',\n            properties: {\n              id: evt.coordinate.slice().reverse(),\n              type: 'coordinates',\n            },\n            geometry: {\n              type: 'Point',\n              coordinates: evt.coordinate,\n            },\n          },\n        ],\n      };\n      onSetCurrentStops(newCurrentStops);\n      onSetCurrentStopsGeoJSON(newCurentStopsGeoJSON);\n    });\n\n    const modify = new Modify({\n      source: this.routeVectorSource,\n      pixelTolerance: 4,\n      condition: () => {\n        const { currentMot } = this.props;\n        return !GRAPHHOPPER_MOTS.includes(currentMot);\n      },\n      style: () => {\n        const { currentMot } = this.props;\n        return pointStyleFunction(currentMot);\n      },\n    });\n\n    modify.on('modifystart', evt => {\n      // save start point to find where to add the new HOP!\n      this.initialRouteDrag = {\n        features: evt.features.getArray(),\n        coordinate: evt.mapBrowserEvent.coordinate,\n      };\n    });\n\n    modify.on('modifyend', evt => {\n      const { features } = this.initialRouteDrag;\n      const {\n        currentMot,\n        currentStops,\n        currentStopsGeoJSON,\n        onSetCurrentStops,\n        onSetCurrentStopsGeoJSON,\n      } = this.props;\n      const updatedCurrentStops = _.clone(currentStops);\n      const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n      let newHopIdx = -1;\n\n      // No drag for foot/car for now on.\n      if (!GRAPHHOPPER_MOTS.includes(currentMot)) {\n        const flatCoords = features\n          .map(f => f.getGeometry())\n          .map(lineString => {\n            return [\n              ...lineString.getFirstCoordinate(),\n              ...lineString.getLastCoordinate(),\n            ];\n          });\n\n        const closestSegment = this.routeVectorSource\n          .getClosestFeatureToCoordinate(this.initialRouteDrag.coordinate)\n          .getGeometry();\n\n        const closestEdges = [\n          ...closestSegment.getFirstCoordinate(),\n          ...closestSegment.getLastCoordinate(),\n        ];\n\n        flatCoords.forEach((segment, idx) => {\n          if (\n            segment.length === closestEdges.length &&\n            segment.every((value, index) => {\n              return value === closestEdges[index];\n            })\n          ) {\n            newHopIdx = idx + 1;\n          }\n        });\n      }\n\n      if (newHopIdx >= 0) {\n        updatedCurrentStops.splice(\n          newHopIdx,\n          0,\n          evt.mapBrowserEvent.coordinate,\n        );\n\n        if (updatedCurrentStopsGeoJSON[newHopIdx]) {\n          const keys = Object.keys(updatedCurrentStopsGeoJSON).reverse();\n          keys.forEach(k => {\n            if (parseInt(k, 10) >= newHopIdx) {\n              updatedCurrentStopsGeoJSON[`${parseInt(k, 10) + 1}`] =\n                updatedCurrentStopsGeoJSON[k];\n            }\n            if (parseInt(k, 10) === newHopIdx) {\n              updatedCurrentStopsGeoJSON[newHopIdx] = {\n                type: 'FeatureCollection',\n                features: [\n                  {\n                    type: 'Feature',\n                    properties: {\n                      id: evt.mapBrowserEvent.coordinate.slice().reverse(),\n                      type: 'coordinates',\n                    },\n                    geometry: {\n                      type: 'Point',\n                      coordinates: evt.mapBrowserEvent.coordinate,\n                    },\n                  },\n                ],\n              };\n            }\n          });\n        }\n\n        onSetCurrentStops(updatedCurrentStops);\n        onSetCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON);\n      }\n      this.initialRouteDrag = null;\n    });\n\n    const interactions = defaultInteractions().extend([translate, modify]);\n    interactions.getArray().forEach(interaction => {\n      this.map.addInteraction(interaction);\n    });\n\n    this.onZoomRouteClick = () => {\n      let featExtent;\n      if (this.routeVectorSource.getFeatures().length) {\n        featExtent = this.routeVectorSource.getExtent();\n      }\n\n      if (featExtent.filter(f => Number.isFinite(f)).length === 4) {\n        this.map.getView().fit(this.routeVectorSource.getExtent(), {\n          size: this.map.getSize(),\n          duration: 500,\n          padding: [200, 200, 200, 200],\n        });\n      }\n    };\n\n    this.onPanViaClick = (item, idx) => {\n      const { currentStopsGeoJSON } = this.props;\n      if (currentStopsGeoJSON && currentStopsGeoJSON[idx]) {\n        const featureCoord = currentStopsGeoJSON[idx].features\n          ? currentStopsGeoJSON[idx].features[0].geometry.coordinates\n          : currentStopsGeoJSON[idx].geometry.coordinates;\n\n        this.map.getView().animate({\n          center: featureCoord,\n          duration: 500,\n          padding: [100, 100, 100, 100],\n        });\n      }\n    };\n\n    this.map.on('singleclick', evt => {\n      const { isFieldFocused, currentStops } = this.props;\n      // if one field empty or if a field is focused\n      if (currentStops.includes('') || isFieldFocused) {\n        onSetClickLocation(evt.coordinate);\n      }\n    });\n    this.map.on('pointermove', evt => {\n      const { currentMot } = this.props;\n\n      if (this.hoveredFeature) {\n        this.hoveredFeature = null;\n        this.setState({ hoveredStationOpen: false, hoveredStationName: '' });\n      }\n\n      if (this.hoveredRoute) {\n        this.routeVectorLayer.olLayer.setStyle(\n          lineStyleFunction(currentMot, false),\n        );\n        this.hoveredRoute = null;\n        this.setState({\n          hoveredPoint: null,\n        });\n      }\n      const hovFeats = this.map.getFeaturesAtPixel(evt.pixel, {\n        hitTolerance: 2,\n      });\n\n      hovFeats.forEach(feature => {\n        if (feature.getGeometry().getType() === 'Point') {\n          this.hoveredFeature = feature;\n          let name = '';\n          const featCountryCode = feature.get('country_code');\n          if (feature.get('name')) {\n            name = `${feature.get('name')}${\n              featCountryCode ? ` - ${featCountryCode}` : ''\n            }`;\n          } else {\n            name = `${to4326(feature.getGeometry().flatCoordinates)}`;\n          }\n          this.setState({\n            hoveredStationOpen: true,\n            hoveredStationName: name,\n          });\n        }\n        if (feature.getGeometry().getType() === 'LineString') {\n          this.hoveredRoute = feature;\n\n          this.setState({\n            hoveredPoint: evt.coordinate,\n          });\n        }\n        return true;\n      });\n    });\n  }\n\n  /**\n   * Perform the necessary actions when receiving updated props.\n   * If new stops are received, then remove any existing stops/routes and draw those stops/routes.\n   * @category Map\n   */\n  componentDidUpdate(prevProps) {\n    const { currentStopsGeoJSON, currentMot } = this.props;\n    const currentMotChanged = currentMot && currentMot !== prevProps.currentMot;\n    const currentStopsGeoJSONChanged =\n      currentStopsGeoJSON &&\n      currentStopsGeoJSON !== prevProps.currentStopsGeoJSON;\n    if (currentMotChanged || currentStopsGeoJSONChanged) {\n      this.markerVectorSource.clear();\n      Object.keys(currentStopsGeoJSON).forEach(key => {\n        this.markerVectorSource.addFeatures(\n          new GeoJSON().readFeatures(currentStopsGeoJSON[key]),\n        );\n        this.markerVectorSource\n          .getFeatures()\n          .forEach(f => f.setStyle(pointStyleFunction(currentMot)));\n      });\n      // Remove the old route if exists\n      this.routeVectorSource.clear();\n      this.setIsActiveRoute(false);\n\n      // Draw a new route if more than 1 stop is defined\n      if (Object.keys(currentStopsGeoJSON).length > 1) {\n        this.drawNewRoute();\n      }\n    }\n  }\n\n  onMapMoved = evt => {\n    const { center, onSetCenter } = this.props;\n    const newCenter = evt.map.getView().getCenter();\n    if (center[0] !== newCenter[0] || center[1] !== newCenter[1]) {\n      onSetCenter(newCenter);\n    }\n  };\n\n  /*\n   *  Highlight a point on the route.\n   */\n  onHighlightPoint(coords) {\n    const { currentMot } = this.props;\n\n    this.highlightVectorSource.clear();\n    const feat = new Feature({\n      geometry: new Point(coords),\n    });\n    feat.setStyle(pointStyleFunction(currentMot));\n    this.highlightVectorSource.addFeatures([feat]);\n  }\n\n  onFeaturesHover(features) {\n    if (this.mapRef) {\n      this.mapRef.current.node.current.style.cursor = features.length\n        ? 'pointer'\n        : 'inherit';\n    }\n  }\n\n  setIsActiveRoute(isActiveRoute) {\n    this.setState({ isActiveRoute });\n  }\n\n  /**\n   * After receiving the updated stops, send a call to the routingAPI to find a suitable route between\n   * two points/stations, if a route is found, it's returned and drawn to the map.\n   * @category Map\n   */\n  drawNewRoute = () => {\n    const hops = [];\n    const {\n      currentStopsGeoJSON,\n      routingUrl,\n      currentMot,\n      APIKey,\n      routingElevation,\n      resolveHops,\n      onShowNotification,\n      onSetShowLoadingBar,\n      onSetSelectedRoutes,\n    } = this.props;\n\n    onSetShowLoadingBar(true);\n\n    Object.keys(currentStopsGeoJSON).forEach(key => {\n      if (currentStopsGeoJSON[key].features) {\n        // If the current item is a point selected on the map, not a station.\n        hops.push(\n          `${to4326(currentStopsGeoJSON[key].features[0].geometry.coordinates)\n            .slice()\n            .reverse()}`,\n        );\n      } else if (!GRAPHHOPPER_MOTS.includes(currentMot)) {\n        hops.push(`!${currentStopsGeoJSON[key].properties.uid}`);\n      } else {\n        hops.push(`${currentStopsGeoJSON[key].properties.name}`);\n      }\n    });\n\n    abortController.abort();\n    abortController = new AbortController();\n    const { signal } = abortController;\n\n    const reqUrl = `${routingUrl}?via=${hops.join(\n      '|',\n    )}&mot=${currentMot}&resolve-hops=${resolveHops}&key=${APIKey}&elevation=${routingElevation}&coord-radius=100.0&coord-punish=1000.0`;\n\n    fetch(reqUrl, { signal })\n      .then(response => response.json())\n      .then(response => {\n        onSetShowLoadingBar(false);\n        if (response.error) {\n          onShowNotification(\"Couldn't find route\", 'error');\n          onSetSelectedRoutes([]);\n          return;\n        }\n        // A route was found, prepare to draw it.\n        this.routeVectorSource.clear();\n        const format = new GeoJSON({\n          dataProjection: 'EPSG:4326',\n          featureProjection: 'EPSG:3857',\n        });\n        this.routeVectorSource.addFeatures(format.readFeatures(response));\n        this.setIsActiveRoute(!!this.routeVectorSource.getFeatures().length);\n        onSetSelectedRoutes(this.routeVectorSource.getFeatures());\n        this.routeVectorLayer.olLayer.setStyle(\n          lineStyleFunction(currentMot, false),\n        );\n      })\n      .catch(err => {\n        if (err.name === 'AbortError') {\n          // eslint-disable-next-line no-console\n          console.warn(`Abort ${reqUrl}`);\n          return;\n        }\n        onSetShowLoadingBar(false);\n        onSetSelectedRoutes([]);\n        // It's important to rethrow all other errors so you don't silence them!\n        // For example, any error thrown by setState(), will pass through here.\n        throw err;\n      });\n  };\n\n  /**\n   * Render the map component to the dom\n   * @category Map\n   */\n  render() {\n    const {\n      center,\n      mots,\n      APIKey,\n      selectedRoutes,\n      isRouteInfoOpen,\n      stationSearchUrl,\n    } = this.props;\n\n    const {\n      isActiveRoute,\n      hoveredPoint,\n      hoveredStationOpen,\n      hoveredStationName,\n    } = this.state;\n\n    return (\n      <>\n        <RoutingMenu\n          mots={mots}\n          stationSearchUrl={stationSearchUrl}\n          isActiveRoute={isActiveRoute}\n          onZoomRouteClick={this.onZoomRouteClick}\n          onPanViaClick={this.onPanViaClick}\n          APIKey={APIKey}\n        />\n        <Snackbar\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          open={hoveredStationOpen}\n          message={hoveredStationName}\n        />\n        <BasicMap\n          ref={this.mapRef}\n          center={center}\n          layers={this.layers}\n          onMapMoved={evt => this.onMapMoved(evt)}\n          onFeaturesHover={evt => this.onFeaturesHover(evt)}\n          zoom={zoom}\n          tabIndex={null}\n          map={this.map}\n          viewOptions={{\n            projection: this.projection,\n          }}\n        />\n        {isRouteInfoOpen && selectedRoutes.length ? (\n          <RouteInfosDialog\n            routes={selectedRoutes}\n            hoveredCoords={hoveredPoint}\n            onHighlightPoint={this.onHighlightPoint}\n            clearHighlightPoint={() => {\n              this.highlightVectorSource.clear();\n            }}\n          />\n        ) : null}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    center: state.MapReducer.center,\n    selectedRoutes: state.MapReducer.selectedRoutes,\n    isRouteInfoOpen: state.MapReducer.isRouteInfoOpen,\n    currentMot: state.MapReducer.currentMot,\n    currentStops: state.MapReducer.currentStops,\n    currentStopsGeoJSON: state.MapReducer.currentStopsGeoJSON,\n    isFieldFocused: state.MapReducer.isFieldFocused,\n    routingElevation: state.MapReducer.routingElevation,\n    resolveHops: state.MapReducer.resolveHops,\n    olMap: state.MapReducer.olMap,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetCenter: center => dispatch(actions.setCenter(center)),\n    onSetCurrentStops: currentStops =>\n      dispatch(actions.setCurrentStops(currentStops)),\n    onSetCurrentStopsGeoJSON: currentStopsGeoJSON =>\n      dispatch(actions.setCurrentStopsGeoJSON(currentStopsGeoJSON)),\n    onSetClickLocation: clickLocation =>\n      dispatch(actions.setClickLocation(clickLocation)),\n    onShowNotification: (notificationMessage, notificationType) =>\n      dispatch(actions.showNotification(notificationMessage, notificationType)),\n    onSetShowLoadingBar: showLoadingBar =>\n      dispatch(actions.setShowLoadingBar(showLoadingBar)),\n    onSetSelectedRoutes: selectedRoutes =>\n      dispatch(actions.setSelectedRoutes(selectedRoutes)),\n  };\n};\n\nMapComponent.propTypes = {\n  center: propTypeCoordinates.isRequired,\n  selectedRoutes: PropTypes.arrayOf(PropTypes.instanceOf(Feature)).isRequired,\n  isRouteInfoOpen: PropTypes.bool.isRequired,\n  mots: PropTypes.arrayOf(PropTypes.string).isRequired,\n  APIKey: PropTypes.string.isRequired,\n  stationSearchUrl: PropTypes.string.isRequired,\n  onSetCenter: PropTypes.func.isRequired,\n  onSetClickLocation: PropTypes.func.isRequired,\n  onShowNotification: PropTypes.func.isRequired,\n  onSetShowLoadingBar: PropTypes.func.isRequired,\n  onSetSelectedRoutes: PropTypes.func.isRequired,\n  onSetCurrentStops: PropTypes.func.isRequired,\n  onSetCurrentStopsGeoJSON: PropTypes.func.isRequired,\n  currentStops: propTypeCurrentStops.isRequired,\n  currentStopsGeoJSON: propTypeCurrentStopsGeoJSON.isRequired,\n  isFieldFocused: PropTypes.bool.isRequired,\n  routingUrl: PropTypes.string.isRequired,\n  currentMot: PropTypes.string.isRequired,\n  routingElevation: PropTypes.number.isRequired,\n  resolveHops: PropTypes.bool.isRequired,\n  olMap: PropTypes.instanceOf(Map).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MapComponent);\n","import MapComponent from './MapComponent';\n\nexport default MapComponent;\n","/* eslint-disable no-restricted-globals */\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport RSPermalink from 'react-spatial/components/Permalink';\nimport qs from 'query-string';\nimport { to4326, to3857 } from '../../utils';\nimport {\n  setCurrentStops,\n  setCurrentStopsGeoJSON,\n  setCurrentMot,\n  setCenter,\n  setRoutingElevation,\n  setResolveHops,\n} from '../../store/actions/Map';\n\nconst abortController = new AbortController();\nconst { signal } = abortController;\n\nconst validateUrlCoordinates = coordArray => {\n  /* Check if the x and y values are xy-coordinates */\n  if (\n    isFinite(coordArray[1]) &&\n    Math.abs(coordArray[1]) <= 90 &&\n    isFinite(coordArray[0]) &&\n    Math.abs(coordArray[0]) <= 180\n  ) {\n    return true;\n  }\n  return false;\n};\n\nconst getGeoJson = (viaString, APIKey, stationSearchUrl) => {\n  /* When the via is a pair of coordinates */\n  if (viaString.split(',').length > 1) {\n    let geoJson;\n    const coordArray = viaString\n      .split(',')\n      .filter(val => !isNaN(val))\n      .map(string => parseFloat(string));\n    if (coordArray.length === 2 && validateUrlCoordinates(coordArray)) {\n      /* Convert coordinates to 3857 */\n      const coords3857 = to3857(coordArray);\n      geoJson = {\n        type: 'FeatureCollection',\n        features: [\n          {\n            type: 'Feature',\n            properties: {\n              id: coords3857,\n              type: 'coordinates',\n            },\n            geometry: {\n              type: 'Point',\n              coordinates: coords3857,\n            },\n          },\n        ],\n      };\n    }\n    return Promise.resolve(geoJson);\n  }\n  let reqUrl;\n\n  /* When the via is a UID */\n  if (/^![a-zA-Z0-9]{16}$/.test(viaString)) {\n    reqUrl = `${stationSearchUrl}lookup/${viaString.replace('!', '')}/?key=${APIKey}`;\n  } else {\n    /* search for the station. Remove ! in case it's an IBNR */\n    reqUrl = `${stationSearchUrl}?q=${viaString.replace('!', '')}&key=${APIKey}`;\n  }\n\n  return fetch(reqUrl, { signal })\n    .then(response => response.json())\n    .then(response => {\n      /* Convert coordinates to 3857 */\n      const feature = response.features[0];\n      feature.geometry.coordinates = to3857(\n        response.features[0].geometry.coordinates,\n      );\n      return feature;\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.error('Failed to fetch geoJson');\n      return null;\n    });\n};\n\nconst compileViaString = currentStopsGeoJson => {\n  if (!currentStopsGeoJson || Object.keys(currentStopsGeoJson).length < 2) {\n    return null;\n  }\n\n  const uidStrings = Object.keys(currentStopsGeoJson).map(key => {\n    if (currentStopsGeoJson[key].features) {\n      return `${to4326(\n        currentStopsGeoJson[key].features[0].geometry.coordinates,\n      )}`;\n    }\n    return `!${currentStopsGeoJson[key].properties.uid}`;\n  });\n  return uidStrings.join('|');\n};\n\nfunction Permalink({ mots, APIKey, stationSearchUrl }) {\n  const dispatch = useDispatch();\n  const urlSearch = qs.parse(window.location.search);\n  const center = useSelector(state => state.MapReducer.center);\n  const appState = useSelector(state => state.MapReducer);\n  const currentMot = useSelector(state => state.MapReducer.currentMot);\n  const currentStops = useSelector(state => state.MapReducer.currentStops);\n  const currentStopsGeoJSON = useSelector(\n    state => state.MapReducer.currentStopsGeoJSON,\n  );\n  const routingElevation = useSelector(\n    state => state.MapReducer.routingElevation,\n  );\n  const resolveHops = useSelector(state => state.MapReducer.resolveHops);\n  const map = appState.olMap;\n  const [params, setParams] = useState({});\n\n  /* Configure app on load using url params */\n  useEffect(() => {\n    const newParams = {};\n    if (urlSearch) {\n      if (urlSearch.z && !isNaN(parseFloat(urlSearch.z))) {\n        // Set zoom if defined\n        map.getView().setZoom(urlSearch.z);\n      }\n      if (\n        urlSearch.x &&\n        !isNaN(parseFloat(urlSearch.x)) &&\n        urlSearch.y &&\n        !isNaN(parseFloat(urlSearch.y))\n      ) {\n        // Set center if defined\n        dispatch(setCenter([parseFloat(urlSearch.x), parseFloat(urlSearch.y)]));\n      }\n\n      if (urlSearch.mot) {\n        // Set current mot if defined\n        const newMot = mots.find(mot => mot === urlSearch.mot) || mots[0];\n        newParams.mot = newMot;\n        dispatch(setCurrentMot(newMot));\n      }\n\n      if (urlSearch.via) {\n        // Set via stations if defined\n        newParams.via = urlSearch.via;\n        const viaArray = urlSearch.via.split('|');\n        const geoJsonArray = viaArray.map(viaString =>\n          getGeoJson(viaString, APIKey, stationSearchUrl),\n        );\n        Promise.all(geoJsonArray).then(values => {\n          dispatch(\n            setCurrentStops(\n              values.map(stop => {\n                if (!stop) {\n                  return '';\n                }\n                if (stop.type === 'FeatureCollection') {\n                  return stop.features[0].geometry.coordinates;\n                }\n                return stop.properties.name;\n              }),\n            ),\n          );\n          const geoJsonObject = {};\n          values\n            .filter(stop => !!stop)\n            // eslint-disable-next-line no-return-assign\n            .forEach((stop, idx) => (geoJsonObject[`${idx}`] = stop));\n          dispatch(setCurrentStopsGeoJSON(geoJsonObject));\n        });\n      }\n\n      if (urlSearch.elevation) {\n        // Set elevation if defined\n        dispatch(setRoutingElevation(parseInt(urlSearch.elevation, 10)));\n      }\n\n      if (urlSearch['resolve-hops']) {\n        dispatch(setResolveHops(urlSearch['resolve-hops'] === 'true'));\n      }\n    }\n    setParams(newParams);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /* Update url params on app update */\n  useEffect(() => {\n    const newParams = {};\n    newParams.z = map.getView().getZoom();\n    [newParams.x] = center;\n    [, newParams.y] = center;\n    newParams.mot = currentMot;\n    newParams.elevation = parseInt(routingElevation, 10);\n    newParams['resolve-hops'] = resolveHops;\n    if (Object.keys(currentStopsGeoJSON).length !== 0) {\n      newParams.via = compileViaString(currentStopsGeoJSON);\n    }\n    setParams(newParams);\n  }, [\n    currentMot,\n    currentStops,\n    currentStopsGeoJSON,\n    center,\n    routingElevation,\n    resolveHops,\n    map,\n  ]);\n\n  return <RSPermalink map={map} params={params} />;\n}\n\nPermalink.propTypes = {\n  mots: PropTypes.arrayOf(PropTypes.string).isRequired,\n  APIKey: PropTypes.string.isRequired,\n  stationSearchUrl: PropTypes.string.isRequired,\n};\n\nexport default Permalink;\n","import Permalink from './Permalink';\n\nexport default Permalink;\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { connect } from 'react-redux';\nimport Alert from '@material-ui/lab/Alert';\nimport PropTypes from 'prop-types';\nimport { showNotification } from '../../store/actions';\n\n/**\n * The notification handler props\n * @typedef NotificationHandlerProps\n * @type {props}\n * @property {string} notificationMessage Obtained from the store, the message to be displayed. Can be any valid string.\n * @property {string} notificationType Obtained from the store, the message type (error, success, info, etc...)\n * @category Props\n */\n\n/**\n * Handles all application notification shown to the user\n * @category NotificationHandler\n */\nclass NotificationHandler extends React.Component {\n  /**\n   * Default constructor. visibility is set to false by default. Controlled through state property \"open\"\n   * @param {...NotificationHandlerProps} props Props received so that the component can function properly.\n   * @category NotificationHandler\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n    };\n  }\n\n  /**\n   * If a new notification message is received, show it accordingly.\n   * @category NotificationHandler\n   */\n  componentDidUpdate(prevProps) {\n    const { notificationMessage } = this.props;\n    if (\n      notificationMessage &&\n      notificationMessage !== prevProps.notificationMessage\n    ) {\n      this.handleOpen();\n    }\n  }\n\n  /**\n   * Show the notification to the view.\n   * @category NotificationHandler\n   */\n  handleOpen = () => {\n    this.setState({\n      open: true,\n    });\n  };\n\n  /**\n   * Hide the notification from the view.\n   * @category NotificationHandler\n   */\n  handleClose = () => {\n    const { onShowNotification } = this.props;\n    this.setState({\n      open: false,\n    });\n    onShowNotification(null, 'error');\n  };\n\n  /**\n   * Render the notification to the dom.\n   * @category NotificationHandler\n   */\n  render() {\n    const { notificationMessage, notificationType } = this.props;\n    const { open } = this.state;\n    return (\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        open={open}\n        autoHideDuration={6000}\n        onClose={this.handleClose}\n      >\n        <Alert\n          onClose={this.handleClose}\n          severity={notificationType}\n          elevation={6}\n          variant=\"filled\"\n        >\n          {notificationMessage}\n        </Alert>\n      </Snackbar>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onShowNotification: (notificationMessage, notificationType) =>\n      dispatch(showNotification(notificationMessage, notificationType)),\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    notificationMessage: state.MapReducer.notificationMessage,\n    notificationType: state.MapReducer.notificationType,\n  };\n};\n\nNotificationHandler.propTypes = {\n  onShowNotification: PropTypes.func.isRequired,\n  notificationMessage: PropTypes.string.isRequired,\n  notificationType: PropTypes.string.isRequired,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(NotificationHandler);\n","import NotificationHandler from './NotificationHandler';\n\nexport default NotificationHandler;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport store from '../../store/store';\nimport MapComponent from '../MapComponent';\nimport Permalink from '../Permalink';\nimport NotificationHandler from '../NotificationHandler';\nimport { VALID_MOTS } from '../../constants';\n\nconst propTypes = {\n  routingUrl: PropTypes.string,\n  stationSearchUrl: PropTypes.string,\n  mots: PropTypes.arrayOf(PropTypes.string),\n};\n\nconst defaultProps = {\n  mots: VALID_MOTS,\n  routingUrl: 'https://api.geops.io/routing/v1/',\n  stationSearchUrl: 'https://api.geops.io/stops/v1/',\n};\n\n/**\n * Root component of the application that holds all other sub-components.\n * @param {string[]} mots List of mots to be available (ex: ['bus', 'train'])\n * @param {string} routingUrl The API routing url to be used for navigation.\n * @param {string} stationSearchUrl The API station search URL to be used for searching for stations.\n */\nfunction App(props) {\n  const { mots, routingUrl, stationSearchUrl } = props;\n  const apiKey = process.env.REACT_APP_API_KEY;\n\n  return (\n    <Provider store={store}>\n      <Permalink\n        mots={mots}\n        APIKey={apiKey}\n        stationSearchUrl={stationSearchUrl}\n      />\n      <MapComponent\n        mots={mots}\n        routingUrl={routingUrl}\n        APIKey={apiKey}\n        stationSearchUrl={stationSearchUrl}\n      />\n      <NotificationHandler />\n    </Provider>\n  );\n}\n\nApp.propTypes = propTypes;\nApp.defaultProps = defaultProps;\n\nexport default App;\n","import App from './App';\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              // eslint-disable-next-line no-console\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // eslint-disable-next-line no-console\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      // eslint-disable-next-line no-console\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport default function register() {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import polyfills for ie 11\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}