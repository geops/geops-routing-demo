{"version":3,"sources":["store/reducers/Map.jsx","store/actions/actionTypes.js","store/store.js","store/actions/Map.jsx","constants.js","utils.jsx","Components/SearchResults/SearchResults.jsx","Components/SearchResults/index.js","Components/TrackSelect/TrackSelect.jsx","store/prop-types.js","Components/SearchField/SearchField.jsx","Components/SearchField/index.js","Components/RoutingMenu/RoutingMenu.jsx","Components/RoutingMenu/index.js","Components/RouteInfosDialog/interpolated_surface.svg","Components/RouteInfosDialog/surface_elevation.svg","Components/RouteInfosDialog/RouteInfosDialog.jsx","Components/RouteInfosDialog/index.js","config/styleConfig.js","Components/MapComponent/MapComponent.jsx","Components/MapComponent/index.js","Components/Permalink/Permalink.jsx","Components/Permalink/index.js","Components/NotificationHandler/NotificationHandler.jsx","Components/NotificationHandler/index.js","Components/App/App.jsx","Components/App/index.js","serviceWorker.js","index.js"],"names":["initialState","center","currentMot","currentStops","currentStopsGeoJSON","clickLocation","notificationMessage","notificationType","isFieldFocused","showLoadingBar","selectedRoutes","isRouteInfoOpen","dialogPosition","x","y","olMap","Map","controls","resolveHops","tracks","setCenter","state","action","updatedState","setCurrentStops","setCurrentStopsGeoJSON","setCurrentMot","setClickLocation","showNotification","setIsFieldFocused","setShowLoadingBar","setSelectedRoutes","setIsRouteInfoOpen","setDialogPosition","setResolveHops","setTracks","reducer","type","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","MapReducer","store","createStore","applyMiddleware","thunk","DEFAULT_MOTS","OTHER_MOTS","VALID_MOTS","GRAPHHOPPER_MOTS","findMotIcon","name","result","capitalName","charAt","toUpperCase","slice","title","to4326","coord","decimal","transform","map","c","toFixed","to3857","renderSecondary","id","code","countryCode","ifopt","display","push","filter","l","join","SearchResults","props","currentSearchResults","processClickedResultHandler","useSelector","useState","maxHeight","setMaxHeight","ListRef","useRef","updateMenuHeight","useCallback","newMaxheight","current","getTarget","getBoundingClientRect","bottom","top","useEffect","olEventKey","on","unByKey","length","Paper","square","elevation","ref","List","component","className","aria-label","style","overflowY","paddingBottom","paddingTop","searchResult","index","ListItem","onClick","button","key","nextId","ListItemIcon","ListItemText","primary","properties","secondary","country_code","selected","defaultProps","useStyles","makeStyles","wrapper","width","padding","selectStyles","select","paddingRight","icon","height","TrackSelect","disabled","classes","selectClasses","dispatch","useDispatch","track","useMemo","tracksValues","platforms","sort","a","b","parseInt","FormControl","Select","renderValue","val","labelId","value","displayEmpty","onChange","evt","newTracks","target","t","MenuItem","propTypeCoordinates","PropTypes","arrayOf","number","isRequired","geometry","shape","string","feature","oneOfType","currentStop","features","gridContainer","boxSizing","color","fieldWrapper","maxWidth","buttonWrapper","SearchField","addNewSearchFieldHandler","removeSearchFieldHandler","searchStopsHandler","singleStop","processHighlightedResultSelectHandler","onFieldFocusHandler","onPanViaClick","inputReference","fieldLeftIcon","searchFieldSize","searchFieldLabel","fieldRightIcon","isStationName","addNextHopDisabled","Tooltip","IconButton","size","fontSize","Grid","item","xs","container","spacing","alignItems","TextField","inputRef","label","e","Array","isArray","onKeyDown","onFocus","onBlur","setTimeout","event","TabPanel","children","Typography","role","hidden","aria-labelledby","tabs","tab","minWidth","dropDown","backgroundColor","selectInput","checkbox","margin","abortController","AbortController","RoutingMenu","mots","stationSearchUrl","APIKey","isActiveRoute","onZoomRouteClick","onDrawNewRoute","validateMots","motsArray","validationMots","currentMotsArray","mot","includes","forEach","providedMot","requestedMot","find","currentMotsVal","otherMotsVal","elRefs","React","fill","el","i","createRef","currentMots","otherMots","lastChangedFieldIdx","setLastChangedFieldIdx","setCurrentSearchResults","searchMotOnly","setSearchMotOnly","focusedFieldIndex","setFocusedFieldIndex","undefined","currentOtherMot","setCurrentOtherMot","updateCurrentStops","updatedCurrentStops","updatedCurrentStopsGeoJSON","updatedFocusedFieldIndex","updateFieldOnMapClick","_","clone","tempGeoJSON","reverse","coordinates","updatedTracks","handleMotChange","newMot","tracksVal","fieldIndex","currStops","indexToInsertAt","splice","Object","keys","k","indexToRemoveFrom","abort","signal","reqUrl","fetch","then","response","json","error","catch","err","console","warn","firstSearchResult","updateCurrentSearchResults","toString","Tabs","indicatorColor","textColor","singleMot","Tab","root","disableUnderline","onDragEnd","destination","source","removed","newSource","input","indexA","indexB","temp","swapFc","droppableId","provided","droppableProps","innerRef","background","draggableId","prov","snpsht","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","placeholder","Checkbox","checked","inputProps","Button","variant","startIcon","LinearProgress","_extends","assign","arguments","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","strokeWidth","stroke","d","_ref","svgRef","viewBox","ForwardRef","forwardRef","tickFormatter","isMeter","Math","round","everyNth","arr","interval","start","getTooltipX","dist","xPosition","RouteInfosDialog","alt","maxAlt","routes","hoveredCoords","onHighlightPoint","clearHighlightPoint","hoveredPoint","setHoveredPoint","setLength","minAltitude","setMinAltitude","maxAltitude","setMaxAltitude","routePoints","setRoutePoints","distanceUnit","setDistanceUnit","setIsMeter","pointArray","coords","concat","r","getGeometry","getFlatCoordinates","distances","get","lgth","reduce","xArray","yArray","altitudesArray","surfaceElevation","min","max","idx","xVal","yVal","distance","Dialog","isOpen","isDraggable","onDragStop","position","lastX","lastY","classNameHeader","classNameCloseBt","cancelDraggable","onClose","data","onMouseLeave","axisLine","tickLine","domain","offset","dataKey","vertical","dot","cursor","content","hovCoords","linePoints","routeLine","format","GeoJSON","line","combine","writeFeaturesObject","dataProjection","featureProjection","hoveredFeat","Feature","Point","pt","writeFeatureObject","turfClosestPt","nearestPointOnLine","lineCoordinates","nearestPts","nearestPt","prev","curr","goal","abs","hoveredLineIdx","nearestPtIndex","point","renderPrograTooltip","tooltipProps","payload","renderTooltip","memo","lineStyler","lineStyle","Style","Stroke","lineDash","railLineStyle","railLineHoveredStyle","busLineStyle","busLineHoveredStyle","pedestrianLineStyle","pedestrianLineHoveredStyle","carLineStyle","carLineHoveredStyle","othersLineStyle","othersLineHoveredStyle","railPointStyle","image","Circle","radius","Fill","pedestrianPointStyle","carPointStyle","busPointStyle","othersPointStyle","pointStyleFunction","lineStyleFunction","isHovered","MapComponent","onMapMoved","onSetCenter","newCenter","getView","getCenter","drawNewRoute","useElevation","hops","routingUrl","onShowNotification","onSetShowLoadingBar","onSetSelectedRoutes","uid","calculateElevation","routeVectorSource","clear","addFeatures","readFeatures","setIsActiveRoute","getFeatures","routeVectorLayer","olLayer","setStyle","onSetClickLocation","mapRef","hoveredFeature","hoveredRoute","initialRouteDrag","hoveredStationOpen","hoveredStationName","bind","projection","layerService","LayerService","ConfigReader","readConfig","visible","isBaseLayer","url","VectorSource","addLayer","Layer","VectorLayer","zIndex","highlightVectorSource","markerVectorSource","markerVectorLayer","getLayer","layers","getLayers","translate","Translate","hitTolerance","featureIndex","onSetTracks","onSetCurrentStops","onSetCurrentStopsGeoJSON","newCurrentStops","newCurentStopsGeoJSON","getArray","getProperties","findIndex","coordinate","modify","Modify","pixelTolerance","condition","mapBrowserEvent","newHopIdx","flatCoords","f","lineString","getFirstCoordinate","getLastCoordinate","closestSegment","getClosestFeatureToCoordinate","closestEdges","segment","every","defaultInteractions","extend","interaction","addInteraction","featExtent","getExtent","Number","isFinite","fit","getSize","duration","featureCoord","animate","setState","getFeaturesAtPixel","pixel","getType","featCountryCode","flatCoordinates","prevProps","currentMotChanged","tracksChanged","currentStopsGeoJSONChanged","feat","node","Snackbar","anchorOrigin","horizontal","open","message","BasicMap","onFeaturesHover","zoom","tabIndex","viewOptions","Component","getExtentCenter","extent","indexInGeom","lineGeom","connect","actions","getGeoJson","viaString","split","geoJson","coordArray","isNaN","parseFloat","validateUrlCoordinates","coords3857","Promise","resolve","test","replace","Permalink","urlSearch","qs","parse","location","search","appState","params","setParams","newParams","z","setZoom","via","viaArray","geoJsonArray","stop","all","values","geoJsonObject","getZoom","currentStopsGeoJson","compileViaString","NotificationHandler","handleOpen","handleClose","autoHideDuration","Alert","severity","App","apiKey","process","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f0e2bc16.chunk.js","sourcesContent":["import { Map } from 'ol';\nimport * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n  center: [949042.143189, 5899715.591163],\n  currentMot: 'rail',\n  currentStops: ['', ''],\n  currentStopsGeoJSON: {},\n  clickLocation: null,\n  notificationMessage: '',\n  notificationType: 'info',\n  isFieldFocused: false,\n  showLoadingBar: false,\n  selectedRoutes: [],\n  isRouteInfoOpen: false,\n  dialogPosition: {\n    x: 10,\n    y: 275,\n  },\n  olMap: new Map({\n    controls: [],\n  }),\n  resolveHops: false,\n  tracks: [null, null],\n};\n\nconst setCenter = (state, action) => {\n  const updatedState = {\n    center: action.center,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setCurrentStops = (state, action) => {\n  const updatedState = {\n    currentStops: action.currentStops,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setCurrentStopsGeoJSON = (state, action) => {\n  const updatedState = {\n    currentStopsGeoJSON: action.currentStopsGeoJSON,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setCurrentMot = (state, action) => {\n  const updatedState = {\n    currentMot: action.currentMot,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setClickLocation = (state, action) => {\n  const updatedState = {\n    clickLocation: action.clickLocation,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst showNotification = (state, action) => {\n  const updatedState = {\n    notificationMessage: action.notificationMessage,\n    notificationType: action.notificationType,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setIsFieldFocused = (state, action) => {\n  const updatedState = {\n    isFieldFocused: action.isFieldFocused,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setShowLoadingBar = (state, action) => {\n  const updatedState = {\n    showLoadingBar: action.showLoadingBar,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setSelectedRoutes = (state, action) => {\n  const updatedState = {\n    selectedRoutes: action.selectedRoutes,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setIsRouteInfoOpen = (state, action) => {\n  const updatedState = {\n    isRouteInfoOpen: action.isRouteInfoOpen,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setDialogPosition = (state, action) => {\n  const updatedState = {\n    dialogPosition: action.dialogPosition,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setResolveHops = (state, action) => {\n  const updatedState = {\n    resolveHops: action.resolveHops,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setTracks = (state, action) => {\n  const updatedState = {\n    tracks: action.tracks,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_CENTER:\n      return setCenter(state, action);\n    case actionTypes.SET_CURRENT_STOPS:\n      return setCurrentStops(state, action);\n    case actionTypes.SET_CURRENT_STOPS_GEOJSON:\n      return setCurrentStopsGeoJSON(state, action);\n    case actionTypes.SET_CURRENT_MOT:\n      return setCurrentMot(state, action);\n    case actionTypes.SET_CLICK_LOCATION:\n      return setClickLocation(state, action);\n    case actionTypes.SHOW_NOTIFICATION:\n      return showNotification(state, action);\n    case actionTypes.SET_IS_FIELD_FOCUSED:\n      return setIsFieldFocused(state, action);\n    case actionTypes.SET_SHOW_LOADING_BAR:\n      return setShowLoadingBar(state, action);\n    case actionTypes.SET_SELECTED_ROUTES:\n      return setSelectedRoutes(state, action);\n    case actionTypes.SET_IS_ROUTE_INFO_OPEN:\n      return setIsRouteInfoOpen(state, action);\n    case actionTypes.SET_DIALOG_POSITION:\n      return setDialogPosition(state, action);\n    case actionTypes.SET_RESOLVE_HOPS:\n      return setResolveHops(state, action);\n    case actionTypes.SET_TRACKS:\n      return setTracks(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","export const SET_CENTER = 'SET_CENTER';\nexport const SET_CURRENT_STOPS = 'SET_CURRENT_STOPS';\nexport const SET_CURRENT_STOPS_GEOJSON = 'SET_CURRENT_STOPS_GEOJSON';\nexport const SET_CURRENT_MOT = 'SET_CURRENT_MOT';\nexport const SET_CLICK_LOCATION = 'SET_CLICK_LOCATION';\nexport const SHOW_NOTIFICATION = 'SHOW_NOTIFICATION';\nexport const SET_IS_FIELD_FOCUSED = 'SET_IS_FIELD_FOCUSED';\nexport const SET_SHOW_LOADING_BAR = 'SET_SHOW_LOADING_BAR';\nexport const SET_SELECTED_ROUTES = 'SET_SELECTED_ROUTES';\nexport const SET_IS_ROUTE_INFO_OPEN = 'SET_IS_ROUTE_INFO_OPEN';\nexport const SET_DIALOG_POSITION = 'SET_DIALOG_POSITION';\nexport const SET_RESOLVE_HOPS = 'SET_RESOLVE_HOPS';\nexport const SET_TRACKS = 'SET_TRACKS';\n","import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport MapReducer from './reducers/Map';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({ MapReducer });\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import * as actionTypes from './actionTypes';\n\nexport const setCenter = center => {\n  return {\n    type: actionTypes.SET_CENTER,\n    center,\n  };\n};\n\nexport const setCurrentStops = currentStops => {\n  return {\n    type: actionTypes.SET_CURRENT_STOPS,\n    currentStops,\n  };\n};\n\nexport const setCurrentStopsGeoJSON = currentStopsGeoJSON => {\n  return {\n    type: actionTypes.SET_CURRENT_STOPS_GEOJSON,\n    currentStopsGeoJSON,\n  };\n};\n\nexport const setCurrentMot = currentMot => {\n  return {\n    type: actionTypes.SET_CURRENT_MOT,\n    currentMot,\n  };\n};\n\nexport const setClickLocation = clickLocation => {\n  return {\n    type: actionTypes.SET_CLICK_LOCATION,\n    clickLocation,\n  };\n};\n\nexport const showNotification = (notificationMessage, notificationType) => {\n  return {\n    type: actionTypes.SHOW_NOTIFICATION,\n    notificationMessage,\n    notificationType,\n  };\n};\n\nexport const setIsFieldFocused = isFieldFocused => {\n  return {\n    type: actionTypes.SET_IS_FIELD_FOCUSED,\n    isFieldFocused,\n  };\n};\n\nexport const setShowLoadingBar = showLoadingBar => {\n  return {\n    type: actionTypes.SET_SHOW_LOADING_BAR,\n    showLoadingBar,\n  };\n};\n\nexport const setSelectedRoutes = selectedRoutes => {\n  return {\n    type: actionTypes.SET_SELECTED_ROUTES,\n    selectedRoutes,\n  };\n};\n\nexport const setIsRouteInfoOpen = isRouteInfoOpen => {\n  return {\n    type: actionTypes.SET_IS_ROUTE_INFO_OPEN,\n    isRouteInfoOpen,\n  };\n};\n\nexport const setDialogPosition = dialogPosition => {\n  return {\n    type: actionTypes.SET_DIALOG_POSITION,\n    dialogPosition,\n  };\n};\n\nexport const setResolveHops = resolveHops => {\n  return {\n    type: actionTypes.SET_RESOLVE_HOPS,\n    resolveHops,\n  };\n};\n\nexport const setTracks = tracks => {\n  return {\n    type: actionTypes.SET_TRACKS,\n    tracks,\n  };\n};\n","/**\n * The valid supported mots by the application\n * @type {string[]}\n * @category Constants\n */\nexport const DEFAULT_MOTS = ['rail', 'bus', 'foot'];\n\nexport const OTHER_MOTS = [\n  'tram',\n  'subway',\n  'gondola',\n  'funicular',\n  'ferry',\n  'car',\n];\n\nexport const VALID_MOTS = [...DEFAULT_MOTS, ...OTHER_MOTS];\n\nexport const GRAPHHOPPER_MOTS = ['foot', 'car'];\n","import DirectionsBusIcon from '@material-ui/icons/DirectionsBus';\nimport DirectionsRailwayIcon from '@material-ui/icons/DirectionsRailway';\nimport DirectionsWalkIcon from '@material-ui/icons/DirectionsWalk';\nimport React from 'react';\nimport { transform } from 'ol/proj';\n\n/**\n * Map each mot to an icon\n * @param {string} name The name of the mot, ex('bus' or 'train')\n * @returns {Icon} MotIcon\n * @category Utils\n */\nexport const findMotIcon = name => {\n  let result = null;\n  const capitalName = name.charAt(0).toUpperCase() + name.slice(1);\n  switch (name) {\n    case 'rail':\n      result = <DirectionsRailwayIcon />;\n      break;\n    case 'foot':\n      result = <DirectionsWalkIcon />;\n      break;\n    default:\n      result = <DirectionsBusIcon />;\n      break;\n  }\n  return <span title={capitalName}>{result}</span>;\n};\n\nexport const to4326 = (coord, decimal = 5) => {\n  return transform(coord, 'EPSG:3857', 'EPSG:4326').map(c =>\n    c.toFixed(decimal),\n  );\n};\n\nexport const to3857 = coord => {\n  return transform(coord, 'EPSG:4326', 'EPSG:3857');\n};\n","import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport nextId from 'react-id-generator';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport MapMarkerIcon from '@material-ui/icons/LocationOn';\nimport { unByKey } from 'ol/Observable';\n\nimport './SearchResults.scss';\n\nconst renderSecondary = (id, code, countryCode, ifopt) => {\n  const display = [];\n\n  if (countryCode) {\n    display.push(\n      `${countryCode}${id || code ? ':' : ''}${id ? ` ${id}` : ''}${\n        code ? ` ${code}` : ''\n      }`,\n    );\n  } else {\n    display.push(\n      `${id ? `${id}` : ''}${id && code ? ' ' : ''}${code ? `${code}` : ''}`,\n    );\n  }\n  if (ifopt) {\n    display.push(`ifopt: ${ifopt}`);\n  }\n  return display.filter(l => l !== '').join(', ');\n};\n\n/**\n * The component that displays the station search results\n * @category RoutingMenu\n */\nfunction SearchResults(props) {\n  const { currentSearchResults, processClickedResultHandler } = props;\n  const map = useSelector(state => state.MapReducer.olMap);\n  const [maxHeight, setMaxHeight] = useState(null);\n  const ListRef = useRef();\n\n  const updateMenuHeight = useCallback(() => {\n    let newMaxheight;\n\n    if (ListRef.current) {\n      const mapBottom = map.getTarget().getBoundingClientRect().bottom;\n      const elemRect = ListRef.current.getBoundingClientRect();\n      newMaxheight = mapBottom - elemRect.top - 35;\n    }\n\n    if (newMaxheight >= 0) {\n      setMaxHeight(newMaxheight);\n    }\n  }, [map]);\n\n  useEffect(() => {\n    const olEventKey = map.on('change:size', () => updateMenuHeight());\n\n    return () => {\n      unByKey(olEventKey);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    updateMenuHeight();\n  }, [updateMenuHeight, currentSearchResults]);\n\n  if (currentSearchResults.length === 0) {\n    return null;\n  }\n  return (\n    <Paper square elevation={3} ref={ListRef}>\n      <List\n        component=\"nav\"\n        className=\"rd-result-list\"\n        aria-label=\"search results\"\n        style={{\n          maxHeight,\n          overflowY: 'scroll',\n          paddingBottom: 0,\n          paddingTop: 0,\n        }}\n      >\n        {currentSearchResults.map((searchResult, index) => {\n          if (index !== 0) {\n            return (\n              <ListItem\n                onClick={() => {\n                  processClickedResultHandler(searchResult);\n                }}\n                button\n                key={nextId()}\n              >\n                <ListItemIcon>\n                  <MapMarkerIcon />\n                </ListItemIcon>\n                <ListItemText\n                  primary={searchResult.properties.name}\n                  secondary={renderSecondary(\n                    searchResult.properties.id,\n                    searchResult.properties.code,\n                    searchResult.properties.country_code,\n                    searchResult.properties.ifopt,\n                  )}\n                />\n              </ListItem>\n            );\n          }\n          // First item\n          return (\n            <ListItem\n              onClick={() => processClickedResultHandler(searchResult)}\n              button\n              selected\n              key={`searchResult-${searchResult.properties.name}`}\n            >\n              <ListItemIcon>\n                <MapMarkerIcon />\n              </ListItemIcon>\n              <ListItemText\n                primary={searchResult.properties.name}\n                secondary={renderSecondary(\n                  searchResult.properties.id,\n                  searchResult.properties.code,\n                  searchResult.properties.country_code,\n                  searchResult.properties.ifopt,\n                )}\n              />\n            </ListItem>\n          );\n        })}\n      </List>\n    </Paper>\n  );\n}\n\nSearchResults.propTypes = {\n  currentSearchResults: PropTypes.arrayOf(PropTypes.object),\n  processClickedResultHandler: PropTypes.func.isRequired,\n};\n\nSearchResults.defaultProps = {\n  currentSearchResults: [],\n};\n\nexport default SearchResults;\n","import SearchResults from './SearchResults';\n\nexport default SearchResults;\n","import React, { useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { setTracks } from '../../store/actions/Map';\n\nconst propTypes = {\n  index: PropTypes.number.isRequired,\n  disabled: PropTypes.bool.isRequired,\n};\n\nconst useStyles = makeStyles(() => ({\n  wrapper: {\n    width: '12%',\n    padding: '0 10px 4px 10px',\n  },\n}));\n\nconst selectStyles = makeStyles(() => ({\n  select: {\n    paddingRight: '17px !important',\n  },\n  icon: {\n    width: '0.8em',\n    height: '0.8em',\n  },\n}));\n\n/**\n * The component that displays the track selector\n */\nfunction TrackSelect({ index, disabled }) {\n  const classes = useStyles();\n  const selectClasses = selectStyles();\n  const dispatch = useDispatch();\n  const tracks = useSelector(state => state.MapReducer.tracks);\n  const currentMot = useSelector(state => state.MapReducer.currentMot);\n  const currentStopsGeoJSON = useSelector(\n    state => state.MapReducer.currentStopsGeoJSON,\n  );\n  const track = useMemo(() => tracks[index], [index, tracks]);\n\n  const tracksValues = useMemo(() => {\n    return currentStopsGeoJSON[index] &&\n      currentStopsGeoJSON[index].properties &&\n      currentStopsGeoJSON[index].properties.platforms &&\n      currentStopsGeoJSON[index].properties.platforms[currentMot]\n      ? [\n          '',\n          ...currentStopsGeoJSON[index].properties.platforms[currentMot].sort(\n            (a, b) => {\n              return parseInt(a, 10) - parseInt(b, 10);\n            },\n          ),\n        ]\n      : [];\n  }, [index, currentMot, currentStopsGeoJSON]);\n\n  return (\n    <FormControl className={classes.wrapper}>\n      <Select\n        classes={selectClasses}\n        renderValue={val => (val === '' ? '-' : val)}\n        labelId=\"rd-track-select-label\"\n        value={track || ''}\n        displayEmpty\n        disabled={disabled || !tracksValues.length}\n        onChange={evt => {\n          const newTracks = [...tracks];\n          const { value } = evt.target;\n          newTracks[index] = value;\n          dispatch(setTracks(newTracks));\n        }}\n      >\n        {tracksValues.map(t => {\n          return (\n            <MenuItem value={t} key={`track-${t}`}>\n              {t === '' ? '-' : t}\n            </MenuItem>\n          );\n        })}\n      </Select>\n    </FormControl>\n  );\n}\n\nTrackSelect.propTypes = propTypes;\n\nexport default TrackSelect;\n","import PropTypes from 'prop-types';\n\nconst propTypeCoordinates = PropTypes.arrayOf(PropTypes.number.isRequired)\n  .isRequired;\n\nconst geometry = PropTypes.shape({\n  propTypeCoordinates,\n  type: PropTypes.string.isRequired,\n});\n\nconst feature = PropTypes.shape({\n  geometry,\n  properties: PropTypes.shape({\n    id: PropTypes.oneOfType([\n      PropTypes.string.isRequired,\n      PropTypes.string.isRequired,\n    ]),\n    type: PropTypes.string.isRequired,\n  }),\n  type: PropTypes.string.isRequired,\n});\n\nconst currentStop = PropTypes.shape({\n  features: PropTypes.shape({\n    '0': PropTypes.oneOfType([feature, propTypeCoordinates]),\n    '1': PropTypes.oneOfType([feature, propTypeCoordinates]),\n  }),\n  type: PropTypes.string.isRequired,\n});\n\nconst propTypeCurrentStopsGeoJSON = PropTypes.shape({\n  '0': currentStop,\n  '1': currentStop,\n});\n\nconst propTypeCurrentStops = PropTypes.arrayOf(\n  PropTypes.oneOfType([PropTypes.string.isRequired, propTypeCoordinates]),\n);\n\nexport {\n  propTypeCoordinates,\n  propTypeCurrentStops,\n  propTypeCurrentStopsGeoJSON,\n};\n","import React, { useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport Adjust from '@material-ui/icons/Adjust';\nimport Room from '@material-ui/icons/Room';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\nimport TrackSelect from '../TrackSelect';\nimport { propTypeCurrentStops } from '../../store/prop-types';\nimport { to4326 } from '../../utils';\nimport { setIsFieldFocused } from '../../store/actions/Map';\n\nconst useStyles = makeStyles(() => ({\n  gridContainer: {\n    width: '100%',\n    padding: '0px 0px 0px 20px',\n    boxSizing: 'unset',\n  },\n  button: {\n    color: 'black',\n    '& svg': {\n      height: '20px',\n      width: '20px',\n    },\n  },\n  fieldWrapper: {\n    maxWidth: '58%',\n  },\n  buttonWrapper: {\n    maxWidth: '26px',\n  },\n}));\n\n/**\n * The component that displays the search field(s)\n * @category RoutingMenu\n */\nfunction SearchField(props) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const {\n    index,\n    addNewSearchFieldHandler,\n    currentStops,\n    removeSearchFieldHandler,\n    searchStopsHandler,\n    singleStop,\n    processHighlightedResultSelectHandler,\n    onFieldFocusHandler,\n    onPanViaClick,\n    inputReference,\n  } = props;\n  let fieldLeftIcon = null;\n  let searchFieldSize = 10;\n  let searchFieldLabel = '';\n  let fieldRightIcon = null;\n\n  const formatSingleStop = val => (Array.isArray(val) ? to4326(val) : val);\n  const isStationName = useMemo(\n    () => typeof singleStop === 'string' && singleStop !== '',\n    [singleStop],\n  );\n\n  const addNextHopDisabled =\n    currentStops[index] === '' ||\n    (currentStops.length > 2 && currentStops[index + 1] === '');\n  if (index === 0) {\n    // Start station field\n    fieldLeftIcon = (\n      <Tooltip title=\"Pan to the feature\">\n        <IconButton\n          onClick={() => onPanViaClick(singleStop, index)}\n          className={classes.button}\n          aria-label=\"Pan to the feature\"\n          size=\"small\"\n        >\n          <RadioButtonCheckedIcon fontSize=\"small\" color=\"primary\" />\n        </IconButton>\n      </Tooltip>\n    );\n    searchFieldLabel = 'Start';\n    fieldRightIcon = (\n      <Grid item xs={1} className={classes.buttonWrapper}>\n        <Tooltip title=\"Add Hop\">\n          <IconButton\n            onClick={() => addNewSearchFieldHandler(currentStops, index + 1)}\n            disabled={addNextHopDisabled}\n            className={classes.button}\n            aria-label=\"Add Hop\"\n            size=\"small\"\n          >\n            <AddCircleOutlineIcon fontSize=\"small\" />\n          </IconButton>\n        </Tooltip>\n      </Grid>\n    );\n  } else if (index === currentStops.length - 1) {\n    fieldLeftIcon = (\n      <Tooltip title=\"Pan to the feature\">\n        <IconButton\n          onClick={() => onPanViaClick(singleStop, index)}\n          className={classes.button}\n          aria-label=\"Pan to the feature\"\n          size=\"small\"\n        >\n          <Room color=\"primary\" />\n        </IconButton>\n      </Tooltip>\n    );\n    searchFieldLabel = 'End';\n  } else {\n    fieldLeftIcon = (\n      <Tooltip title=\"Pan to the feature\">\n        <IconButton\n          onClick={() => onPanViaClick(singleStop, index)}\n          className={classes.button}\n          aria-label=\"Pan to the feature\"\n          size=\"small\"\n        >\n          <Adjust fontSize=\"small\" color=\"primary\" />\n        </IconButton>\n      </Tooltip>\n    );\n    searchFieldSize = 9;\n    searchFieldLabel = 'Hop';\n    fieldRightIcon = (\n      <>\n        <Grid item xs={1} className={classes.buttonWrapper}>\n          <Tooltip title=\"Add Hop\">\n            <IconButton\n              disabled={addNextHopDisabled}\n              onClick={() => addNewSearchFieldHandler(currentStops, index + 1)}\n              className={classes.button}\n              aria-label=\"addHop\"\n              size=\"small\"\n            >\n              <AddCircleOutlineIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n        <Grid item xs={1} className={classes.buttonWrapper}>\n          <Tooltip title=\"Remove Hop\">\n            <IconButton\n              onClick={() => removeSearchFieldHandler(index)}\n              className={classes.button}\n              aria-label=\"removeHop\"\n              size=\"small\"\n            >\n              <RemoveCircleOutlineIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n      </>\n    );\n  }\n  return (\n    <Grid\n      container\n      spacing={1}\n      className={classes.gridContainer}\n      alignItems=\"flex-end\"\n    >\n      <Grid item xs={1}>\n        {fieldLeftIcon}\n      </Grid>\n      <Grid item xs={searchFieldSize} className={classes.fieldWrapper}>\n        <TextField\n          style={{\n            width: '100%',\n          }}\n          inputRef={inputReference}\n          label={searchFieldLabel}\n          color=\"primary\"\n          onChange={e => searchStopsHandler(e, index)}\n          value={formatSingleStop(singleStop)}\n          onKeyDown={processHighlightedResultSelectHandler}\n          onFocus={() => {\n            dispatch(setIsFieldFocused(true));\n            onFieldFocusHandler(index);\n          }}\n          onBlur={() =>\n            setTimeout(() => {\n              dispatch(setIsFieldFocused(false));\n            }, 500)\n          }\n          onClick={event => {\n            if (event.target.select) {\n              event.target.select();\n            }\n          }}\n        />\n      </Grid>\n      <TrackSelect index={index} disabled={!isStationName} />\n      {fieldRightIcon}\n    </Grid>\n  );\n}\n\nSearchField.propTypes = {\n  index: PropTypes.number.isRequired,\n  addNewSearchFieldHandler: PropTypes.func.isRequired,\n  currentStops: propTypeCurrentStops,\n  removeSearchFieldHandler: PropTypes.func.isRequired,\n  searchStopsHandler: PropTypes.func.isRequired,\n  singleStop: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.number),\n  ]),\n  processHighlightedResultSelectHandler: PropTypes.func.isRequired,\n  onFieldFocusHandler: PropTypes.func.isRequired,\n  onPanViaClick: PropTypes.func.isRequired,\n  inputReference: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.shape({ current: PropTypes.instanceOf(Element) }),\n  ]).isRequired,\n};\n\nSearchField.defaultProps = {\n  currentStops: [],\n  singleStop: '',\n};\n\nexport default SearchField;\n","import SearchField from './SearchField';\n\nexport default SearchField;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Button from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Grid from '@material-ui/core/Grid';\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport InfoIcon from '@material-ui/icons/Info';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport PropTypes from 'prop-types';\nimport nextId from 'react-id-generator';\nimport _ from 'lodash/core';\n\nimport {\n  setTracks,\n  setCurrentStops,\n  setCurrentStopsGeoJSON,\n  setCurrentMot,\n  showNotification,\n  setIsFieldFocused,\n  setShowLoadingBar,\n  setSelectedRoutes,\n  setIsRouteInfoOpen,\n} from '../../store/actions/Map';\nimport './RoutingMenu.scss';\nimport {\n  VALID_MOTS,\n  DEFAULT_MOTS,\n  OTHER_MOTS,\n  GRAPHHOPPER_MOTS,\n} from '../../constants';\nimport { to4326, to3857, findMotIcon } from '../../utils';\nimport SearchResults from '../SearchResults';\nimport SearchField from '../SearchField';\n\nfunction TabPanel(props) {\n  const { children, value, index } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={nextId()}\n      aria-labelledby={`simple-tab-${index}`}\n    >\n      {value === index && children}\n    </Typography>\n  );\n}\n\nconst swapFc = (input, indexA, indexB) => {\n  const temp = input[indexA];\n\n  // eslint-disable-next-line no-param-reassign\n  input[indexA] = input[indexB];\n  // eslint-disable-next-line no-param-reassign\n  input[indexB] = temp;\n};\n\n/**\n * The routing menu props\n * @typedef RoutingMenuProps\n * @type {props}\n * @property {string} stationSearchUrl The station search API used for searching.\n * @property {string} APIKey key obtained from geOps that enables you to used the previous API services.\n * @property {string[]} mots List of mots to be available (ex: ['bus', 'train'])\n * @property {LongLat} clickLocation The location clicked by the user in the form of [long,lat].\n * @category Props\n */\n\nconst useStyles = makeStyles(() => ({\n  tabs: {\n    width: '75%',\n  },\n  tab: {\n    minWidth: '33%',\n    width: '33%',\n  },\n  dropDown: {\n    width: '25%',\n    backgroundColor: 'white',\n  },\n  select: {\n    height: '100%',\n  },\n  selectInput: {\n    backgroundColor: 'white',\n    '&:focus': {\n      backgroundColor: 'white',\n    },\n  },\n  checkbox: {\n    margin: '0px 5px 0px 13px',\n  },\n}));\n\nlet abortController = new AbortController();\n\n/**\n * The routing menu that controls station search\n * @category RoutingMenu\n */\nfunction RoutingMenu({\n  mots,\n  stationSearchUrl,\n  APIKey,\n  isActiveRoute,\n  onZoomRouteClick,\n  onPanViaClick,\n  onDrawNewRoute,\n}) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  /**\n   * Validate the mots provided from the props, then retrieve the icons for the valid ones.\n   * @param mots The provided mots\n   * @returns {Array} The valid mots with their icons\n   * @category RoutingMenu\n   */\n  const validateMots = (motsArray, validationMots) => {\n    const currentMotsArray = [];\n\n    motsArray\n      .filter(mot => {\n        return validationMots.includes(mot);\n      })\n      .forEach(providedMot => {\n        const requestedMot = validationMots.find(mot => mot === providedMot);\n        if (requestedMot) {\n          currentMotsArray.push({\n            name: requestedMot,\n            icon: findMotIcon(requestedMot),\n          });\n        }\n      });\n    if (currentMotsArray.length === 0) {\n      currentMotsArray.push({\n        name: VALID_MOTS[0],\n        icon: findMotIcon(VALID_MOTS[0]),\n      });\n    }\n    return currentMotsArray;\n  };\n\n  const currentMotsVal = validateMots(mots, DEFAULT_MOTS);\n  const otherMotsVal = validateMots(mots, OTHER_MOTS);\n\n  const center = useSelector(state => state.MapReducer.center);\n  const tracks = useSelector(state => state.MapReducer.tracks);\n  const clickLocation = useSelector(state => state.MapReducer.clickLocation);\n  const currentStops = useSelector(state => state.MapReducer.currentStops);\n  const showLoadingBar = useSelector(state => state.MapReducer.showLoadingBar);\n  const isRouteInfoOpen = useSelector(\n    state => state.MapReducer.isRouteInfoOpen,\n  );\n  const currentStopsGeoJSON = useSelector(\n    state => state.MapReducer.currentStopsGeoJSON,\n  );\n  const currentMot = useSelector(state => state.MapReducer.currentMot);\n\n  const elRefs = React.useRef([]);\n  if (elRefs.current.length !== currentStops.length) {\n    elRefs.current = Array(currentStops.length)\n      .fill()\n      .map((el, i) => elRefs.current[i] || React.createRef());\n  }\n\n  const [currentMots] = useState(currentMotsVal);\n  const [otherMots] = useState(otherMotsVal);\n  const [lastChangedFieldIdx, setLastChangedFieldIdx] = useState(null);\n  const [currentSearchResults, setCurrentSearchResults] = useState([]);\n  const [searchMotOnly, setSearchMotOnly] = React.useState(true);\n  const [focusedFieldIndex, setFocusedFieldIndex] = useState(0);\n  const [currentOtherMot, setCurrentOtherMot] = useState(undefined);\n\n  useEffect(() => {\n    if (isRouteInfoOpen) {\n      dispatch(setSelectedRoutes([]));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentStops]);\n\n  /**\n   * Update the current stops array (string array) and the GeoJSON array in the local state.\n   * @param updatedCurrentStops The updated stops.\n   * @param updatedCurrentStopsGeoJSON The updated GeoJSON.\n   * @category RoutingMenu\n   */\n  const updateCurrentStops = (\n    updatedCurrentStops,\n    updatedCurrentStopsGeoJSON,\n    updatedFocusedFieldIndex,\n  ) => {\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    setFocusedFieldIndex(updatedFocusedFieldIndex);\n  };\n\n  const updateFieldOnMapClick = (\n    updatedCurrentStops,\n    updatedFocusedFieldIndex,\n  ) => {\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    // Create GeoJSON\n    const tempGeoJSON = {\n      type: 'FeatureCollection',\n      features: [\n        {\n          type: 'Feature',\n          properties: {\n            id: clickLocation.slice().reverse(),\n            type: 'coordinates',\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: clickLocation,\n          },\n        },\n      ],\n    };\n    const updatedTracks = [...tracks];\n    updatedTracks[updatedFocusedFieldIndex - 1] = '';\n    updatedCurrentStopsGeoJSON[focusedFieldIndex] = tempGeoJSON;\n    updateCurrentStops(\n      updatedCurrentStops,\n      updatedCurrentStopsGeoJSON,\n      updatedFocusedFieldIndex,\n    );\n    dispatch(setTracks(updatedTracks));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * If a location was received through the props (user click on map) act accordingly.\n   * @category RoutingMenu\n   */\n  useEffect(() => {\n    if (clickLocation) {\n      // A click occurred on the map\n      if (currentStops[focusedFieldIndex] === '') {\n        // Performs when there's an empty field.\n        const updatedCurrentStops = currentStops;\n        updatedCurrentStops[focusedFieldIndex] = clickLocation;\n        updateFieldOnMapClick(\n          currentStops,\n          focusedFieldIndex + 1 < currentStops.length\n            ? focusedFieldIndex + 1\n            : focusedFieldIndex,\n        );\n      } else {\n        const updatedCurrentStops = currentStops;\n        const updatedFocusedFieldIndex = focusedFieldIndex;\n        updatedCurrentStops[focusedFieldIndex] = clickLocation;\n        updateFieldOnMapClick(updatedCurrentStops, focusedFieldIndex);\n\n        const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n        // Create GeoJSON\n        const tempGeoJSON = {\n          type: 'FeatureCollection',\n          features: [\n            {\n              type: 'Feature',\n              properties: {\n                id: clickLocation.slice().reverse(),\n                type: 'coordinates',\n              },\n              geometry: {\n                type: 'Point',\n                coordinates: clickLocation,\n              },\n            },\n          ],\n        };\n        updatedCurrentStopsGeoJSON[focusedFieldIndex] = tempGeoJSON;\n        updateCurrentStops(\n          updatedCurrentStops,\n          updatedCurrentStopsGeoJSON,\n          updatedFocusedFieldIndex,\n        );\n        dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickLocation]);\n\n  /**\n   * Process changing the current selected mot, save in local state and dispatch store action.\n   * @param event The change event\n   * @param newMot The new selected mot\n   * @category RoutingMenu\n   */\n  const handleMotChange = (event, newMot, tracksVal) => {\n    const newTracks = [...tracksVal].map(() => '');\n    setCurrentOtherMot(null);\n    dispatch(setTracks(newTracks));\n    dispatch(setCurrentMot(newMot));\n  };\n\n  /**\n   * Gets callled when a search field is in focus. Keep track of the last focused/selected field.\n   * @param fieldIndex The search field index(order)\n   * @category RoutingMenu\n   */\n  const onFieldFocusHandler = fieldIndex => {\n    setFocusedFieldIndex(fieldIndex);\n    dispatch(setIsFieldFocused(true));\n  };\n\n  /**\n   * Create a new search field (hop) between already existing search fields\n   * @param indexToInsertAt The index to insert the new search field at.\n   * @category RoutingMenu\n   */\n  const addNewSearchFieldHandler = (currStops, indexToInsertAt) => {\n    const updatedCurrentStops = _.clone(currentStops);\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    updatedCurrentStops.splice(indexToInsertAt, 0, '');\n\n    if (updatedCurrentStopsGeoJSON[indexToInsertAt]) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON)\n        .filter(k => k >= indexToInsertAt)\n        .reverse();\n      keys.forEach(k => {\n        updatedCurrentStopsGeoJSON[`${parseInt(k, 10) + 1}`] =\n          updatedCurrentStopsGeoJSON[k];\n      });\n    }\n\n    const updatedTracks = [...tracks];\n    updatedTracks.splice(indexToInsertAt, 0, '');\n\n    dispatch(setTracks(updatedTracks));\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * Remove a search field (hop) from a defined index. Then dispatch an update to the stops,\n   * so that the route can be updated if exists.\n   * @param indexToRemoveFrom The index to remove the search field from.\n   * @category RoutingMenu\n   */\n  const removeSearchFieldHandler = indexToRemoveFrom => {\n    const updatedCurrentStops = _.clone(currentStops);\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    updatedCurrentStops.splice(indexToRemoveFrom, 1);\n\n    if (updatedCurrentStopsGeoJSON[indexToRemoveFrom]) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON);\n      keys.forEach(key => {\n        const k = parseInt(key, 10);\n        if (k === indexToRemoveFrom) {\n          delete updatedCurrentStopsGeoJSON[indexToRemoveFrom];\n        } else if (k > indexToRemoveFrom) {\n          updatedCurrentStopsGeoJSON[k - 1] = updatedCurrentStopsGeoJSON[k];\n        }\n      });\n      delete updatedCurrentStopsGeoJSON[keys.length - 1];\n    }\n\n    const updatedTracks = [...tracks];\n    updatedTracks.splice(indexToRemoveFrom, 1);\n\n    dispatch(setTracks(updatedTracks));\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * Perform searching for stations through the station API\n   * @param event\n   * @param fieldIndex The search field(hop) index(order)\n   * @category RoutingMenu\n   */\n  const searchStopsHandler = (event, fieldIndex) => {\n    setLastChangedFieldIdx(fieldIndex);\n    // only search if text is available\n    if (!event.target.value) {\n      const updatedCurrentStops = currentStops;\n      updatedCurrentStops[fieldIndex] = '';\n      setCurrentSearchResults([]);\n      dispatch(setCurrentStops(updatedCurrentStops));\n\n      // Reset the track value.\n      const updatedTracks = [...tracks];\n      updatedTracks[fieldIndex] = '';\n      dispatch(setTracks(updatedTracks));\n\n      dispatch(setShowLoadingBar(false));\n      return;\n    }\n    const updatedCurrentStops = _.clone(currentStops);\n    updatedCurrentStops[fieldIndex] = event.target.value;\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setShowLoadingBar(true));\n\n    abortController.abort();\n    abortController = new AbortController();\n    const { signal } = abortController;\n\n    const reqUrl = `${stationSearchUrl}?q=${event.target.value}&key=${APIKey}${\n      !GRAPHHOPPER_MOTS.includes(currentMot)\n        ? `&mots=${searchMotOnly ? currentMot : ''}`\n        : ''\n    }&ref_location=${to4326(center)\n      .reverse()\n      .join(',')}&limit=10`;\n\n    fetch(reqUrl, { signal })\n      .then(response => response.json())\n      .then(response => {\n        if (response.error) {\n          dispatch(showNotification(\"Couldn't find stations\", 'warning'));\n          return;\n        }\n        if (response.features.length === 0) {\n          dispatch(showNotification(\"Couldn't find stations\", 'warning'));\n        }\n        setCurrentSearchResults(response.features);\n        dispatch(setShowLoadingBar(false));\n      })\n      .catch(err => {\n        if (err.name === 'AbortError') {\n          // eslint-disable-next-line no-console\n          console.warn(`Abort ${reqUrl}`);\n          return;\n        }\n        // It's important to rethrow all other errors so you don't silence them!\n        // For example, any error thrown by setState(), will pass through here.\n        throw err;\n      });\n  };\n\n  const retriggerSearch = () => {\n    if (lastChangedFieldIdx === null) {\n      return;\n    }\n    searchStopsHandler(\n      {\n        target: {\n          value: elRefs.current[lastChangedFieldIdx].current.value,\n        },\n      },\n      lastChangedFieldIdx,\n    );\n  };\n\n  /**\n   * The user makes changes to the current search. Either select the first result,\n   * or delete the text to make a new search.\n   * @param event\n   * @category RoutingMenu\n   */\n  const processHighlightedResultSelectHandler = event => {\n    const [firstSearchResult] = currentSearchResults;\n    if (event.key === 'Enter' && firstSearchResult) {\n      // The user has chosen the first result by pressing 'Enter' key on keyboard\n      const updatedCurrentStops = currentStops;\n      updateCurrentStops[focusedFieldIndex] = firstSearchResult.properties.name;\n      const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n      updatedCurrentStopsGeoJSON[focusedFieldIndex] = firstSearchResult;\n      dispatch(setCurrentStops(updatedCurrentStops));\n      setCurrentSearchResults([]);\n      dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    }\n    if (event.key === 'Backspace') {\n      // The user has erased some of the search query. Reset everything and start all over.\n      let updateCurrentSearchResults = [];\n      if (event.target.value) updateCurrentSearchResults = currentSearchResults;\n      const updatedCurrentStopsGeoJSON = {};\n      Object.keys(currentStopsGeoJSON).forEach(key => {\n        if (key !== focusedFieldIndex.toString()) {\n          updatedCurrentStopsGeoJSON[key] = currentStopsGeoJSON[key];\n        }\n      });\n      setCurrentSearchResults(updateCurrentSearchResults);\n      dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    }\n  };\n\n  /**\n   * The user uses the mouse/touch to select one of the search results.\n   * @param searchResult The clicked search result.\n   * @category RoutingMenu\n   */\n  const processClickedResultHandler = searchResult => {\n    const updatedCurrentStops = currentStops;\n    updatedCurrentStops[focusedFieldIndex] = searchResult.properties.name;\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    updatedCurrentStopsGeoJSON[focusedFieldIndex] = searchResult;\n    dispatch(setCurrentStops(updatedCurrentStops));\n\n    const updatedTracks = [...tracks];\n    updatedTracks[focusedFieldIndex] = '';\n    dispatch(setTracks(updatedTracks));\n    setCurrentSearchResults([]);\n\n    Object.keys(updatedCurrentStopsGeoJSON).forEach(key => {\n      if (key === focusedFieldIndex.toString()) {\n        updatedCurrentStopsGeoJSON[key].geometry.coordinates = to3857(\n          updatedCurrentStopsGeoJSON[key].geometry.coordinates,\n        );\n      }\n    });\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  const changeCurrentOtherMot = evt => {\n    if (!evt) {\n      setCurrentOtherMot(null);\n    } else {\n      const { value } = evt.target;\n      handleMotChange({}, value, tracks);\n      setCurrentOtherMot(value);\n    }\n  };\n\n  const getItemStyle = (isDragging, draggableStyle) => ({\n    userSelect: 'none',\n    background: isDragging ? '#ededed' : 'white',\n    ...draggableStyle,\n  });\n\n  const onDragEnd = result => {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const updatedCurrentStops = _.clone(currentStops);\n    const [removed] = updatedCurrentStops.splice(result.source.index, 1);\n    updatedCurrentStops.splice(result.destination.index, 0, removed);\n\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n\n    const newSource = { ...updatedCurrentStopsGeoJSON[result.source.index] };\n    if (result.destination.index < result.source.index) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON)\n        .filter(k => {\n          return (\n            parseInt(k, 10) >= result.destination.index &&\n            parseInt(k, 10) < result.source.index\n          );\n        })\n        .reverse();\n      keys.forEach(k => {\n        updatedCurrentStopsGeoJSON[`${parseInt(k, 10) + 1}`] =\n          updatedCurrentStopsGeoJSON[k];\n      });\n      updatedCurrentStopsGeoJSON[result.destination.index] = newSource;\n    } else if (result.destination.index > result.source.index) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON).filter(\n        k =>\n          parseInt(k, 10) >= result.source.index &&\n          parseInt(k, 10) <= result.destination.index,\n      );\n      keys.forEach(k => {\n        if (parseInt(k, 10) === result.destination.index) {\n          updatedCurrentStopsGeoJSON[result.destination.index] = newSource;\n        } else {\n          updatedCurrentStopsGeoJSON[k] =\n            updatedCurrentStopsGeoJSON[`${parseInt(k, 10) + 1}`];\n        }\n      });\n    }\n\n    const updatedTracks = [...tracks];\n    swapFc(updatedTracks, result.source.index, result.destination.index);\n\n    dispatch(setTracks(updatedTracks));\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * Render the component to the dom.\n   * @category RoutingMenu\n   */\n\n  if (!onZoomRouteClick || !onPanViaClick) {\n    return null;\n  }\n\n  return (\n    <div className=\"rd-routing-menu\">\n      <Paper square elevation={3}>\n        <div className=\"rd-routing-menu-header\">\n          <Tabs\n            value={DEFAULT_MOTS.includes(currentMot) ? currentMot : false}\n            className={classes.tabs}\n            onChange={(e, mot) => {\n              handleMotChange(e, mot, tracks);\n            }}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            aria-label=\"mots icons\"\n          >\n            {currentMots.map(singleMot => {\n              return (\n                <Tab\n                  className={classes.tab}\n                  key={`mot-${singleMot.name}`}\n                  value={singleMot.name}\n                  icon={singleMot.icon}\n                  aria-label={singleMot.name}\n                />\n              );\n            })}\n          </Tabs>\n          <FormControl className={classes.dropDown}>\n            <Select\n              renderValue={val => (val !== '' ? val : 'Other MOTs')}\n              className={classes.select}\n              classes={{ root: classes.selectInput }}\n              labelId=\"rd-other-mot-label\"\n              value={currentOtherMot || ''}\n              disableUnderline={!currentOtherMot}\n              displayEmpty\n              onChange={changeCurrentOtherMot}\n            >\n              {otherMots.map(mot => {\n                return (\n                  <MenuItem value={mot.name} key={`other-mot-${mot.name}`}>\n                    {mot.name}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </div>\n        <TabPanel>\n          <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"droppable\">\n              {provided => (\n                <div\n                  className=\"stopsContainer\"\n                  // eslint-disable-next-line react/jsx-props-no-spreading\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                  style={{\n                    background: 'white',\n                  }}\n                >\n                  {currentStops.map((item, index) => (\n                    <Draggable\n                      // eslint-disable-next-line react/no-array-index-key\n                      key={`searchField-${index}`}\n                      draggableId={`searchField-${index}`}\n                      index={index}\n                    >\n                      {(prov, snpsht) => (\n                        <div\n                          ref={prov.innerRef}\n                          // eslint-disable-next-line react/jsx-props-no-spreading\n                          {...prov.draggableProps}\n                          // eslint-disable-next-line react/jsx-props-no-spreading\n                          {...prov.dragHandleProps}\n                          style={getItemStyle(\n                            snpsht.isDragging,\n                            prov.draggableProps.style,\n                          )}\n                        >\n                          <SearchField\n                            // eslint-disable-next-line react/no-array-index-key\n                            key={`searchField-${index}`}\n                            index={index}\n                            inputReference={elRefs.current[index]}\n                            addNewSearchFieldHandler={addNewSearchFieldHandler}\n                            currentStops={currentStops}\n                            removeSearchFieldHandler={removeSearchFieldHandler}\n                            searchStopsHandler={searchStopsHandler}\n                            singleStop={item}\n                            processHighlightedResultSelectHandler={\n                              processHighlightedResultSelectHandler\n                            }\n                            onFieldFocusHandler={onFieldFocusHandler}\n                            onPanViaClick={onPanViaClick}\n                          />\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n          <div className=\"rd-mot-checkbox\">\n            <Checkbox\n              className={classes.checkbox}\n              checked={searchMotOnly}\n              onChange={() => {\n                setSearchMotOnly(!searchMotOnly);\n                retriggerSearch(lastChangedFieldIdx);\n              }}\n              color=\"primary\"\n              inputProps={{ 'aria-label': 'use only mot' }}\n            />\n            <span>Search only selected mode of transport</span>\n          </div>\n          <div className=\"rd-route-buttons\">\n            <Grid item xs={6}>\n              <Tooltip title=\"Zoom to the route\">\n                <Button\n                  onClick={() => onZoomRouteClick()}\n                  aria-label=\"Zoom to the route\"\n                  disabled={!isActiveRoute}\n                  component={isActiveRoute ? undefined : 'span'}\n                  variant=\"contained\"\n                  color=\"default\"\n                  classes={{\n                    root: 'rd-button-root',\n                    disabled: 'rd-button-disabled',\n                  }}\n                  startIcon={<ZoomInIcon fontSize=\"small\" />}\n                >\n                  <Typography>Zoom to the route</Typography>\n                </Button>\n              </Tooltip>\n            </Grid>\n            <Grid item xs={6}>\n              <Tooltip title=\"Route information\">\n                <Button\n                  onClick={() => {\n                    onDrawNewRoute(true).then(() => {\n                      dispatch(setIsRouteInfoOpen(!isRouteInfoOpen));\n                    });\n                  }}\n                  aria-label=\"Route information\"\n                  disabled={!isActiveRoute}\n                  component={isActiveRoute ? undefined : 'span'}\n                  variant=\"contained\"\n                  color=\"default\"\n                  className={isRouteInfoOpen ? 'rd-button-active' : ''}\n                  classes={{\n                    root: 'rd-button-root',\n                    disabled: 'rd-button-disabled',\n                  }}\n                  startIcon={<InfoIcon fontSize=\"small\" />}\n                >\n                  <Typography>Route information</Typography>\n                </Button>\n              </Tooltip>\n            </Grid>\n          </div>\n        </TabPanel>\n        {showLoadingBar ? <LinearProgress /> : null}\n      </Paper>\n      <SearchResults\n        currentSearchResults={currentSearchResults}\n        processClickedResultHandler={processClickedResultHandler}\n      />\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node.isRequired,\n  value: PropTypes.string,\n  index: PropTypes.number,\n};\n\nTabPanel.defaultProps = {\n  value: null,\n  index: null,\n};\n\nRoutingMenu.propTypes = {\n  mots: PropTypes.arrayOf(PropTypes.string).isRequired,\n  APIKey: PropTypes.string.isRequired,\n  stationSearchUrl: PropTypes.string.isRequired,\n  isActiveRoute: PropTypes.bool.isRequired,\n  onZoomRouteClick: PropTypes.func,\n  onPanViaClick: PropTypes.func,\n  onDrawNewRoute: PropTypes.func.isRequired,\n};\n\nRoutingMenu.defaultProps = {\n  onZoomRouteClick: undefined,\n  onPanViaClick: undefined,\n};\n\nexport default RoutingMenu;\n","import RoutingMenu from './RoutingMenu';\n\nexport default RoutingMenu;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  strokeWidth: 4,\n  fill: \"none\",\n  stroke: \"#ff7f50\",\n  d: \"M0,16h10.666666666666666             A5.333333333333333,5.333333333333333,0,1,1,21.333333333333332,16             H32M21.333333333333332,16             A5.333333333333333,5.333333333333333,0,1,1,10.666666666666666,16\",\n  className: \"recharts-legend-icon\"\n});\n\nvar SvgInterpolatedSurface = function SvgInterpolatedSurface(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    className: \"recharts-surface\",\n    viewBox: \"0 0 32 32\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgInterpolatedSurface, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/interpolated_surface.1ca8d48c.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  strokeWidth: 4,\n  fill: \"none\",\n  stroke: \"#3f51b5\",\n  d: \"M0,16h10.666666666666666             A5.333333333333333,5.333333333333333,0,1,1,21.333333333333332,16             H32M21.333333333333332,16             A5.333333333333333,5.333333333333333,0,1,1,10.666666666666666,16\",\n  className: \"recharts-legend-icon\"\n});\n\nvar SvgSurfaceElevation = function SvgSurfaceElevation(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    className: \"recharts-surface\",\n    viewBox: \"0 0 32 32\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgSurfaceElevation, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/surface_elevation.eab6ed4c.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Feature } from 'ol';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport nearestPointOnLine from '@turf/nearest-point-on-line';\nimport combine from '@turf/combine';\nimport { Point } from 'ol/geom';\nimport Dialog from '@geops/react-ui/components/Dialog';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Label,\n  Tooltip,\n  ReferenceDot,\n  ReferenceLine,\n} from 'recharts';\nimport { ReactComponent as InterpolatedSvg } from './interpolated_surface.svg';\nimport { ReactComponent as SurfaceSvg } from './surface_elevation.svg';\nimport { setIsRouteInfoOpen, setDialogPosition } from '../../store/actions/Map';\nimport './RouteInfosDialog.scss';\n\nconst propTypes = {\n  routes: PropTypes.arrayOf(PropTypes.instanceOf(Feature)).isRequired,\n  hoveredCoords: PropTypes.arrayOf(PropTypes.number),\n  onHighlightPoint: PropTypes.func.isRequired,\n  clearHighlightPoint: PropTypes.func.isRequired,\n};\n\nconst defaultProps = {\n  hoveredCoords: null,\n};\n\nconst tickFormatter = (length, isMeter) => {\n  let output;\n  if (!isMeter) {\n    output = `${Math.round((length / 1000) * 100) / 100}`;\n  } else {\n    output = `${Math.round(length * 100) / 100}`;\n  }\n  return output;\n};\n\nconst everyNth = (arr, interval, start) => {\n  const result = [];\n  for (let i = start || 0; i < arr.length; i += interval || 1) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\nconst getTooltipX = (dist, length) => {\n  const xPosition = (dist / length) * 300;\n  return xPosition >= 80 ? xPosition : 80;\n};\n\nconst getTooltipY = (alt, maxAlt) => {\n  return alt / maxAlt > 0.5 ? 110 : 20;\n};\n\nfunction RouteInfosDialog({\n  routes,\n  hoveredCoords,\n  onHighlightPoint,\n  clearHighlightPoint,\n}) {\n  const dispatch = useDispatch();\n  const [hoveredPoint, setHoveredPoint] = useState(null);\n  const [length, setLength] = useState(null);\n  const [minAltitude, setMinAltitude] = useState(0);\n  const [maxAltitude, setMaxAltitude] = useState(null);\n  const [routePoints, setRoutePoints] = useState([]);\n  const [distanceUnit, setDistanceUnit] = useState(null);\n  const [isMeter, setIsMeter] = useState(null);\n\n  const dialogPosition = useSelector(state => state.MapReducer.dialogPosition);\n\n  const onDragStop = (evt, position) => {\n    dispatch(\n      setDialogPosition({\n        x: position.lastX,\n        y: position.lastY,\n      }),\n    );\n  };\n\n  const renderPrograTooltip = (hovCoords, linePoints, routeLine) => {\n    const format = new GeoJSON();\n\n    const line = combine(\n      format.writeFeaturesObject(routeLine, {\n        dataProjection: 'EPSG:4326',\n        featureProjection: 'EPSG:3857',\n      }),\n    ).features[0];\n\n    const hoveredFeat = new Feature({\n      geometry: new Point(hovCoords),\n    });\n    const pt = format.writeFeatureObject(hoveredFeat, {\n      dataProjection: 'EPSG:4326',\n      featureProjection: 'EPSG:3857',\n    });\n\n    const turfClosestPt = nearestPointOnLine(line, pt);\n    const lineCoordinates = line.geometry.coordinates;\n    const nearestPts = lineCoordinates.map(coords => {\n      return coords[turfClosestPt.properties.index];\n    });\n    const nearestPt = nearestPts.reduce((prev, curr) => {\n      const goal = turfClosestPt.geometry.coordinates[0];\n      if (!prev) {\n        return curr;\n      }\n      return curr && prev && Math.abs(curr[0] - goal) < Math.abs(prev[0] - goal)\n        ? curr\n        : prev;\n    });\n\n    const hoveredLineIdx = nearestPts.indexOf(nearestPt);\n    // Turf only return the index within the closest feature.\n    // We need to add the length of each preceding feature to have the correct index.\n    let nearestPtIndex = turfClosestPt.properties.index;\n    for (let i = 0; i < hoveredLineIdx; i += 1) {\n      nearestPtIndex += lineCoordinates[i].length;\n    }\n\n    const point = linePoints[nearestPtIndex];\n    setHoveredPoint(point);\n\n    if (!point) {\n      return null;\n    }\n    return (\n      <div className=\"rd-tootip-wrapper\">\n        <div>surface elevation: {point.surfaceElevation} m</div>\n        <div>interpolated altitude: {point.alt} m</div>\n        <div>\n          distance: {tickFormatter(point.distance, isMeter)}\n          {isMeter ? ' m' : ' km'}\n        </div>\n      </div>\n    );\n  };\n\n  const renderTooltip = tooltipProps => {\n    if (hoveredPoint) {\n      setHoveredPoint(null);\n    }\n    if (!tooltipProps.payload.length) {\n      return;\n    }\n    const {\n      xVal,\n      yVal,\n      alt,\n      surfaceElevation,\n      distance,\n    } = tooltipProps.payload[0].payload;\n\n    onHighlightPoint([xVal, yVal]);\n    // eslint-disable-next-line consistent-return\n    return (\n      <div className=\"rd-tootip-wrapper\">\n        <div>surface elevation: {surfaceElevation} m</div>\n        <div>interpolated altitude: {alt} m</div>\n        <div>\n          distance: {tickFormatter(distance, isMeter)}\n          {isMeter ? ' m' : ' km'}\n        </div>\n      </div>\n    );\n  };\n\n  useEffect(() => {\n    const pointArray = [];\n    const coords = [].concat(\n      ...routes.map(r => r.getGeometry().getFlatCoordinates()),\n    );\n    const distances = [].concat(...routes.map(r => r.get('vertex_distances')));\n    const lgth = routes\n      .map(r => r.get('line_length'))\n      .reduce((a, b) => a + b, 0);\n    setLength(lgth);\n    setDistanceUnit(lgth > 1000 ? 'km' : 'm');\n    setIsMeter(distanceUnit === 'm');\n\n    const xArray = everyNth(coords, 3, 0);\n    const yArray = everyNth(coords, 3, 1);\n    const altitudesArray = everyNth(coords, 3, 2).map(el => Math.round(el));\n    const surfaceElevation = [].concat(\n      ...routes.map(r => r.get('surface_elevations').map(el => Math.round(el))),\n    );\n    setMinAltitude(Math.min(...surfaceElevation.concat(altitudesArray)));\n    setMaxAltitude(Math.max(...surfaceElevation.concat(altitudesArray)));\n\n    altitudesArray.forEach((alt, idx) => {\n      pointArray.push({\n        alt,\n        surfaceElevation: surfaceElevation.length\n          ? surfaceElevation[idx]\n          : null,\n        xVal: xArray[idx],\n        yVal: yArray[idx],\n        distance: distances[idx],\n      });\n    });\n\n    setRoutePoints(pointArray);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [routes]);\n\n  return (\n    <Dialog\n      isOpen\n      title={<span>Route information</span>}\n      isDraggable\n      onDragStop={onDragStop}\n      className=\"rd-dialog-container\"\n      classNameHeader=\"rd-dialog-header\"\n      classNameCloseBt=\"rd-dialog-close-bt\"\n      cancelDraggable=\".tm-dialog-body\"\n      position={dialogPosition}\n      onClose={() => dispatch(setIsRouteInfoOpen(false))}\n    >\n      <div className=\"rd-dialog-legend\">\n        <SurfaceSvg /> surface elevation\n        <InterpolatedSvg /> interpolated altitude\n      </div>\n      <LineChart\n        width={450}\n        height={200}\n        data={routePoints}\n        onMouseLeave={clearHighlightPoint}\n      >\n        <YAxis\n          type=\"number\"\n          axisLine={false}\n          tickLine={false}\n          domain={[minAltitude - 10, 'dataMax']}\n        >\n          <Label value=\"m\" offset={10} position=\"top\" />\n        </YAxis>\n        <XAxis\n          type=\"number\"\n          dataKey=\"distance\"\n          tickFormatter={dist => tickFormatter(dist, isMeter)}\n        >\n          <Label value={distanceUnit} offset={10} position=\"right\" />\n        </XAxis>\n        <CartesianGrid vertical={false} />\n        <Line\n          type=\"monotone\"\n          dataKey=\"alt\"\n          name=\"interpolated altitude\"\n          dot={false}\n          stroke=\"#ff7f50\"\n          strokeWidth={2}\n        />\n        <Line\n          type=\"monotone\"\n          dataKey=\"surfaceElevation\"\n          name=\"surface elevation\"\n          dot={false}\n          stroke=\"#3f51b5\"\n          strokeWidth={2}\n        />\n        {hoveredCoords && hoveredPoint && (\n          <ReferenceLine x={hoveredPoint.distance} stroke=\"lightgrey\" />\n        )}\n        {hoveredCoords && hoveredPoint && (\n          <ReferenceDot\n            r={4}\n            x={hoveredPoint.distance}\n            y={hoveredPoint.alt}\n            fill=\"#3f51b5\"\n            stroke=\"white\"\n          />\n        )}\n        <Tooltip\n          cursor={hoveredPoint ? true : 'auto'}\n          position={\n            hoveredPoint\n              ? {\n                  x: getTooltipX(hoveredPoint.distance, length),\n                  y: getTooltipY(hoveredPoint.alt, maxAltitude),\n                }\n              : 'auto'\n          }\n          content={content =>\n            hoveredCoords\n              ? renderPrograTooltip(hoveredCoords, routePoints, routes)\n              : renderTooltip(content)\n          }\n        />\n      </LineChart>\n    </Dialog>\n  );\n}\n\nRouteInfosDialog.propTypes = propTypes;\nRouteInfosDialog.defaultProps = defaultProps;\n\nexport default React.memo(RouteInfosDialog);\n","import RouteInfosDialog from './RouteInfosDialog';\n\nexport default RouteInfosDialog;\n","import { Style, Circle, Stroke, Fill } from 'ol/style';\n\nconst lineStyler = lineStyle => {\n  return lineStyle.map(\n    style =>\n      new Style({\n        stroke: new Stroke({\n          color: style[0],\n          width: style[1],\n          lineDash: style[2],\n        }),\n      }),\n  );\n};\n\nconst railLineStyle = lineStyler([\n  ['darkred', 6],\n  ['red', 3],\n]);\n\nconst railLineHoveredStyle = lineStyler([\n  ['darkred', 7],\n  ['red', 4],\n]);\n\nconst busLineStyle = lineStyler([\n  ['rgb(153,153,0)', 6],\n  ['yellow', 3],\n]);\n\nconst busLineHoveredStyle = lineStyler([\n  ['rgb(153,153,0)', 7],\n  ['yellow', 4],\n]);\n\nconst pedestrianLineStyle = lineStyler([\n  ['rgb(96, 186, 219)', 6],\n  ['rgb(173, 216, 230)', 3],\n]);\n\nconst pedestrianLineHoveredStyle = lineStyler([\n  ['rgb(96, 186, 219)', 7],\n  ['rgb(173, 216, 230)', 4],\n]);\n\nconst carLineStyle = lineStyler([\n  ['grey', 6],\n  ['darkgrey', 3],\n]);\n\nconst carLineHoveredStyle = lineStyler([\n  ['grey', 7],\n  ['darkgrey', 4],\n]);\n\nconst othersLineStyle = lineStyler([\n  ['darkblue', 6],\n  ['blue', 3],\n]);\n\nconst othersLineHoveredStyle = lineStyler([\n  ['darkblue', 7],\n  ['blue', 4],\n]);\n\nconst railPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'red' }),\n    stroke: new Stroke({ color: 'darkred', width: 2 }),\n  }),\n});\n\nconst pedestrianPointStyle = new Style({\n  image: new Circle({\n    radius: 3,\n    fill: new Fill({ color: 'rgb(173, 216, 230)' }),\n    stroke: new Stroke({ color: 'rgb(96, 186, 219)', width: 2 }),\n  }),\n});\n\nconst carPointStyle = new Style({\n  image: new Circle({\n    radius: 3,\n    fill: new Fill({ color: 'darkgrey' }),\n    stroke: new Stroke({ color: 'grey', width: 2 }),\n  }),\n});\n\nconst busPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'yellow' }),\n    stroke: new Stroke({ color: 'rgb(153,153,0)', width: 2 }),\n  }),\n});\n\nconst othersPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'blue' }),\n    stroke: new Stroke({ color: 'darkblue', width: 2 }),\n  }),\n});\n\nconst pointStyleFunction = mot => {\n  if (mot === 'rail') {\n    return railPointStyle;\n  }\n  if (mot === 'bus') {\n    return busPointStyle;\n  }\n  if (mot === 'foot') {\n    return pedestrianPointStyle;\n  }\n  if (mot === 'car') {\n    return carPointStyle;\n  }\n  return othersPointStyle;\n};\n\nconst lineStyleFunction = (mot, isHovered) => {\n  if (mot === 'rail') {\n    return isHovered ? railLineHoveredStyle : railLineStyle;\n  }\n  if (mot === 'bus') {\n    return isHovered ? busLineHoveredStyle : busLineStyle;\n  }\n  if (mot === 'foot') {\n    return isHovered ? pedestrianLineHoveredStyle : pedestrianLineStyle;\n  }\n  if (mot === 'car') {\n    return isHovered ? carLineHoveredStyle : carLineStyle;\n  }\n  return isHovered ? othersLineHoveredStyle : othersLineStyle;\n};\n\nexport { lineStyleFunction, pointStyleFunction };\n","import React, { Component, createRef } from 'react';\nimport { connect } from 'react-redux';\nimport ConfigReader from 'react-spatial/ConfigReader';\nimport LayerService from 'react-spatial/LayerService';\nimport Layer from 'react-spatial/layers/Layer';\nimport BasicMap from 'react-spatial/components/BasicMap';\nimport { Map, Feature } from 'ol';\nimport { Vector as VectorLayer } from 'ol/layer';\nimport _ from 'lodash/core';\nimport { Point } from 'ol/geom';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { Vector as VectorSource } from 'ol/source';\nimport {\n  defaults as defaultInteractions,\n  Translate,\n  Modify,\n} from 'ol/interaction';\nimport PropTypes from 'prop-types';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport RoutingMenu from '../RoutingMenu';\nimport RouteInfosDialog from '../RouteInfosDialog';\nimport {\n  lineStyleFunction,\n  pointStyleFunction,\n} from '../../config/styleConfig';\nimport {\n  propTypeCoordinates,\n  propTypeCurrentStops,\n  propTypeCurrentStopsGeoJSON,\n} from '../../store/prop-types';\nimport { GRAPHHOPPER_MOTS } from '../../constants';\nimport { to4326 } from '../../utils';\nimport './MapComponent.scss';\nimport * as actions from '../../store/actions';\n\n/**\n * The map props\n * @typedef MapComponentProps\n * @type {props}\n * @property {string} APIKey key obtained from geOps that enables you to used the previous API services.\n * @property {string} routingUrl The API routing url to be used for navigation.\n * @property {string} currentMot The current selected mot by user, example 'bus'.\n * @property {Object} currentStopsGeoJSON The current stops defined by user in geojson format inside a dictionary, key is the stop index(order) and the value is the geoJSON itself.\n * @property {function} onShowNotification A store action that can be dispatched, takes the notification message and type as arguments.\n * @property {function} onSetClickLocation A store action that can be dispatched, takes the clicked location on map array of [long,lat] and stores it in the store.\n * @category Props\n */\n\nlet abortController = new AbortController();\nconst zoom = 6;\n\n/**\n * The only true map that shows inside the application.\n * @category Map\n */\nclass MapComponent extends Component {\n  static getExtentCenter = extent => {\n    const X = extent[0] + (extent[2] - extent[0]) / 2;\n    const Y = extent[1] + (extent[3] - extent[1]) / 2;\n    return [X, Y];\n  };\n\n  static indexInGeom = (lineGeom, point) => {\n    const firstBreakIdx = lineGeom.indexOf(point[0]);\n    const secondBreakIdx = lineGeom.indexOf(point[1]);\n\n    return firstBreakIdx === secondBreakIdx - 1;\n  };\n\n  /**\n   * Default constructor, gets called automatically upon initialization.\n   * @param {...MapComponentProps} props Props received so that the component can function properly.\n   * @category Map\n   */\n  constructor(props) {\n    super(props);\n    const { APIKey, onSetClickLocation, olMap } = this.props;\n    this.map = olMap;\n    this.mapRef = createRef();\n    this.hoveredFeature = null;\n    this.hoveredRoute = null;\n    this.initialRouteDrag = null;\n    this.state = {\n      hoveredStationOpen: false,\n      hoveredStationName: '',\n      isActiveRoute: false,\n      hoveredPoint: null,\n    };\n\n    this.onHighlightPoint = this.onHighlightPoint.bind(this);\n\n    this.projection = 'EPSG:3857';\n\n    const layerService = new LayerService(\n      ConfigReader.readConfig([\n        {\n          name: 'Basemap',\n          visible: true,\n          isBaseLayer: true,\n          data: {\n            type: 'mapbox',\n            url: `https://maps.geops.io/styles/travic/style.json?key=${APIKey}`,\n          },\n        },\n      ]),\n    );\n\n    // Define route vectorLayer.\n    this.routeVectorSource = new VectorSource({\n      features: [],\n    });\n    layerService.addLayer(\n      new Layer({\n        key: 'routeLayer',\n        name: 'routeLayer',\n        olLayer: new VectorLayer({\n          zIndex: 1,\n          source: this.routeVectorSource,\n        }),\n      }),\n    );\n\n    // Define highlight vectorLayer.\n    this.highlightVectorSource = new VectorSource({});\n    layerService.addLayer(\n      new Layer({\n        key: 'highlightLayer',\n        name: 'highlightLayer',\n        olLayer: new VectorLayer({\n          zIndex: 1,\n          source: this.highlightVectorSource,\n        }),\n      }),\n    );\n\n    // Define stop vectorLayer.\n    this.markerVectorSource = new VectorSource({});\n    layerService.addLayer(\n      new Layer({\n        key: 'markerLayer',\n        name: 'markerLayer',\n        olLayer: new VectorLayer({\n          zIndex: 1,\n          source: this.markerVectorSource,\n        }),\n      }),\n    );\n\n    this.markerVectorLayer = layerService.getLayer('markerLayer');\n    this.routeVectorLayer = layerService.getLayer('routeLayer');\n    this.layers = [...layerService.getLayers()];\n\n    const translate = new Translate({\n      layers: [this.markerVectorLayer.olLayer],\n      hitTolerance: 3,\n    });\n\n    translate.on('translateend', evt => {\n      const {\n        tracks,\n        onSetTracks,\n        currentStops,\n        currentStopsGeoJSON,\n        onSetCurrentStops,\n        onSetCurrentStopsGeoJSON,\n      } = this.props;\n      const newTracks = _.clone(tracks);\n      const newCurrentStops = _.clone(currentStops);\n      const newCurentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n\n      const { name, id } = evt.features.getArray()[0].getProperties();\n      let featureIndex;\n      if (name) {\n        featureIndex = currentStops.indexOf(name);\n      } else {\n        const isCoordPresent = el => {\n          if (!Array.isArray(el)) {\n            return false;\n          }\n          const coords = id.slice().reverse();\n          return el[0] === coords[0] && el[1] === coords[1];\n        };\n        featureIndex = currentStops.findIndex(isCoordPresent);\n      }\n      if (featureIndex === -1) {\n        return;\n      }\n      newTracks[featureIndex] = '';\n      newCurrentStops[featureIndex] = evt.coordinate;\n      newCurentStopsGeoJSON[featureIndex] = {\n        type: 'FeatureCollection',\n        features: [\n          {\n            type: 'Feature',\n            properties: {\n              id: evt.coordinate.slice().reverse(),\n              type: 'coordinates',\n            },\n            geometry: {\n              type: 'Point',\n              coordinates: evt.coordinate,\n            },\n          },\n        ],\n      };\n      onSetTracks(newTracks);\n      onSetCurrentStops(newCurrentStops);\n      onSetCurrentStopsGeoJSON(newCurentStopsGeoJSON);\n    });\n\n    const modify = new Modify({\n      source: this.routeVectorSource,\n      pixelTolerance: 4,\n      condition: () => {\n        const { currentMot } = this.props;\n        return !GRAPHHOPPER_MOTS.includes(currentMot);\n      },\n      style: () => {\n        const { currentMot } = this.props;\n        return pointStyleFunction(currentMot);\n      },\n    });\n\n    modify.on('modifystart', evt => {\n      // save start point to find where to add the new HOP!\n      this.initialRouteDrag = {\n        features: evt.features.getArray(),\n        coordinate: evt.mapBrowserEvent.coordinate,\n      };\n    });\n\n    modify.on('modifyend', evt => {\n      const { features } = this.initialRouteDrag;\n      const {\n        tracks,\n        currentMot,\n        currentStops,\n        currentStopsGeoJSON,\n        onSetTracks,\n        onSetCurrentStops,\n        onSetCurrentStopsGeoJSON,\n      } = this.props;\n      const newTracks = [...tracks];\n      const updatedCurrentStops = _.clone(currentStops);\n      const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n      let newHopIdx = -1;\n\n      // No drag for foot/car for now on.\n      if (!GRAPHHOPPER_MOTS.includes(currentMot)) {\n        const flatCoords = features\n          .map(f => f.getGeometry())\n          .map(lineString => {\n            return [\n              ...lineString.getFirstCoordinate(),\n              ...lineString.getLastCoordinate(),\n            ];\n          });\n\n        const closestSegment = this.routeVectorSource\n          .getClosestFeatureToCoordinate(this.initialRouteDrag.coordinate)\n          .getGeometry();\n\n        const closestEdges = [\n          ...closestSegment.getFirstCoordinate(),\n          ...closestSegment.getLastCoordinate(),\n        ];\n\n        flatCoords.forEach((segment, idx) => {\n          if (\n            segment.length === closestEdges.length &&\n            segment.every((value, index) => {\n              return value === closestEdges[index];\n            })\n          ) {\n            newHopIdx = idx + 1;\n          }\n        });\n      }\n\n      if (newHopIdx >= 0) {\n        updatedCurrentStops.splice(\n          newHopIdx,\n          0,\n          evt.mapBrowserEvent.coordinate,\n        );\n\n        newTracks.splice(newHopIdx, 0, '');\n\n        if (updatedCurrentStopsGeoJSON[newHopIdx]) {\n          const keys = Object.keys(updatedCurrentStopsGeoJSON).reverse();\n          keys.forEach(k => {\n            if (parseInt(k, 10) >= newHopIdx) {\n              updatedCurrentStopsGeoJSON[`${parseInt(k, 10) + 1}`] =\n                updatedCurrentStopsGeoJSON[k];\n            }\n            if (parseInt(k, 10) === newHopIdx) {\n              updatedCurrentStopsGeoJSON[newHopIdx] = {\n                type: 'FeatureCollection',\n                features: [\n                  {\n                    type: 'Feature',\n                    properties: {\n                      id: evt.mapBrowserEvent.coordinate.slice().reverse(),\n                      type: 'coordinates',\n                    },\n                    geometry: {\n                      type: 'Point',\n                      coordinates: evt.mapBrowserEvent.coordinate,\n                    },\n                  },\n                ],\n              };\n            }\n          });\n        }\n        onSetTracks(newTracks);\n        onSetCurrentStops(updatedCurrentStops);\n        onSetCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON);\n      }\n      this.initialRouteDrag = null;\n    });\n\n    const interactions = defaultInteractions().extend([translate, modify]);\n    interactions.getArray().forEach(interaction => {\n      this.map.addInteraction(interaction);\n    });\n\n    this.onZoomRouteClick = () => {\n      let featExtent;\n      if (this.routeVectorSource.getFeatures().length) {\n        featExtent = this.routeVectorSource.getExtent();\n      }\n\n      if (featExtent.filter(f => Number.isFinite(f)).length === 4) {\n        this.map.getView().fit(this.routeVectorSource.getExtent(), {\n          size: this.map.getSize(),\n          duration: 500,\n          padding: [200, 200, 200, 200],\n        });\n      }\n    };\n\n    this.onPanViaClick = (item, idx) => {\n      const { currentStopsGeoJSON } = this.props;\n      if (currentStopsGeoJSON && currentStopsGeoJSON[idx]) {\n        const featureCoord = currentStopsGeoJSON[idx].features\n          ? currentStopsGeoJSON[idx].features[0].geometry.coordinates\n          : currentStopsGeoJSON[idx].geometry.coordinates;\n\n        this.map.getView().animate({\n          center: featureCoord,\n          duration: 500,\n          padding: [100, 100, 100, 100],\n        });\n      }\n    };\n\n    this.map.on('singleclick', evt => {\n      const { isFieldFocused, currentStops } = this.props;\n      // if one field empty or if a field is focused\n      if (currentStops.includes('') || isFieldFocused) {\n        onSetClickLocation(evt.coordinate);\n      }\n    });\n    this.map.on('pointermove', evt => {\n      const { currentMot } = this.props;\n\n      if (this.hoveredFeature) {\n        this.hoveredFeature = null;\n        this.setState({ hoveredStationOpen: false, hoveredStationName: '' });\n      }\n\n      if (this.hoveredRoute) {\n        this.routeVectorLayer.olLayer.setStyle(\n          lineStyleFunction(currentMot, false),\n        );\n        this.hoveredRoute = null;\n        this.setState({\n          hoveredPoint: null,\n        });\n      }\n      const hovFeats = this.map.getFeaturesAtPixel(evt.pixel, {\n        hitTolerance: 2,\n      });\n\n      hovFeats.forEach(feature => {\n        if (feature.getGeometry().getType() === 'Point') {\n          this.hoveredFeature = feature;\n          let name = '';\n          const featCountryCode = feature.get('country_code');\n          if (feature.get('name')) {\n            name = `${feature.get('name')}${\n              featCountryCode ? ` - ${featCountryCode}` : ''\n            }`;\n          } else {\n            name = `${to4326(feature.getGeometry().flatCoordinates)}`;\n          }\n          this.setState({\n            hoveredStationOpen: true,\n            hoveredStationName: name,\n          });\n        }\n        if (feature.getGeometry().getType() === 'LineString') {\n          this.hoveredRoute = feature;\n\n          this.setState({\n            hoveredPoint: evt.coordinate,\n          });\n        }\n        return true;\n      });\n    });\n  }\n\n  /**\n   * Perform the necessary actions when receiving updated props.\n   * If new stops are received, then remove any existing stops/routes and draw those stops/routes.\n   * @category Map\n   */\n  componentDidUpdate(prevProps) {\n    const { currentStopsGeoJSON, currentMot, tracks } = this.props;\n    const currentMotChanged = currentMot && currentMot !== prevProps.currentMot;\n    const tracksChanged = tracks !== prevProps.tracks;\n    const currentStopsGeoJSONChanged =\n      currentStopsGeoJSON &&\n      currentStopsGeoJSON !== prevProps.currentStopsGeoJSON;\n    if (currentMotChanged || currentStopsGeoJSONChanged || tracksChanged) {\n      this.markerVectorSource.clear();\n      Object.keys(currentStopsGeoJSON).forEach(key => {\n        this.markerVectorSource.addFeatures(\n          new GeoJSON().readFeatures(currentStopsGeoJSON[key]),\n        );\n        this.markerVectorSource\n          .getFeatures()\n          .forEach(f => f.setStyle(pointStyleFunction(currentMot)));\n      });\n      // Remove the old route if exists\n      this.routeVectorSource.clear();\n      this.setIsActiveRoute(false);\n\n      // Draw a new route if more than 1 stop is defined\n      if (Object.keys(currentStopsGeoJSON).length > 1) {\n        this.drawNewRoute();\n      }\n    }\n  }\n\n  onMapMoved = evt => {\n    const { center, onSetCenter } = this.props;\n    const newCenter = evt.map.getView().getCenter();\n    if (center[0] !== newCenter[0] || center[1] !== newCenter[1]) {\n      onSetCenter(newCenter);\n    }\n  };\n\n  /*\n   *  Highlight a point on the route.\n   */\n  onHighlightPoint(coords) {\n    const { currentMot } = this.props;\n\n    this.highlightVectorSource.clear();\n    const feat = new Feature({\n      geometry: new Point(coords),\n    });\n    feat.setStyle(pointStyleFunction(currentMot));\n    this.highlightVectorSource.addFeatures([feat]);\n  }\n\n  onFeaturesHover(features) {\n    if (this.mapRef) {\n      this.mapRef.current.node.current.style.cursor = features.length\n        ? 'pointer'\n        : 'inherit';\n    }\n  }\n\n  setIsActiveRoute(isActiveRoute) {\n    this.setState({ isActiveRoute });\n  }\n\n  /**\n   * After receiving the updated stops, send a call to the routingAPI to find a suitable route between\n   * two points/stations, if a route is found, it's returned and drawn to the map.\n   * @category Map\n   */\n  drawNewRoute = useElevation => {\n    const hops = [];\n    const {\n      currentStopsGeoJSON,\n      routingUrl,\n      currentMot,\n      APIKey,\n      resolveHops,\n      onShowNotification,\n      onSetShowLoadingBar,\n      onSetSelectedRoutes,\n      tracks,\n      isRouteInfoOpen,\n    } = this.props;\n\n    onSetShowLoadingBar(true);\n\n    Object.keys(currentStopsGeoJSON).forEach((key, idx) => {\n      if (currentStopsGeoJSON[key].features) {\n        // If the current item is a point selected on the map, not a station.\n        hops.push(\n          `${to4326(currentStopsGeoJSON[key].features[0].geometry.coordinates)\n            .slice()\n            .reverse()}`,\n        );\n      } else if (!GRAPHHOPPER_MOTS.includes(currentMot)) {\n        hops.push(\n          `!${currentStopsGeoJSON[key].properties.uid}${\n            tracks[idx] !== null\n              ? `${tracks[idx] ? `$${tracks[idx]}` : ''}`\n              : ''\n          }`,\n        );\n      } else {\n        hops.push(`${currentStopsGeoJSON[key].properties.name}`);\n      }\n    });\n\n    abortController.abort();\n    abortController = new AbortController();\n    const { signal } = abortController;\n\n    const calculateElevation = !!(isRouteInfoOpen || useElevation);\n    const reqUrl =\n      `${routingUrl}?via=${hops.join(\n        '|',\n      )}&mot=${currentMot}&resolve-hops=${resolveHops}&key=${APIKey}` +\n      `&elevation=${calculateElevation ? 1 : 0}` +\n      `&interpolate_elevation=${calculateElevation}` +\n      `&length=true&coord-radius=100.0&coord-punish=1000.0`;\n\n    return fetch(reqUrl, { signal })\n      .then(response => response.json())\n      .then(response => {\n        onSetShowLoadingBar(false);\n        if (response.error) {\n          onShowNotification(\"Couldn't find route\", 'error');\n          onSetSelectedRoutes([]);\n          return;\n        }\n        // A route was found, prepare to draw it.\n        this.routeVectorSource.clear();\n        const format = new GeoJSON({\n          dataProjection: 'EPSG:4326',\n          featureProjection: 'EPSG:3857',\n        });\n        this.routeVectorSource.addFeatures(format.readFeatures(response));\n        this.setIsActiveRoute(!!this.routeVectorSource.getFeatures().length);\n        onSetSelectedRoutes(this.routeVectorSource.getFeatures());\n        this.routeVectorLayer.olLayer.setStyle(\n          lineStyleFunction(currentMot, false),\n        );\n      })\n      .catch(err => {\n        if (err.name === 'AbortError') {\n          // eslint-disable-next-line no-console\n          console.warn(`Abort ${reqUrl}`);\n          return;\n        }\n        onSetShowLoadingBar(false);\n        onSetSelectedRoutes([]);\n        // It's important to rethrow all other errors so you don't silence them!\n        // For example, any error thrown by setState(), will pass through here.\n        throw err;\n      });\n  };\n\n  /**\n   * Render the map component to the dom\n   * @category Map\n   */\n  render() {\n    const {\n      center,\n      mots,\n      APIKey,\n      selectedRoutes,\n      isRouteInfoOpen,\n      stationSearchUrl,\n    } = this.props;\n\n    const {\n      isActiveRoute,\n      hoveredPoint,\n      hoveredStationOpen,\n      hoveredStationName,\n    } = this.state;\n\n    return (\n      <>\n        <RoutingMenu\n          mots={mots}\n          stationSearchUrl={stationSearchUrl}\n          isActiveRoute={isActiveRoute}\n          onZoomRouteClick={this.onZoomRouteClick}\n          onPanViaClick={this.onPanViaClick}\n          onDrawNewRoute={this.drawNewRoute}\n          APIKey={APIKey}\n        />\n        <Snackbar\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          open={hoveredStationOpen}\n          message={hoveredStationName}\n        />\n        <BasicMap\n          ref={this.mapRef}\n          center={center}\n          layers={this.layers}\n          onMapMoved={evt => this.onMapMoved(evt)}\n          onFeaturesHover={evt => this.onFeaturesHover(evt)}\n          zoom={zoom}\n          tabIndex={null}\n          map={this.map}\n          viewOptions={{\n            projection: this.projection,\n          }}\n        />\n        {isRouteInfoOpen && selectedRoutes.length ? (\n          <RouteInfosDialog\n            routes={selectedRoutes}\n            hoveredCoords={hoveredPoint}\n            onHighlightPoint={this.onHighlightPoint}\n            clearHighlightPoint={() => {\n              this.highlightVectorSource.clear();\n            }}\n          />\n        ) : null}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    center: state.MapReducer.center,\n    selectedRoutes: state.MapReducer.selectedRoutes,\n    isRouteInfoOpen: state.MapReducer.isRouteInfoOpen,\n    currentMot: state.MapReducer.currentMot,\n    currentStops: state.MapReducer.currentStops,\n    currentStopsGeoJSON: state.MapReducer.currentStopsGeoJSON,\n    isFieldFocused: state.MapReducer.isFieldFocused,\n    resolveHops: state.MapReducer.resolveHops,\n    olMap: state.MapReducer.olMap,\n    tracks: state.MapReducer.tracks,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetCenter: center => dispatch(actions.setCenter(center)),\n    onSetTracks: tracks => dispatch(actions.setTracks(tracks)),\n    onSetCurrentStops: currentStops =>\n      dispatch(actions.setCurrentStops(currentStops)),\n    onSetCurrentStopsGeoJSON: currentStopsGeoJSON =>\n      dispatch(actions.setCurrentStopsGeoJSON(currentStopsGeoJSON)),\n    onSetClickLocation: clickLocation =>\n      dispatch(actions.setClickLocation(clickLocation)),\n    onShowNotification: (notificationMessage, notificationType) =>\n      dispatch(actions.showNotification(notificationMessage, notificationType)),\n    onSetShowLoadingBar: showLoadingBar =>\n      dispatch(actions.setShowLoadingBar(showLoadingBar)),\n    onSetSelectedRoutes: selectedRoutes =>\n      dispatch(actions.setSelectedRoutes(selectedRoutes)),\n  };\n};\n\nMapComponent.defaultProps = {\n  center: [47.99822, 7.84049],\n};\n\nMapComponent.propTypes = {\n  center: propTypeCoordinates,\n  selectedRoutes: PropTypes.arrayOf(PropTypes.instanceOf(Feature)).isRequired,\n  isRouteInfoOpen: PropTypes.bool.isRequired,\n  mots: PropTypes.arrayOf(PropTypes.string).isRequired,\n  APIKey: PropTypes.string.isRequired,\n  stationSearchUrl: PropTypes.string.isRequired,\n  onSetCenter: PropTypes.func.isRequired,\n  onSetTracks: PropTypes.func.isRequired,\n  onSetClickLocation: PropTypes.func.isRequired,\n  onShowNotification: PropTypes.func.isRequired,\n  onSetShowLoadingBar: PropTypes.func.isRequired,\n  onSetSelectedRoutes: PropTypes.func.isRequired,\n  onSetCurrentStops: PropTypes.func.isRequired,\n  onSetCurrentStopsGeoJSON: PropTypes.func.isRequired,\n  currentStops: propTypeCurrentStops.isRequired,\n  currentStopsGeoJSON: propTypeCurrentStopsGeoJSON.isRequired,\n  isFieldFocused: PropTypes.bool.isRequired,\n  routingUrl: PropTypes.string.isRequired,\n  currentMot: PropTypes.string.isRequired,\n  resolveHops: PropTypes.bool.isRequired,\n  tracks: PropTypes.arrayOf(PropTypes.string).isRequired,\n  olMap: PropTypes.instanceOf(Map).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MapComponent);\n","import MapComponent from './MapComponent';\n\nexport default MapComponent;\n","/* eslint-disable no-restricted-globals */\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport RSPermalink from 'react-spatial/components/Permalink';\nimport qs from 'query-string';\nimport { to4326, to3857 } from '../../utils';\nimport {\n  setCurrentStops,\n  setCurrentStopsGeoJSON,\n  setCurrentMot,\n  setCenter,\n  setResolveHops,\n  setTracks,\n} from '../../store/actions/Map';\n\nconst abortController = new AbortController();\nconst { signal } = abortController;\n\nconst validateUrlCoordinates = coordArray => {\n  /* Check if the x and y values are xy-coordinates */\n  if (\n    isFinite(coordArray[1]) &&\n    Math.abs(coordArray[1]) <= 90 &&\n    isFinite(coordArray[0]) &&\n    Math.abs(coordArray[0]) <= 180\n  ) {\n    return true;\n  }\n  return false;\n};\n\nconst getGeoJson = (viaString, APIKey, stationSearchUrl) => {\n  /* When the via is a pair of coordinates */\n  if (viaString.split(',').length > 1) {\n    let geoJson;\n    const coordArray = viaString\n      .split(',')\n      .filter(val => !isNaN(val))\n      .map(string => parseFloat(string));\n    if (coordArray.length === 2 && validateUrlCoordinates(coordArray)) {\n      /* Convert coordinates to 3857 */\n      const coords3857 = to3857(coordArray);\n      geoJson = {\n        type: 'FeatureCollection',\n        features: [\n          {\n            type: 'Feature',\n            properties: {\n              id: coords3857,\n              type: 'coordinates',\n            },\n            geometry: {\n              type: 'Point',\n              coordinates: coords3857,\n            },\n          },\n        ],\n      };\n    }\n    return Promise.resolve(geoJson);\n  }\n  let reqUrl;\n\n  /* When the via is a UID */\n  if (/^![a-zA-Z0-9]{16}$/.test(viaString)) {\n    reqUrl = `${stationSearchUrl}lookup/${viaString.replace(\n      '!',\n      '',\n    )}/?key=${APIKey}`;\n  } else {\n    /* search for the station. Remove ! in case it's an IBNR */\n    reqUrl = `${stationSearchUrl}?q=${viaString.replace(\n      '!',\n      '',\n    )}&key=${APIKey}`;\n  }\n\n  return fetch(reqUrl, { signal })\n    .then(response => response.json())\n    .then(response => {\n      /* Convert coordinates to 3857 */\n      const feature = response.features[0];\n      feature.geometry.coordinates = to3857(\n        response.features[0].geometry.coordinates,\n      );\n      return feature;\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.error('Failed to fetch geoJson');\n      return null;\n    });\n};\n\nconst compileViaString = (currentStopsGeoJson, tracks) => {\n  if (!currentStopsGeoJson || Object.keys(currentStopsGeoJson).length < 2) {\n    return null;\n  }\n\n  const uidStrings = Object.keys(currentStopsGeoJson).map((key, idx) => {\n    if (currentStopsGeoJson[key].features) {\n      return `${to4326(\n        currentStopsGeoJson[key].features[0].geometry.coordinates,\n      )}`;\n    }\n    return `!${currentStopsGeoJson[key].properties.uid}${\n      tracks[idx] ? `$${tracks[idx]}` : ''\n    }`;\n  });\n  return uidStrings.join('|');\n};\n\nfunction Permalink({ mots, APIKey, stationSearchUrl }) {\n  const dispatch = useDispatch();\n  const urlSearch = qs.parse(window.location.search);\n  const center = useSelector(state => state.MapReducer.center);\n  const tracks = useSelector(state => state.MapReducer.tracks);\n  const appState = useSelector(state => state.MapReducer);\n  const currentMot = useSelector(state => state.MapReducer.currentMot);\n  const currentStops = useSelector(state => state.MapReducer.currentStops);\n  const currentStopsGeoJSON = useSelector(\n    state => state.MapReducer.currentStopsGeoJSON,\n  );\n  const resolveHops = useSelector(state => state.MapReducer.resolveHops);\n  const map = appState.olMap;\n  const [params, setParams] = useState({});\n\n  /* Configure app on load using url params */\n  useEffect(() => {\n    const newParams = {};\n    if (urlSearch) {\n      if (urlSearch.z && !isNaN(parseFloat(urlSearch.z))) {\n        // Set zoom if defined\n        map.getView().setZoom(urlSearch.z);\n      }\n      if (\n        urlSearch.x &&\n        !isNaN(parseFloat(urlSearch.x)) &&\n        urlSearch.y &&\n        !isNaN(parseFloat(urlSearch.y))\n      ) {\n        // Set center if defined\n        dispatch(setCenter([parseFloat(urlSearch.x), parseFloat(urlSearch.y)]));\n      }\n\n      if (urlSearch.mot) {\n        // Set current mot if defined\n        const newMot = mots.find(mot => mot === urlSearch.mot) || mots[0];\n        newParams.mot = newMot;\n        dispatch(setCurrentMot(newMot));\n      }\n\n      if (urlSearch.via) {\n        // Set via stations if defined\n        newParams.via = urlSearch.via;\n        const viaArray = urlSearch.via.split('|');\n        const geoJsonArray = viaArray.map(viaString =>\n          getGeoJson(viaString.split('$')[0], APIKey, stationSearchUrl),\n        );\n        dispatch(\n          setTracks(\n            viaArray.map(stop => {\n              const track = stop.split('$')[1];\n              return track || '';\n            }),\n          ),\n        );\n\n        Promise.all(geoJsonArray).then(values => {\n          dispatch(\n            setCurrentStops(\n              values.map(stop => {\n                if (!stop) {\n                  return '';\n                }\n                if (stop.type === 'FeatureCollection') {\n                  return stop.features[0].geometry.coordinates;\n                }\n                return stop.properties.name;\n              }),\n            ),\n          );\n          const geoJsonObject = {};\n          values\n            .filter(stop => !!stop)\n            // eslint-disable-next-line no-return-assign\n            .forEach((stop, idx) => (geoJsonObject[`${idx}`] = stop));\n          dispatch(setCurrentStopsGeoJSON(geoJsonObject));\n        });\n      }\n\n      if (urlSearch['resolve-hops']) {\n        dispatch(setResolveHops(urlSearch['resolve-hops'] === 'true'));\n      }\n    }\n    setParams(newParams);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /* Update url params on app update */\n  useEffect(() => {\n    const newParams = {};\n    newParams.z = map.getView().getZoom();\n    [newParams.x] = center;\n    [, newParams.y] = center;\n    newParams.mot = currentMot;\n    newParams['resolve-hops'] = resolveHops;\n    if (Object.keys(currentStopsGeoJSON).length !== 0) {\n      newParams.via = compileViaString(currentStopsGeoJSON, tracks);\n    }\n    setParams(newParams);\n  }, [\n    currentMot,\n    currentStops,\n    currentStopsGeoJSON,\n    center,\n    resolveHops,\n    map,\n    tracks,\n  ]);\n\n  return <RSPermalink map={map} params={params} />;\n}\n\nPermalink.propTypes = {\n  mots: PropTypes.arrayOf(PropTypes.string).isRequired,\n  APIKey: PropTypes.string.isRequired,\n  stationSearchUrl: PropTypes.string.isRequired,\n};\n\nexport default Permalink;\n","import Permalink from './Permalink';\n\nexport default Permalink;\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { connect } from 'react-redux';\nimport Alert from '@material-ui/lab/Alert';\nimport PropTypes from 'prop-types';\nimport { showNotification } from '../../store/actions';\n\n/**\n * The notification handler props\n * @typedef NotificationHandlerProps\n * @type {props}\n * @property {string} notificationMessage Obtained from the store, the message to be displayed. Can be any valid string.\n * @property {string} notificationType Obtained from the store, the message type (error, success, info, etc...)\n * @category Props\n */\n\n/**\n * Handles all application notification shown to the user\n * @category NotificationHandler\n */\nclass NotificationHandler extends React.Component {\n  /**\n   * Default constructor. visibility is set to false by default. Controlled through state property \"open\"\n   * @param {...NotificationHandlerProps} props Props received so that the component can function properly.\n   * @category NotificationHandler\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n    };\n  }\n\n  /**\n   * If a new notification message is received, show it accordingly.\n   * @category NotificationHandler\n   */\n  componentDidUpdate(prevProps) {\n    const { notificationMessage } = this.props;\n    if (\n      notificationMessage &&\n      notificationMessage !== prevProps.notificationMessage\n    ) {\n      this.handleOpen();\n    }\n  }\n\n  /**\n   * Show the notification to the view.\n   * @category NotificationHandler\n   */\n  handleOpen = () => {\n    this.setState({\n      open: true,\n    });\n  };\n\n  /**\n   * Hide the notification from the view.\n   * @category NotificationHandler\n   */\n  handleClose = () => {\n    const { onShowNotification } = this.props;\n    this.setState({\n      open: false,\n    });\n    onShowNotification(null, 'error');\n  };\n\n  /**\n   * Render the notification to the dom.\n   * @category NotificationHandler\n   */\n  render() {\n    const { notificationMessage, notificationType } = this.props;\n    const { open } = this.state;\n    return (\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        open={open}\n        autoHideDuration={6000}\n        onClose={this.handleClose}\n      >\n        <Alert\n          onClose={this.handleClose}\n          severity={notificationType}\n          elevation={6}\n          variant=\"filled\"\n        >\n          {notificationMessage}\n        </Alert>\n      </Snackbar>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onShowNotification: (notificationMessage, notificationType) =>\n      dispatch(showNotification(notificationMessage, notificationType)),\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    notificationMessage: state.MapReducer.notificationMessage,\n    notificationType: state.MapReducer.notificationType,\n  };\n};\n\nNotificationHandler.propTypes = {\n  onShowNotification: PropTypes.func.isRequired,\n  notificationMessage: PropTypes.string.isRequired,\n  notificationType: PropTypes.string.isRequired,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(NotificationHandler);\n","import NotificationHandler from './NotificationHandler';\n\nexport default NotificationHandler;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport store from '../../store/store';\nimport MapComponent from '../MapComponent';\nimport Permalink from '../Permalink';\nimport NotificationHandler from '../NotificationHandler';\nimport { VALID_MOTS } from '../../constants';\n\nconst propTypes = {\n  routingUrl: PropTypes.string,\n  stationSearchUrl: PropTypes.string,\n  mots: PropTypes.arrayOf(PropTypes.string),\n};\n\nconst defaultProps = {\n  mots: VALID_MOTS,\n  routingUrl: 'https://api.geops.io/routing/v1/',\n  stationSearchUrl: 'https://api.geops.io/stops/v1/',\n};\n\n/**\n * Root component of the application that holds all other sub-components.\n * @param {string[]} mots List of mots to be available (ex: ['bus', 'train'])\n * @param {string} routingUrl The API routing url to be used for navigation.\n * @param {string} stationSearchUrl The API station search URL to be used for searching for stations.\n */\nfunction App(props) {\n  const { mots, routingUrl, stationSearchUrl } = props;\n  const apiKey = process.env.REACT_APP_API_KEY;\n\n  return (\n    <Provider store={store}>\n      <Permalink\n        mots={mots}\n        APIKey={apiKey}\n        stationSearchUrl={stationSearchUrl}\n      />\n      <MapComponent\n        mots={mots}\n        routingUrl={routingUrl}\n        APIKey={apiKey}\n        stationSearchUrl={stationSearchUrl}\n      />\n      <NotificationHandler />\n    </Provider>\n  );\n}\n\nApp.propTypes = propTypes;\nApp.defaultProps = defaultProps;\n\nexport default App;\n","import App from './App';\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              // eslint-disable-next-line no-console\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // eslint-disable-next-line no-console\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      // eslint-disable-next-line no-console\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport default function register() {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import polyfills for ie 11\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}