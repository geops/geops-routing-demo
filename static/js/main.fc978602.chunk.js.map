{"version":3,"sources":["store/reducers/Map.jsx","store/actions/actionTypes.js","store/store.js","store/actions/Map.jsx","constants.js","utils.jsx","Components/SearchResults/SearchResults.jsx","Components/SearchResults/index.js","store/prop-types.js","Components/SearchField/SearchField.jsx","Components/SearchField/index.js","Components/RoutingMenu/RoutingMenu.jsx","Components/RoutingMenu/index.js","Components/RouteInfosDialog/RouteInfosDialog.jsx","Components/RouteInfosDialog/index.js","config/styleConfig.js","Components/MapComponent/MapComponent.jsx","Components/MapComponent/index.js","Components/Permalink/Permalink.jsx","Components/Permalink/index.js","Components/NotificationHandler/NotificationHandler.jsx","Components/NotificationHandler/index.js","Components/App/App.jsx","Components/App/index.js","serviceWorker.js","index.js"],"names":["initialState","center","currentMot","currentStops","currentStopsGeoJSON","clickLocation","notificationMessage","notificationType","isFieldFocused","showLoadingBar","selectedRoutes","isRouteInfoOpen","dialogPosition","x","y","olMap","Map","controls","routingElevation","resolveHops","setCenter","state","action","updatedState","setCurrentStops","setCurrentStopsGeoJSON","setCurrentMot","setClickLocation","showNotification","setIsFieldFocused","setShowLoadingBar","setSelectedRoutes","setIsRouteInfoOpen","setDialogPosition","setRoutingElevation","setResolveHops","reducer","type","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","MapReducer","store","createStore","applyMiddleware","thunk","DEFAULT_MOTS","OTHER_MOTS","VALID_MOTS","GRAPHHOPPER_MOTS","findMotIcon","name","result","capitalName","charAt","toUpperCase","slice","title","to4326","coord","decimal","transform","map","c","toFixed","to3857","renderSecondary","id","code","countryCode","ifopt","display","push","filter","l","join","SearchResults","props","currentSearchResults","processClickedResultHandler","useSelector","useState","maxHeight","setMaxHeight","ListRef","useRef","updateMenuHeight","useCallback","newMaxheight","current","getTarget","getBoundingClientRect","bottom","top","useEffect","olEventKey","on","unByKey","length","Paper","square","elevation","ref","List","component","className","aria-label","style","overflowY","paddingBottom","paddingTop","searchResult","index","ListItem","onClick","button","key","nextId","ListItemIcon","ListItemText","primary","properties","secondary","country_code","selected","defaultProps","propTypeCoordinates","PropTypes","arrayOf","number","isRequired","geometry","shape","string","feature","oneOfType","currentStop","features","useStyles","makeStyles","gridContainer","width","padding","boxSizing","color","height","fieldWrapper","maxWidth","buttonWrapper","SearchField","val","classes","dispatch","useDispatch","addNewSearchFieldHandler","removeSearchFieldHandler","searchStopsHandler","singleStop","processHighlightedResultSelectHandler","onFieldFocusHandler","onPanViaClick","inputReference","fieldLeftIcon","searchFieldSize","searchFieldLabel","fieldRightIcon","addNextHopDisabled","Tooltip","IconButton","size","fontSize","Grid","item","xs","disabled","container","spacing","alignItems","TextField","inputRef","label","onChange","e","value","Array","isArray","onKeyDown","onFocus","onBlur","setTimeout","event","target","select","TabPanel","children","Typography","role","hidden","aria-labelledby","tabs","tab","minWidth","dropDown","backgroundColor","selectInput","checkbox","margin","abortController","AbortController","RoutingMenu","mots","stationSearchUrl","APIKey","isActiveRoute","onZoomRouteClick","validateMots","motsArray","validationMots","currentMotsArray","mot","includes","forEach","providedMot","requestedMot","find","icon","currentMotsVal","otherMotsVal","elRefs","React","fill","el","i","createRef","currentMots","otherMots","lastChangedFieldIdx","setLastChangedFieldIdx","setCurrentSearchResults","searchMotOnly","setSearchMotOnly","focusedFieldIndex","setFocusedFieldIndex","undefined","currentOtherMot","setCurrentOtherMot","updateCurrentStops","updatedCurrentStops","updatedCurrentStopsGeoJSON","updatedFocusedFieldIndex","updateFieldOnMapClick","_","clone","tempGeoJSON","reverse","coordinates","handleMotChange","newMot","fieldIndex","currStops","indexToInsertAt","splice","Object","keys","k","parseInt","indexToRemoveFrom","abort","signal","reqUrl","fetch","then","response","json","error","catch","err","console","warn","firstSearchResult","updateCurrentSearchResults","toString","Tabs","indicatorColor","textColor","singleMot","Tab","FormControl","Select","renderValue","root","labelId","disableUnderline","displayEmpty","evt","MenuItem","onDragEnd","destination","source","removed","newSource","droppableId","provided","droppableProps","innerRef","background","draggableId","prov","snpsht","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","placeholder","Checkbox","checked","inputProps","Button","variant","startIcon","LinearProgress","tickFormatter","isMeter","Math","round","everyNth","arr","interval","start","getTooltipX","dist","xPosition","RouteInfosDialog","alt","maxAlt","routes","hoveredCoords","onHighlightPoint","clearHighlightPoint","hoveredPoint","setHoveredPoint","setLength","maxAltitude","setMaxAltitude","routePoints","setRoutePoints","distanceUnit","setDistanceUnit","setIsMeter","pointArray","coords","concat","r","getGeometry","getFlatCoordinates","collec","GeometryCollection","lgth","getLength","xArray","yArray","altitudesArray","max","idx","xVal","yVal","distance","Dialog","isOpen","isDraggable","onDragStop","position","lastX","lastY","classNameHeader","classNameCloseBt","cancelDraggable","onClose","data","onMouseLeave","axisLine","tickLine","offset","dataKey","vertical","dot","stroke","strokeWidth","cursor","content","hovCoords","linePoints","routeLine","format","GeoJSON","line","combine","writeFeaturesObject","dataProjection","featureProjection","hoveredFeat","Feature","Point","pt","writeFeatureObject","turfClosestPt","nearestPointOnLine","lineCoordinates","nearestPts","nearestPt","reduce","prev","curr","goal","abs","hoveredLineIdx","indexOf","nearestPtIndex","point","renderPrograTooltip","tooltipProps","payload","renderTooltip","memo","lineStyler","lineStyle","Style","Stroke","lineDash","railLineStyle","railLineHoveredStyle","busLineStyle","busLineHoveredStyle","pedestrianLineStyle","pedestrianLineHoveredStyle","carLineStyle","carLineHoveredStyle","othersLineStyle","othersLineHoveredStyle","railPointStyle","image","Circle","radius","Fill","pedestrianPointStyle","carPointStyle","busPointStyle","othersPointStyle","pointStyleFunction","lineStyleFunction","isHovered","MapComponent","onMapMoved","onSetCenter","newCenter","getView","getCenter","drawNewRoute","hops","routingUrl","onShowNotification","onSetShowLoadingBar","onSetSelectedRoutes","uid","routeVectorSource","clear","addFeatures","readFeatures","setIsActiveRoute","getFeatures","routeVectorLayer","olLayer","setStyle","onSetClickLocation","mapRef","hoveredFeature","hoveredRoute","initialRouteDrag","hoveredStationOpen","hoveredStationName","bind","projection","layerService","LayerService","ConfigReader","readConfig","visible","isBaseLayer","url","VectorSource","addLayer","Layer","VectorLayer","zIndex","highlightVectorSource","markerVectorSource","markerVectorLayer","getLayer","layers","getLayers","translate","Translate","hitTolerance","featureIndex","onSetCurrentStops","onSetCurrentStopsGeoJSON","newCurrentStops","newCurentStopsGeoJSON","getArray","getProperties","findIndex","coordinate","modify","Modify","pixelTolerance","condition","mapBrowserEvent","newHopIdx","flatCoords","f","lineString","getFirstCoordinate","getLastCoordinate","closestSegment","getClosestFeatureToCoordinate","closestEdges","segment","every","defaultInteractions","extend","interaction","addInteraction","featExtent","getExtent","Number","isFinite","fit","getSize","duration","featureCoord","animate","setState","getFeaturesAtPixel","pixel","getType","featCountryCode","get","flatCoordinates","prevProps","this","currentMotChanged","currentStopsGeoJSONChanged","feat","node","Snackbar","anchorOrigin","horizontal","open","message","BasicMap","onFeaturesHover","zoom","tabIndex","viewOptions","Component","getExtentCenter","extent","indexInGeom","lineGeom","connect","actions","getGeoJson","viaString","split","geoJson","coordArray","isNaN","parseFloat","validateUrlCoordinates","coords3857","Promise","resolve","test","replace","Permalink","urlSearch","qs","parse","location","search","appState","params","setParams","newParams","z","setZoom","via","geoJsonArray","all","values","stop","geoJsonObject","getZoom","currentStopsGeoJson","NotificationHandler","handleOpen","handleClose","autoHideDuration","Alert","severity","App","apiKey","process","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fc978602.chunk.js","sourcesContent":["import { Map } from 'ol';\nimport * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n  center: [949042.143189, 5899715.591163],\n  currentMot: 'rail',\n  currentStops: ['', ''],\n  currentStopsGeoJSON: {},\n  clickLocation: null,\n  notificationMessage: '',\n  notificationType: 'info',\n  isFieldFocused: false,\n  showLoadingBar: false,\n  selectedRoutes: [],\n  isRouteInfoOpen: false,\n  dialogPosition: {\n    x: 10,\n    y: 275,\n  },\n  olMap: new Map({\n    controls: [],\n  }),\n  routingElevation: 1,\n  resolveHops: false,\n};\n\nconst setCenter = (state, action) => {\n  const updatedState = {\n    center: action.center,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setCurrentStops = (state, action) => {\n  const updatedState = {\n    currentStops: action.currentStops,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setCurrentStopsGeoJSON = (state, action) => {\n  const updatedState = {\n    currentStopsGeoJSON: action.currentStopsGeoJSON,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setCurrentMot = (state, action) => {\n  const updatedState = {\n    currentMot: action.currentMot,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setClickLocation = (state, action) => {\n  const updatedState = {\n    clickLocation: action.clickLocation,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst showNotification = (state, action) => {\n  const updatedState = {\n    notificationMessage: action.notificationMessage,\n    notificationType: action.notificationType,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setIsFieldFocused = (state, action) => {\n  const updatedState = {\n    isFieldFocused: action.isFieldFocused,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setShowLoadingBar = (state, action) => {\n  const updatedState = {\n    showLoadingBar: action.showLoadingBar,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setSelectedRoutes = (state, action) => {\n  const updatedState = {\n    selectedRoutes: action.selectedRoutes,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setIsRouteInfoOpen = (state, action) => {\n  const updatedState = {\n    isRouteInfoOpen: action.isRouteInfoOpen,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setDialogPosition = (state, action) => {\n  const updatedState = {\n    dialogPosition: action.dialogPosition,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setRoutingElevation = (state, action) => {\n  const updatedState = {\n    routingElevation: action.routingElevation,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setResolveHops = (state, action) => {\n  const updatedState = {\n    resolveHops: action.resolveHops,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_CENTER:\n      return setCenter(state, action);\n    case actionTypes.SET_CURRENT_STOPS:\n      return setCurrentStops(state, action);\n    case actionTypes.SET_CURRENT_STOPS_GEOJSON:\n      return setCurrentStopsGeoJSON(state, action);\n    case actionTypes.SET_CURRENT_MOT:\n      return setCurrentMot(state, action);\n    case actionTypes.SET_CLICK_LOCATION:\n      return setClickLocation(state, action);\n    case actionTypes.SHOW_NOTIFICATION:\n      return showNotification(state, action);\n    case actionTypes.SET_IS_FIELD_FOCUSED:\n      return setIsFieldFocused(state, action);\n    case actionTypes.SET_SHOW_LOADING_BAR:\n      return setShowLoadingBar(state, action);\n    case actionTypes.SET_SELECTED_ROUTES:\n      return setSelectedRoutes(state, action);\n    case actionTypes.SET_IS_ROUTE_INFO_OPEN:\n      return setIsRouteInfoOpen(state, action);\n    case actionTypes.SET_DIALOG_POSITION:\n      return setDialogPosition(state, action);\n    case actionTypes.SET_ROUTING_ELEVATION:\n      return setRoutingElevation(state, action);\n    case actionTypes.SET_RESOLVE_HOPS:\n      return setResolveHops(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","export const SET_CENTER = 'SET_CENTER';\nexport const SET_CURRENT_STOPS = 'SET_CURRENT_STOPS';\nexport const SET_CURRENT_STOPS_GEOJSON = 'SET_CURRENT_STOPS_GEOJSON';\nexport const SET_CURRENT_MOT = 'SET_CURRENT_MOT';\nexport const SET_CLICK_LOCATION = 'SET_CLICK_LOCATION';\nexport const SHOW_NOTIFICATION = 'SHOW_NOTIFICATION';\nexport const SET_IS_FIELD_FOCUSED = 'SET_IS_FIELD_FOCUSED';\nexport const SET_SHOW_LOADING_BAR = 'SET_SHOW_LOADING_BAR';\nexport const SET_SELECTED_ROUTES = 'SET_SELECTED_ROUTES';\nexport const SET_IS_ROUTE_INFO_OPEN = 'SET_IS_ROUTE_INFO_OPEN';\nexport const SET_DIALOG_POSITION = 'SET_DIALOG_POSITION';\nexport const SET_ROUTING_ELEVATION = 'SET_ROUTING_ELEVATION';\nexport const SET_RESOLVE_HOPS = 'SET_RESOLVE_HOPS';\n","import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport MapReducer from './reducers/Map';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({ MapReducer });\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import * as actionTypes from './actionTypes';\n\nexport const setCenter = center => {\n  return {\n    type: actionTypes.SET_CENTER,\n    center,\n  };\n};\n\nexport const setCurrentStops = currentStops => {\n  return {\n    type: actionTypes.SET_CURRENT_STOPS,\n    currentStops,\n  };\n};\n\nexport const setCurrentStopsGeoJSON = currentStopsGeoJSON => {\n  return {\n    type: actionTypes.SET_CURRENT_STOPS_GEOJSON,\n    currentStopsGeoJSON,\n  };\n};\n\nexport const setCurrentMot = currentMot => {\n  return {\n    type: actionTypes.SET_CURRENT_MOT,\n    currentMot,\n  };\n};\n\nexport const setClickLocation = clickLocation => {\n  return {\n    type: actionTypes.SET_CLICK_LOCATION,\n    clickLocation,\n  };\n};\n\nexport const showNotification = (notificationMessage, notificationType) => {\n  return {\n    type: actionTypes.SHOW_NOTIFICATION,\n    notificationMessage,\n    notificationType,\n  };\n};\n\nexport const setIsFieldFocused = isFieldFocused => {\n  return {\n    type: actionTypes.SET_IS_FIELD_FOCUSED,\n    isFieldFocused,\n  };\n};\n\nexport const setShowLoadingBar = showLoadingBar => {\n  return {\n    type: actionTypes.SET_SHOW_LOADING_BAR,\n    showLoadingBar,\n  };\n};\n\nexport const setSelectedRoutes = selectedRoutes => {\n  return {\n    type: actionTypes.SET_SELECTED_ROUTES,\n    selectedRoutes,\n  };\n};\n\nexport const setIsRouteInfoOpen = isRouteInfoOpen => {\n  return {\n    type: actionTypes.SET_IS_ROUTE_INFO_OPEN,\n    isRouteInfoOpen,\n  };\n};\n\nexport const setDialogPosition = dialogPosition => {\n  return {\n    type: actionTypes.SET_DIALOG_POSITION,\n    dialogPosition,\n  };\n};\n\nexport const setRoutingElevation = routingElevation => {\n  return {\n    type: actionTypes.SET_ROUTING_ELEVATION,\n    routingElevation,\n  };\n};\n\nexport const setResolveHops = resolveHops => {\n  return {\n    type: actionTypes.SET_RESOLVE_HOPS,\n    resolveHops,\n  };\n};\n","/**\n * The valid supported mots by the application\n * @type {string[]}\n * @category Constants\n */\nexport const DEFAULT_MOTS = ['rail', 'bus', 'foot'];\n\nexport const OTHER_MOTS = [\n  'tram',\n  'subway',\n  'gondola',\n  'funicular',\n  'ferry',\n  'car',\n];\n\nexport const VALID_MOTS = [...DEFAULT_MOTS, ...OTHER_MOTS];\n\nexport const GRAPHHOPPER_MOTS = ['foot', 'car'];\n","import DirectionsBusIcon from '@material-ui/icons/DirectionsBus';\nimport DirectionsRailwayIcon from '@material-ui/icons/DirectionsRailway';\nimport DirectionsWalkIcon from '@material-ui/icons/DirectionsWalk';\nimport React from 'react';\nimport { transform } from 'ol/proj';\n\n/**\n * Map each mot to an icon\n * @param {string} name The name of the mot, ex('bus' or 'train')\n * @returns {Icon} MotIcon\n * @category Utils\n */\nexport const findMotIcon = name => {\n  let result = null;\n  const capitalName = name.charAt(0).toUpperCase() + name.slice(1);\n  switch (name) {\n    case 'rail':\n      result = <DirectionsRailwayIcon />;\n      break;\n    case 'foot':\n      result = <DirectionsWalkIcon />;\n      break;\n    default:\n      result = <DirectionsBusIcon />;\n      break;\n  }\n  return <span title={capitalName}>{result}</span>;\n};\n\nexport const to4326 = (coord, decimal = 5) => {\n  return transform(coord, 'EPSG:3857', 'EPSG:4326').map(c =>\n    c.toFixed(decimal),\n  );\n};\n\nexport const to3857 = coord => {\n  return transform(coord, 'EPSG:4326', 'EPSG:3857');\n};\n","import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport nextId from 'react-id-generator';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport MapMarkerIcon from '@material-ui/icons/LocationOn';\nimport { unByKey } from 'ol/Observable';\n\nimport './SearchResults.scss';\n\nconst renderSecondary = (id, code, countryCode, ifopt) => {\n  const display = [];\n\n  if (countryCode) {\n    display.push(\n      `${countryCode}${id || code ? ':' : ''}${id ? ` ${id}` : ''}${\n        code ? ` ${code}` : ''\n      }`,\n    );\n  } else {\n    display.push(\n      `${id ? `${id}` : ''}${id && code ? ' ' : ''}${code ? `${code}` : ''}`,\n    );\n  }\n  if (ifopt) {\n    display.push(`ifopt: ${ifopt}`);\n  }\n  return display.filter(l => l !== '').join(', ');\n};\n\n/**\n * The component that displays the station search results\n * @category RoutingMenu\n */\nfunction SearchResults(props) {\n  const { currentSearchResults, processClickedResultHandler } = props;\n  const map = useSelector(state => state.MapReducer.olMap);\n  const [maxHeight, setMaxHeight] = useState(null);\n  const ListRef = useRef();\n\n  const updateMenuHeight = useCallback(() => {\n    let newMaxheight;\n\n    if (ListRef.current) {\n      const mapBottom = map.getTarget().getBoundingClientRect().bottom;\n      const elemRect = ListRef.current.getBoundingClientRect();\n      newMaxheight = mapBottom - elemRect.top - 35;\n    }\n\n    if (newMaxheight >= 0) {\n      setMaxHeight(newMaxheight);\n    }\n  }, [map]);\n\n  useEffect(() => {\n    const olEventKey = map.on('change:size', () => updateMenuHeight());\n\n    return () => {\n      unByKey(olEventKey);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    updateMenuHeight();\n  }, [updateMenuHeight, currentSearchResults]);\n\n  if (currentSearchResults.length === 0) {\n    return null;\n  }\n  return (\n    <Paper square elevation={3} ref={ListRef}>\n      <List\n        component=\"nav\"\n        className=\"rd-result-list\"\n        aria-label=\"search results\"\n        style={{\n          maxHeight,\n          overflowY: 'scroll',\n          paddingBottom: 0,\n          paddingTop: 0,\n        }}\n      >\n        {currentSearchResults.map((searchResult, index) => {\n          if (index !== 0) {\n            return (\n              <ListItem\n                onClick={() => {\n                  processClickedResultHandler(searchResult);\n                }}\n                button\n                key={nextId()}\n              >\n                <ListItemIcon>\n                  <MapMarkerIcon />\n                </ListItemIcon>\n                <ListItemText\n                  primary={searchResult.properties.name}\n                  secondary={renderSecondary(\n                    searchResult.properties.id,\n                    searchResult.properties.code,\n                    searchResult.properties.country_code,\n                    searchResult.properties.ifopt,\n                  )}\n                />\n              </ListItem>\n            );\n          }\n          // First item\n          return (\n            <ListItem\n              onClick={() => processClickedResultHandler(searchResult)}\n              button\n              selected\n              key={`searchResult-${searchResult.properties.name}`}\n            >\n              <ListItemIcon>\n                <MapMarkerIcon />\n              </ListItemIcon>\n              <ListItemText\n                primary={searchResult.properties.name}\n                secondary={renderSecondary(\n                  searchResult.properties.id,\n                  searchResult.properties.code,\n                  searchResult.properties.country_code,\n                  searchResult.properties.ifopt,\n                )}\n              />\n            </ListItem>\n          );\n        })}\n      </List>\n    </Paper>\n  );\n}\n\nSearchResults.propTypes = {\n  currentSearchResults: PropTypes.arrayOf(PropTypes.object),\n  processClickedResultHandler: PropTypes.func.isRequired,\n};\n\nSearchResults.defaultProps = {\n  currentSearchResults: [],\n};\n\nexport default SearchResults;\n","import SearchResults from './SearchResults';\n\nexport default SearchResults;\n","import PropTypes from 'prop-types';\n\nconst propTypeCoordinates = PropTypes.arrayOf(PropTypes.number.isRequired)\n  .isRequired;\n\nconst geometry = PropTypes.shape({\n  propTypeCoordinates,\n  type: PropTypes.string.isRequired,\n});\n\nconst feature = PropTypes.shape({\n  geometry,\n  properties: PropTypes.shape({\n    id: PropTypes.oneOfType([\n      PropTypes.string.isRequired,\n      PropTypes.string.isRequired,\n    ]),\n    type: PropTypes.string.isRequired,\n  }),\n  type: PropTypes.string.isRequired,\n});\n\nconst currentStop = PropTypes.shape({\n  features: PropTypes.shape({\n    '0': PropTypes.oneOfType([feature, propTypeCoordinates]),\n    '1': PropTypes.oneOfType([feature, propTypeCoordinates]),\n  }),\n  type: PropTypes.string.isRequired,\n});\n\nconst propTypeCurrentStopsGeoJSON = PropTypes.shape({\n  '0': currentStop,\n  '1': currentStop,\n});\n\nconst propTypeCurrentStops = PropTypes.arrayOf(\n  PropTypes.oneOfType([PropTypes.string.isRequired, propTypeCoordinates]),\n);\n\nexport {\n  propTypeCoordinates,\n  propTypeCurrentStops,\n  propTypeCurrentStopsGeoJSON,\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport Adjust from '@material-ui/icons/Adjust';\nimport Room from '@material-ui/icons/Room';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\nimport { propTypeCurrentStops } from '../../store/prop-types';\nimport { to4326 } from '../../utils';\nimport { setIsFieldFocused } from '../../store/actions/Map';\n\nconst useStyles = makeStyles(() => ({\n  gridContainer: {\n    width: '100%',\n    padding: '0px 0px 0px 20px',\n    boxSizing: 'unset',\n  },\n  button: {\n    color: 'black',\n    '& svg': {\n      height: '20px',\n      width: '20px',\n    },\n  },\n  fieldWrapper: {\n    maxWidth: '75%',\n  },\n  buttonWrapper: {\n    maxWidth: '26px',\n  },\n}));\n\n/**\n * The component that displays the search field(s)\n * @category RoutingMenu\n */\nfunction SearchField(props) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const {\n    index,\n    addNewSearchFieldHandler,\n    currentStops,\n    removeSearchFieldHandler,\n    searchStopsHandler,\n    singleStop,\n    processHighlightedResultSelectHandler,\n    onFieldFocusHandler,\n    onPanViaClick,\n    inputReference,\n  } = props;\n  let fieldLeftIcon = null;\n  let searchFieldSize = 10;\n  let searchFieldLabel = '';\n  let fieldRightIcon = null;\n\n  const formatSingleStop = val => (Array.isArray(val) ? to4326(val) : val);\n\n  const addNextHopDisabled =\n    currentStops[index] === '' ||\n    (currentStops.length > 2 && currentStops[index + 1] === '');\n  if (index === 0) {\n    // Start station field\n    fieldLeftIcon = (\n      <Tooltip title=\"Pan to the feature\">\n        <IconButton\n          onClick={() => onPanViaClick(singleStop, index)}\n          className={classes.button}\n          aria-label=\"Pan to the feature\"\n          size=\"small\"\n        >\n          <RadioButtonCheckedIcon fontSize=\"small\" color=\"primary\" />\n        </IconButton>\n      </Tooltip>\n    );\n    searchFieldLabel = 'Start';\n    fieldRightIcon = (\n      <Grid item xs={1} className={classes.buttonWrapper}>\n        <Tooltip title=\"Add Hop\">\n          <IconButton\n            onClick={() => addNewSearchFieldHandler(currentStops, index + 1)}\n            disabled={addNextHopDisabled}\n            className={classes.button}\n            aria-label=\"Add Hop\"\n            size=\"small\"\n          >\n            <AddCircleOutlineIcon fontSize=\"small\" />\n          </IconButton>\n        </Tooltip>\n      </Grid>\n    );\n  } else if (index === currentStops.length - 1) {\n    fieldLeftIcon = (\n      <Tooltip title=\"Pan to the feature\">\n        <IconButton\n          onClick={() => onPanViaClick(singleStop, index)}\n          className={classes.button}\n          aria-label=\"Pan to the feature\"\n          size=\"small\"\n        >\n          <Room color=\"primary\" />\n        </IconButton>\n      </Tooltip>\n    );\n    searchFieldLabel = 'End';\n  } else {\n    fieldLeftIcon = (\n      <Tooltip title=\"Pan to the feature\">\n        <IconButton\n          onClick={() => onPanViaClick(singleStop, index)}\n          className={classes.button}\n          aria-label=\"Pan to the feature\"\n          size=\"small\"\n        >\n          <Adjust fontSize=\"small\" color=\"primary\" />\n        </IconButton>\n      </Tooltip>\n    );\n    searchFieldSize = 9;\n    searchFieldLabel = 'Hop';\n    fieldRightIcon = (\n      <>\n        <Grid item xs={1} className={classes.buttonWrapper}>\n          <Tooltip title=\"Add Hop\">\n            <IconButton\n              disabled={addNextHopDisabled}\n              onClick={() => addNewSearchFieldHandler(currentStops, index + 1)}\n              className={classes.button}\n              aria-label=\"addHop\"\n              size=\"small\"\n            >\n              <AddCircleOutlineIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n        <Grid item xs={1} className={classes.buttonWrapper}>\n          <Tooltip title=\"Remove Hop\">\n            <IconButton\n              onClick={() => removeSearchFieldHandler(index)}\n              className={classes.button}\n              aria-label=\"removeHop\"\n              size=\"small\"\n            >\n              <RemoveCircleOutlineIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n      </>\n    );\n  }\n  return (\n    <Grid\n      container\n      spacing={1}\n      className={classes.gridContainer}\n      alignItems=\"flex-end\"\n    >\n      <Grid item xs={1}>\n        {fieldLeftIcon}\n      </Grid>\n      <Grid item xs={searchFieldSize} className={classes.fieldWrapper}>\n        <TextField\n          style={{\n            width: '100%',\n          }}\n          inputRef={inputReference}\n          label={searchFieldLabel}\n          color=\"primary\"\n          onChange={e => searchStopsHandler(e, index)}\n          value={formatSingleStop(singleStop)}\n          onKeyDown={processHighlightedResultSelectHandler}\n          onFocus={() => {\n            dispatch(setIsFieldFocused(true));\n            onFieldFocusHandler(index);\n          }}\n          onBlur={() =>\n            setTimeout(() => {\n              dispatch(setIsFieldFocused(false));\n            }, 500)\n          }\n          onClick={event => {\n            if (event.target.select) {\n              event.target.select();\n            }\n          }}\n        />\n      </Grid>\n      {fieldRightIcon}\n    </Grid>\n  );\n}\n\nSearchField.propTypes = {\n  index: PropTypes.number.isRequired,\n  addNewSearchFieldHandler: PropTypes.func.isRequired,\n  currentStops: propTypeCurrentStops,\n  removeSearchFieldHandler: PropTypes.func.isRequired,\n  searchStopsHandler: PropTypes.func.isRequired,\n  singleStop: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.number),\n  ]),\n  processHighlightedResultSelectHandler: PropTypes.func.isRequired,\n  onFieldFocusHandler: PropTypes.func.isRequired,\n  onPanViaClick: PropTypes.func.isRequired,\n  inputReference: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.shape({ current: PropTypes.instanceOf(Element) }),\n  ]).isRequired,\n};\n\nSearchField.defaultProps = {\n  currentStops: [],\n  singleStop: '',\n};\n\nexport default SearchField;\n","import SearchField from './SearchField';\n\nexport default SearchField;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Button from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Grid from '@material-ui/core/Grid';\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport InfoIcon from '@material-ui/icons/Info';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport PropTypes from 'prop-types';\nimport nextId from 'react-id-generator';\nimport _ from 'lodash/core';\n\nimport {\n  setCurrentStops,\n  setCurrentStopsGeoJSON,\n  setCurrentMot,\n  showNotification,\n  setIsFieldFocused,\n  setShowLoadingBar,\n  setSelectedRoutes,\n  setIsRouteInfoOpen,\n} from '../../store/actions/Map';\nimport './RoutingMenu.scss';\nimport {\n  VALID_MOTS,\n  DEFAULT_MOTS,\n  OTHER_MOTS,\n  GRAPHHOPPER_MOTS,\n} from '../../constants';\nimport { to4326, to3857, findMotIcon } from '../../utils';\nimport SearchResults from '../SearchResults';\nimport SearchField from '../SearchField';\n\nfunction TabPanel(props) {\n  const { children, value, index } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={nextId()}\n      aria-labelledby={`simple-tab-${index}`}\n    >\n      {value === index && children}\n    </Typography>\n  );\n}\n\n/**\n * The routing menu props\n * @typedef RoutingMenuProps\n * @type {props}\n * @property {string} stationSearchUrl The station search API used for searching.\n * @property {string} APIKey key obtained from geOps that enables you to used the previous API services.\n * @property {string[]} mots List of mots to be available (ex: ['bus', 'train'])\n * @property {LongLat} clickLocation The location clicked by the user in the form of [long,lat].\n * @category Props\n */\n\nconst useStyles = makeStyles(() => ({\n  tabs: {\n    width: '75%',\n  },\n  tab: {\n    minWidth: '33%',\n    width: '33%',\n  },\n  dropDown: {\n    width: '25%',\n    backgroundColor: 'white',\n  },\n  select: {\n    height: '100%',\n  },\n  selectInput: {\n    backgroundColor: 'white',\n    '&:focus': {\n      backgroundColor: 'white',\n    },\n  },\n  checkbox: {\n    margin: '0px 5px 0px 13px',\n  },\n}));\n\nlet abortController = new AbortController();\n\n/**\n * The routing menu that controls station search\n * @category RoutingMenu\n */\nfunction RoutingMenu({\n  mots,\n  stationSearchUrl,\n  APIKey,\n  isActiveRoute,\n  onZoomRouteClick,\n  onPanViaClick,\n}) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  /**\n   * Validate the mots provided from the props, then retrieve the icons for the valid ones.\n   * @param mots The provided mots\n   * @returns {Array} The valid mots with their icons\n   * @category RoutingMenu\n   */\n  const validateMots = (motsArray, validationMots) => {\n    const currentMotsArray = [];\n\n    motsArray\n      .filter(mot => {\n        return validationMots.includes(mot);\n      })\n      .forEach(providedMot => {\n        const requestedMot = validationMots.find(mot => mot === providedMot);\n        if (requestedMot) {\n          currentMotsArray.push({\n            name: requestedMot,\n            icon: findMotIcon(requestedMot),\n          });\n        }\n      });\n    if (currentMotsArray.length === 0) {\n      currentMotsArray.push({\n        name: VALID_MOTS[0],\n        icon: findMotIcon(VALID_MOTS[0]),\n      });\n    }\n    return currentMotsArray;\n  };\n\n  const currentMotsVal = validateMots(mots, DEFAULT_MOTS);\n  const otherMotsVal = validateMots(mots, OTHER_MOTS);\n\n  const center = useSelector(state => state.MapReducer.center);\n  const clickLocation = useSelector(state => state.MapReducer.clickLocation);\n  const currentStops = useSelector(state => state.MapReducer.currentStops);\n  const showLoadingBar = useSelector(state => state.MapReducer.showLoadingBar);\n  const isRouteInfoOpen = useSelector(\n    state => state.MapReducer.isRouteInfoOpen,\n  );\n  const currentStopsGeoJSON = useSelector(\n    state => state.MapReducer.currentStopsGeoJSON,\n  );\n  const currentMot = useSelector(state => state.MapReducer.currentMot);\n\n  const elRefs = React.useRef([]);\n  if (elRefs.current.length !== currentStops.length) {\n    elRefs.current = Array(currentStops.length)\n      .fill()\n      .map((el, i) => elRefs.current[i] || React.createRef());\n  }\n\n  const [currentMots] = useState(currentMotsVal);\n  const [otherMots] = useState(otherMotsVal);\n  const [lastChangedFieldIdx, setLastChangedFieldIdx] = useState(null);\n  const [currentSearchResults, setCurrentSearchResults] = useState([]);\n  const [searchMotOnly, setSearchMotOnly] = React.useState(true);\n  const [focusedFieldIndex, setFocusedFieldIndex] = useState(0);\n  const [currentOtherMot, setCurrentOtherMot] = useState(undefined);\n\n  useEffect(() => {\n    if (isRouteInfoOpen) {\n      dispatch(setSelectedRoutes([]));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentStops]);\n\n  /**\n   * Update the current stops array (string array) and the GeoJSON array in the local state.\n   * @param updatedCurrentStops The updated stops.\n   * @param updatedCurrentStopsGeoJSON The updated GeoJSON.\n   * @category RoutingMenu\n   */\n  const updateCurrentStops = (\n    updatedCurrentStops,\n    updatedCurrentStopsGeoJSON,\n    updatedFocusedFieldIndex,\n  ) => {\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    setFocusedFieldIndex(updatedFocusedFieldIndex);\n  };\n\n  const updateFieldOnMapClick = (\n    updatedCurrentStops,\n    updatedFocusedFieldIndex,\n  ) => {\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    // Create GeoJSON\n    const tempGeoJSON = {\n      type: 'FeatureCollection',\n      features: [\n        {\n          type: 'Feature',\n          properties: {\n            id: clickLocation.slice().reverse(),\n            type: 'coordinates',\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: clickLocation,\n          },\n        },\n      ],\n    };\n    updatedCurrentStopsGeoJSON[focusedFieldIndex] = tempGeoJSON;\n    updateCurrentStops(\n      updatedCurrentStops,\n      updatedCurrentStopsGeoJSON,\n      updatedFocusedFieldIndex,\n    );\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * If a location was received through the props (user click on map) act accordingly.\n   * @category RoutingMenu\n   */\n  useEffect(() => {\n    if (clickLocation) {\n      // A click occurred on the map\n      if (currentStops[focusedFieldIndex] === '') {\n        // Performs when there's an empty field.\n        const updatedCurrentStops = currentStops;\n        updatedCurrentStops[focusedFieldIndex] = clickLocation;\n        updateFieldOnMapClick(\n          currentStops,\n          focusedFieldIndex + 1 < currentStops.length\n            ? focusedFieldIndex + 1\n            : focusedFieldIndex,\n        );\n      } else {\n        const updatedCurrentStops = currentStops;\n        const updatedFocusedFieldIndex = focusedFieldIndex;\n        updatedCurrentStops[focusedFieldIndex] = clickLocation;\n        updateFieldOnMapClick(updatedCurrentStops, focusedFieldIndex);\n\n        const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n        // Create GeoJSON\n        const tempGeoJSON = {\n          type: 'FeatureCollection',\n          features: [\n            {\n              type: 'Feature',\n              properties: {\n                id: clickLocation.slice().reverse(),\n                type: 'coordinates',\n              },\n              geometry: {\n                type: 'Point',\n                coordinates: clickLocation,\n              },\n            },\n          ],\n        };\n        updatedCurrentStopsGeoJSON[focusedFieldIndex] = tempGeoJSON;\n        updateCurrentStops(\n          updatedCurrentStops,\n          updatedCurrentStopsGeoJSON,\n          updatedFocusedFieldIndex,\n        );\n        dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickLocation]);\n\n  /**\n   * Process changing the current selected mot, save in local state and dispatch store action.\n   * @param event The change event\n   * @param newMot The new selected mot\n   * @category RoutingMenu\n   */\n  const handleMotChange = (event, newMot) => {\n    setCurrentOtherMot(null);\n    dispatch(setCurrentMot(newMot));\n  };\n\n  /**\n   * Gets callled when a search field is in focus. Keep track of the last focused/selected field.\n   * @param fieldIndex The search field index(order)\n   * @category RoutingMenu\n   */\n  const onFieldFocusHandler = fieldIndex => {\n    setFocusedFieldIndex(fieldIndex);\n    dispatch(setIsFieldFocused(true));\n  };\n\n  /**\n   * Create a new search field (hop) between already existing search fields\n   * @param indexToInsertAt The index to insert the new search field at.\n   * @category RoutingMenu\n   */\n  const addNewSearchFieldHandler = (currStops, indexToInsertAt) => {\n    const updatedCurrentStops = _.clone(currentStops);\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    updatedCurrentStops.splice(indexToInsertAt, 0, '');\n\n    if (updatedCurrentStopsGeoJSON[indexToInsertAt]) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON)\n        .filter(k => k >= indexToInsertAt)\n        .reverse();\n      keys.forEach(k => {\n        updatedCurrentStopsGeoJSON[`${parseInt(k, 10) + 1}`] =\n          updatedCurrentStopsGeoJSON[k];\n      });\n    }\n\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * Remove a search field (hop) from a defined index. Then dispatch an update to the stops,\n   * so that the route can be updated if exists.\n   * @param indexToRemoveFrom The index to remove the search field from.\n   * @category RoutingMenu\n   */\n  const removeSearchFieldHandler = indexToRemoveFrom => {\n    const updatedCurrentStops = _.clone(currentStops);\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    updatedCurrentStops.splice(indexToRemoveFrom, 1);\n\n    if (updatedCurrentStopsGeoJSON[indexToRemoveFrom]) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON);\n      keys.forEach(key => {\n        const k = parseInt(key, 10);\n        if (k === indexToRemoveFrom) {\n          delete updatedCurrentStopsGeoJSON[indexToRemoveFrom];\n        } else if (k > indexToRemoveFrom) {\n          updatedCurrentStopsGeoJSON[k - 1] = updatedCurrentStopsGeoJSON[k];\n        }\n      });\n      delete updatedCurrentStopsGeoJSON[keys.length - 1];\n    }\n\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * Perform searching for stations through the station API\n   * @param event\n   * @param fieldIndex The search field(hop) index(order)\n   * @category RoutingMenu\n   */\n  const searchStopsHandler = (event, fieldIndex) => {\n    setLastChangedFieldIdx(fieldIndex);\n    // only search if text is available\n    if (!event.target.value) {\n      const updatedCurrentStops = currentStops;\n      updatedCurrentStops[fieldIndex] = '';\n      setCurrentSearchResults([]);\n      dispatch(setCurrentStops(updatedCurrentStops));\n      dispatch(setShowLoadingBar(false));\n      return;\n    }\n    const updatedCurrentStops = _.clone(currentStops);\n    updatedCurrentStops[fieldIndex] = event.target.value;\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setShowLoadingBar(true));\n\n    abortController.abort();\n    abortController = new AbortController();\n    const { signal } = abortController;\n\n    const reqUrl = `${stationSearchUrl}?q=${event.target.value}&key=${APIKey}${\n      !GRAPHHOPPER_MOTS.includes(currentMot)\n        ? `&mots=${searchMotOnly ? currentMot : ''}`\n        : ''\n    }&ref_location=${to4326(center)\n      .reverse()\n      .join(',')}&limit=10`;\n\n    fetch(reqUrl, { signal })\n      .then(response => response.json())\n      .then(response => {\n        if (response.error) {\n          dispatch(showNotification(\"Couldn't find stations\", 'warning'));\n          return;\n        }\n        if (response.features.length === 0) {\n          dispatch(showNotification(\"Couldn't find stations\", 'warning'));\n        }\n        setCurrentSearchResults(response.features);\n        dispatch(setShowLoadingBar(false));\n      })\n      .catch(err => {\n        if (err.name === 'AbortError') {\n          // eslint-disable-next-line no-console\n          console.warn(`Abort ${reqUrl}`);\n          return;\n        }\n        // It's important to rethrow all other errors so you don't silence them!\n        // For example, any error thrown by setState(), will pass through here.\n        throw err;\n      });\n  };\n\n  const retriggerSearch = () => {\n    if (lastChangedFieldIdx === null) {\n      return;\n    }\n    searchStopsHandler(\n      {\n        target: {\n          value: elRefs.current[lastChangedFieldIdx].current.value,\n        },\n      },\n      lastChangedFieldIdx,\n    );\n  };\n\n  /**\n   * The user makes changes to the current search. Either select the first result,\n   * or delete the text to make a new search.\n   * @param event\n   * @category RoutingMenu\n   */\n  const processHighlightedResultSelectHandler = event => {\n    const [firstSearchResult] = currentSearchResults;\n    if (event.key === 'Enter' && firstSearchResult) {\n      // The user has chosen the first result by pressing 'Enter' key on keyboard\n      const updatedCurrentStops = currentStops;\n      updateCurrentStops[focusedFieldIndex] = firstSearchResult.properties.name;\n      const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n      updatedCurrentStopsGeoJSON[focusedFieldIndex] = firstSearchResult;\n      dispatch(setCurrentStops(updatedCurrentStops));\n      setCurrentSearchResults([]);\n      dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    }\n    if (event.key === 'Backspace') {\n      // The user has erased some of the search query. Reset everything and start all over.\n      let updateCurrentSearchResults = [];\n      if (event.target.value) updateCurrentSearchResults = currentSearchResults;\n      const updatedCurrentStopsGeoJSON = {};\n      Object.keys(currentStopsGeoJSON).forEach(key => {\n        if (key !== focusedFieldIndex.toString()) {\n          updatedCurrentStopsGeoJSON[key] = currentStopsGeoJSON[key];\n        }\n      });\n      setCurrentSearchResults(updateCurrentSearchResults);\n      dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    }\n  };\n\n  /**\n   * The user uses the mouse/touch to select one of the search results.\n   * @param searchResult The clicked search result.\n   * @category RoutingMenu\n   */\n  const processClickedResultHandler = searchResult => {\n    const updatedCurrentStops = currentStops;\n    updatedCurrentStops[focusedFieldIndex] = searchResult.properties.name;\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    updatedCurrentStopsGeoJSON[focusedFieldIndex] = searchResult;\n    dispatch(setCurrentStops(updatedCurrentStops));\n    setCurrentSearchResults([]);\n\n    Object.keys(updatedCurrentStopsGeoJSON).forEach(key => {\n      if (key === focusedFieldIndex.toString()) {\n        updatedCurrentStopsGeoJSON[key].geometry.coordinates = to3857(\n          updatedCurrentStopsGeoJSON[key].geometry.coordinates,\n        );\n      }\n    });\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  const changeCurrentOtherMot = evt => {\n    if (!evt) {\n      setCurrentOtherMot(null);\n    } else {\n      const { value } = evt.target;\n      handleMotChange({}, value);\n      setCurrentOtherMot(value);\n    }\n  };\n\n  const getItemStyle = (isDragging, draggableStyle) => ({\n    userSelect: 'none',\n    background: isDragging ? '#ededed' : 'white',\n    ...draggableStyle,\n  });\n\n  const onDragEnd = result => {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const updatedCurrentStops = _.clone(currentStops);\n    const [removed] = updatedCurrentStops.splice(result.source.index, 1);\n    updatedCurrentStops.splice(result.destination.index, 0, removed);\n\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n\n    const newSource = { ...updatedCurrentStopsGeoJSON[result.source.index] };\n    if (result.destination.index < result.source.index) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON)\n        .filter(k => {\n          return (\n            parseInt(k, 10) >= result.destination.index &&\n            parseInt(k, 10) < result.source.index\n          );\n        })\n        .reverse();\n      keys.forEach(k => {\n        updatedCurrentStopsGeoJSON[`${parseInt(k, 10) + 1}`] =\n          updatedCurrentStopsGeoJSON[k];\n      });\n      updatedCurrentStopsGeoJSON[result.destination.index] = newSource;\n    } else if (result.destination.index > result.source.index) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON).filter(\n        k =>\n          parseInt(k, 10) >= result.source.index &&\n          parseInt(k, 10) <= result.destination.index,\n      );\n      keys.forEach(k => {\n        if (parseInt(k, 10) === result.destination.index) {\n          updatedCurrentStopsGeoJSON[result.destination.index] = newSource;\n        } else {\n          updatedCurrentStopsGeoJSON[k] =\n            updatedCurrentStopsGeoJSON[`${parseInt(k, 10) + 1}`];\n        }\n      });\n    }\n\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * Render the component to the dom.\n   * @category RoutingMenu\n   */\n\n  if (!onZoomRouteClick || !onPanViaClick) {\n    return null;\n  }\n  return (\n    <div className=\"rd-routing-menu\">\n      <Paper square elevation={3}>\n        <div className=\"rd-routing-menu-header\">\n          <Tabs\n            value={DEFAULT_MOTS.includes(currentMot) ? currentMot : false}\n            className={classes.tabs}\n            onChange={(e, mot) => {\n              handleMotChange(e, mot);\n            }}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            aria-label=\"mots icons\"\n          >\n            {currentMots.map(singleMot => {\n              return (\n                <Tab\n                  className={classes.tab}\n                  key={`mot-${singleMot.name}`}\n                  value={singleMot.name}\n                  icon={singleMot.icon}\n                  aria-label={singleMot.name}\n                />\n              );\n            })}\n          </Tabs>\n          <FormControl className={classes.dropDown}>\n            <Select\n              renderValue={val => (val !== '' ? val : 'Other MOTs')}\n              className={classes.select}\n              classes={{ root: classes.selectInput }}\n              labelId=\"rd-other-mot-label\"\n              value={currentOtherMot || ''}\n              disableUnderline={!currentOtherMot}\n              displayEmpty\n              onChange={changeCurrentOtherMot}\n            >\n              {otherMots.map(mot => {\n                return (\n                  <MenuItem value={mot.name} key={`other-mot-${mot.name}`}>\n                    {mot.name}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </div>\n        <TabPanel>\n          <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"droppable\">\n              {provided => (\n                <div\n                  className=\"stopsContainer\"\n                  // eslint-disable-next-line react/jsx-props-no-spreading\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                  style={{\n                    background: 'white',\n                  }}\n                >\n                  {currentStops.map((item, index) => (\n                    <Draggable\n                      // eslint-disable-next-line react/no-array-index-key\n                      key={`searchField-${index}`}\n                      draggableId={`searchField-${index}`}\n                      index={index}\n                    >\n                      {(prov, snpsht) => (\n                        <div\n                          ref={prov.innerRef}\n                          // eslint-disable-next-line react/jsx-props-no-spreading\n                          {...prov.draggableProps}\n                          // eslint-disable-next-line react/jsx-props-no-spreading\n                          {...prov.dragHandleProps}\n                          style={getItemStyle(\n                            snpsht.isDragging,\n                            prov.draggableProps.style,\n                          )}\n                        >\n                          <SearchField\n                            // eslint-disable-next-line react/no-array-index-key\n                            key={`searchField-${index}`}\n                            index={index}\n                            inputReference={elRefs.current[index]}\n                            addNewSearchFieldHandler={addNewSearchFieldHandler}\n                            currentStops={currentStops}\n                            removeSearchFieldHandler={removeSearchFieldHandler}\n                            searchStopsHandler={searchStopsHandler}\n                            singleStop={item}\n                            processHighlightedResultSelectHandler={\n                              processHighlightedResultSelectHandler\n                            }\n                            onFieldFocusHandler={onFieldFocusHandler}\n                            onPanViaClick={onPanViaClick}\n                          />\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n          <div className=\"rd-mot-checkbox\">\n            <Checkbox\n              className={classes.checkbox}\n              checked={searchMotOnly}\n              onChange={() => {\n                setSearchMotOnly(!searchMotOnly);\n                retriggerSearch(lastChangedFieldIdx);\n              }}\n              color=\"primary\"\n              inputProps={{ 'aria-label': 'use only mot' }}\n            />\n            <span>Search only selected mode of transport</span>\n          </div>\n          <div className=\"rd-route-buttons\">\n            <Grid item xs={6}>\n              <Tooltip title=\"Zoom to the route\">\n                <Button\n                  onClick={() => onZoomRouteClick()}\n                  aria-label=\"Zoom to the route\"\n                  disabled={!isActiveRoute}\n                  variant=\"contained\"\n                  color=\"default\"\n                  classes={{\n                    root: 'rd-button-root',\n                    disabled: 'rd-button-disabled',\n                  }}\n                  startIcon={<ZoomInIcon fontSize=\"small\" />}\n                >\n                  <Typography>Zoom to the route</Typography>\n                </Button>\n              </Tooltip>\n            </Grid>\n            <Grid item xs={6}>\n              <Tooltip title=\"Route information\">\n                <Button\n                  onClick={() => {\n                    dispatch(setIsRouteInfoOpen(!isRouteInfoOpen));\n                  }}\n                  aria-label=\"Route information\"\n                  disabled={!isActiveRoute}\n                  variant=\"contained\"\n                  color=\"default\"\n                  className={isRouteInfoOpen ? 'rd-button-active' : ''}\n                  classes={{\n                    root: 'rd-button-root',\n                    disabled: 'rd-button-disabled',\n                  }}\n                  startIcon={<InfoIcon fontSize=\"small\" />}\n                >\n                  <Typography>Route information</Typography>\n                </Button>\n              </Tooltip>\n            </Grid>\n          </div>\n        </TabPanel>\n        {showLoadingBar ? <LinearProgress /> : null}\n      </Paper>\n      <SearchResults\n        currentSearchResults={currentSearchResults}\n        processClickedResultHandler={processClickedResultHandler}\n      />\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node.isRequired,\n  value: PropTypes.string,\n  index: PropTypes.number,\n};\n\nTabPanel.defaultProps = {\n  value: null,\n  index: null,\n};\n\nRoutingMenu.propTypes = {\n  mots: PropTypes.arrayOf(PropTypes.string).isRequired,\n  APIKey: PropTypes.string.isRequired,\n  stationSearchUrl: PropTypes.string.isRequired,\n  isActiveRoute: PropTypes.bool.isRequired,\n  onZoomRouteClick: PropTypes.func,\n  onPanViaClick: PropTypes.func,\n};\n\nRoutingMenu.defaultProps = {\n  onZoomRouteClick: undefined,\n  onPanViaClick: undefined,\n};\n\nexport default RoutingMenu;\n","import RoutingMenu from './RoutingMenu';\n\nexport default RoutingMenu;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Feature } from 'ol';\nimport { getLength } from 'ol/sphere';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport nearestPointOnLine from '@turf/nearest-point-on-line';\nimport combine from '@turf/combine';\nimport { Point, GeometryCollection } from 'ol/geom';\nimport Dialog from '@geops/react-ui/components/Dialog';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Label,\n  Tooltip,\n  ReferenceDot,\n  ReferenceLine,\n} from 'recharts';\nimport { setIsRouteInfoOpen, setDialogPosition } from '../../store/actions/Map';\nimport './RouteInfosDialog.scss';\n\nconst propTypes = {\n  routes: PropTypes.arrayOf(PropTypes.instanceOf(Feature)).isRequired,\n  hoveredCoords: PropTypes.arrayOf(PropTypes.number),\n  onHighlightPoint: PropTypes.func.isRequired,\n  clearHighlightPoint: PropTypes.func.isRequired,\n};\n\nconst defaultProps = {\n  hoveredCoords: null,\n};\n\nconst tickFormatter = (length, isMeter) => {\n  let output;\n  if (!isMeter) {\n    output = `${Math.round((length / 1000) * 100) / 100}`;\n  } else {\n    output = `${Math.round(length * 100) / 100}`;\n  }\n  return output;\n};\n\nconst everyNth = (arr, interval, start) => {\n  const result = [];\n  for (let i = start || 0; i < arr.length; i += interval || 1) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\nconst getTooltipX = (dist, length) => {\n  const xPosition = (dist / length) * 300;\n  return xPosition >= 80 ? xPosition : 80;\n};\n\nconst getTooltipY = (alt, maxAlt) => {\n  return alt / maxAlt > 0.5 ? 110 : 20;\n};\n\nfunction RouteInfosDialog({\n  routes,\n  hoveredCoords,\n  onHighlightPoint,\n  clearHighlightPoint,\n}) {\n  const dispatch = useDispatch();\n  const [hoveredPoint, setHoveredPoint] = useState(null);\n  const [length, setLength] = useState(null);\n  const [maxAltitude, setMaxAltitude] = useState(null);\n  const [routePoints, setRoutePoints] = useState([]);\n  const [distanceUnit, setDistanceUnit] = useState(null);\n  const [isMeter, setIsMeter] = useState(null);\n\n  const dialogPosition = useSelector(state => state.MapReducer.dialogPosition);\n\n  const onDragStop = (evt, position) => {\n    dispatch(\n      setDialogPosition({\n        x: position.lastX,\n        y: position.lastY,\n      }),\n    );\n  };\n\n  const renderPrograTooltip = (hovCoords, linePoints, routeLine) => {\n    const format = new GeoJSON();\n\n    const line = combine(\n      format.writeFeaturesObject(routeLine, {\n        dataProjection: 'EPSG:4326',\n        featureProjection: 'EPSG:3857',\n      }),\n    ).features[0];\n\n    const hoveredFeat = new Feature({\n      geometry: new Point(hovCoords),\n    });\n    const pt = format.writeFeatureObject(hoveredFeat, {\n      dataProjection: 'EPSG:4326',\n      featureProjection: 'EPSG:3857',\n    });\n\n    const turfClosestPt = nearestPointOnLine(line, pt);\n    const lineCoordinates = line.geometry.coordinates;\n    const nearestPts = lineCoordinates.map(coords => {\n      return coords[turfClosestPt.properties.index];\n    });\n    const nearestPt = nearestPts.reduce((prev, curr) => {\n      const goal = turfClosestPt.geometry.coordinates[0];\n      if (!prev) {\n        return curr;\n      }\n      return curr && prev && Math.abs(curr[0] - goal) < Math.abs(prev[0] - goal)\n        ? curr\n        : prev;\n    });\n\n    const hoveredLineIdx = nearestPts.indexOf(nearestPt);\n    // Turf only return the index within the closest feature.\n    // We need to add the length of each preceding feature to have the correct index.\n    let nearestPtIndex = turfClosestPt.properties.index;\n    for (let i = 0; i < hoveredLineIdx; i += 1) {\n      nearestPtIndex += lineCoordinates[i].length;\n    }\n\n    const point = linePoints[nearestPtIndex];\n    setHoveredPoint(point);\n\n    if (!point) {\n      return null;\n    }\n    return (\n      <div className=\"rd-tootip-wrapper\">\n        <div>altitude: {point.alt} m</div>\n        <div>\n          distance: {tickFormatter(point.distance, isMeter)}\n          {isMeter ? ' m' : ' km'}\n        </div>\n      </div>\n    );\n  };\n\n  const renderTooltip = tooltipProps => {\n    if (hoveredPoint) {\n      setHoveredPoint(null);\n    }\n    if (!tooltipProps.payload.length) {\n      return;\n    }\n    const { xVal, yVal, alt, distance } = tooltipProps.payload[0].payload;\n\n    onHighlightPoint([xVal, yVal]);\n    // eslint-disable-next-line consistent-return\n    return (\n      <div className=\"rd-tootip-wrapper\">\n        <div>altitude: {alt} m</div>\n        <div>\n          distance: {tickFormatter(distance, isMeter)}\n          {isMeter ? ' m' : ' km'}\n        </div>\n      </div>\n    );\n  };\n\n  useEffect(() => {\n    const pointArray = [];\n    const coords = [].concat(\n      ...routes.map(r => r.getGeometry().getFlatCoordinates()),\n    );\n\n    const collec = new GeometryCollection(routes.map(r => r.getGeometry()));\n    const lgth = getLength(collec);\n    setLength(lgth);\n    setDistanceUnit(lgth > 1000 ? 'km' : 'm');\n    setIsMeter(distanceUnit === 'm');\n\n    const xArray = everyNth(coords, 3, 0);\n    const yArray = everyNth(coords, 3, 1);\n    const altitudesArray = everyNth(coords, 3, 2);\n    setMaxAltitude(Math.max(...altitudesArray));\n\n    altitudesArray.forEach((alt, idx) => {\n      pointArray.push({\n        alt,\n        xVal: xArray[idx],\n        yVal: yArray[idx],\n        distance: lgth * (idx / (altitudesArray.length - 1)),\n      });\n    });\n\n    setRoutePoints(pointArray);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [routes]);\n\n  return (\n    <Dialog\n      isOpen\n      title={<span>Route information</span>}\n      isDraggable\n      onDragStop={onDragStop}\n      className=\"rd-dialog-container\"\n      classNameHeader=\"rd-dialog-header\"\n      classNameCloseBt=\"rd-dialog-close-bt\"\n      cancelDraggable=\".tm-dialog-body\"\n      position={dialogPosition}\n      onClose={() => dispatch(setIsRouteInfoOpen(false))}\n    >\n      <LineChart\n        width={450}\n        height={220}\n        data={routePoints}\n        onMouseLeave={clearHighlightPoint}\n      >\n        <YAxis axisLine={false} tickLine={false}>\n          <Label value=\"m\" offset={10} position=\"top\" />\n        </YAxis>\n        <XAxis\n          type=\"number\"\n          dataKey=\"distance\"\n          tickFormatter={dist => tickFormatter(dist, isMeter)}\n        >\n          <Label value={distanceUnit} offset={10} position=\"right\" />\n        </XAxis>\n        <CartesianGrid vertical={false} />\n        <Line\n          type=\"monotone\"\n          dataKey=\"alt\"\n          dot={false}\n          stroke=\"#3f51b5\"\n          strokeWidth={2}\n        />\n        {hoveredCoords && hoveredPoint && (\n          <ReferenceLine x={hoveredPoint.distance} stroke=\"lightgrey\" />\n        )}\n        {hoveredCoords && hoveredPoint && (\n          <ReferenceDot\n            r={4}\n            x={hoveredPoint.distance}\n            y={hoveredPoint.alt}\n            fill=\"#3f51b5\"\n            stroke=\"white\"\n          />\n        )}\n        <Tooltip\n          cursor={hoveredPoint ? true : 'auto'}\n          position={\n            hoveredPoint\n              ? {\n                  x: getTooltipX(hoveredPoint.distance, length),\n                  y: getTooltipY(hoveredPoint.alt, maxAltitude),\n                }\n              : 'auto'\n          }\n          content={content =>\n            hoveredCoords\n              ? renderPrograTooltip(hoveredCoords, routePoints, routes)\n              : renderTooltip(content)\n          }\n        />\n      </LineChart>\n    </Dialog>\n  );\n}\n\nRouteInfosDialog.propTypes = propTypes;\nRouteInfosDialog.defaultProps = defaultProps;\n\nexport default React.memo(RouteInfosDialog);\n","import RouteInfosDialog from './RouteInfosDialog';\n\nexport default RouteInfosDialog;\n","import { Style, Circle, Stroke, Fill } from 'ol/style';\n\nconst lineStyler = lineStyle => {\n  return lineStyle.map(\n    style =>\n      new Style({\n        stroke: new Stroke({\n          color: style[0],\n          width: style[1],\n          lineDash: style[2],\n        }),\n      }),\n  );\n};\n\nconst railLineStyle = lineStyler([\n  ['darkred', 6],\n  ['red', 3],\n]);\n\nconst railLineHoveredStyle = lineStyler([\n  ['darkred', 7],\n  ['red', 4],\n]);\n\nconst busLineStyle = lineStyler([\n  ['rgb(153,153,0)', 6],\n  ['yellow', 3],\n]);\n\nconst busLineHoveredStyle = lineStyler([\n  ['rgb(153,153,0)', 7],\n  ['yellow', 4],\n]);\n\nconst pedestrianLineStyle = lineStyler([\n  ['rgb(96, 186, 219)', 6],\n  ['rgb(173, 216, 230)', 3],\n]);\n\nconst pedestrianLineHoveredStyle = lineStyler([\n  ['rgb(96, 186, 219)', 7],\n  ['rgb(173, 216, 230)', 4],\n]);\n\nconst carLineStyle = lineStyler([\n  ['grey', 6],\n  ['darkgrey', 3],\n]);\n\nconst carLineHoveredStyle = lineStyler([\n  ['grey', 7],\n  ['darkgrey', 4],\n]);\n\nconst othersLineStyle = lineStyler([\n  ['darkblue', 6],\n  ['blue', 3],\n]);\n\nconst othersLineHoveredStyle = lineStyler([\n  ['darkblue', 7],\n  ['blue', 4],\n]);\n\nconst railPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'red' }),\n    stroke: new Stroke({ color: 'darkred', width: 2 }),\n  }),\n});\n\nconst pedestrianPointStyle = new Style({\n  image: new Circle({\n    radius: 3,\n    fill: new Fill({ color: 'rgb(173, 216, 230)' }),\n    stroke: new Stroke({ color: 'rgb(96, 186, 219)', width: 2 }),\n  }),\n});\n\nconst carPointStyle = new Style({\n  image: new Circle({\n    radius: 3,\n    fill: new Fill({ color: 'darkgrey' }),\n    stroke: new Stroke({ color: 'grey', width: 2 }),\n  }),\n});\n\nconst busPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'yellow' }),\n    stroke: new Stroke({ color: 'rgb(153,153,0)', width: 2 }),\n  }),\n});\n\nconst othersPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'blue' }),\n    stroke: new Stroke({ color: 'darkblue', width: 2 }),\n  }),\n});\n\nconst pointStyleFunction = mot => {\n  if (mot === 'rail') {\n    return railPointStyle;\n  }\n  if (mot === 'bus') {\n    return busPointStyle;\n  }\n  if (mot === 'foot') {\n    return pedestrianPointStyle;\n  }\n  if (mot === 'car') {\n    return carPointStyle;\n  }\n  return othersPointStyle;\n};\n\nconst lineStyleFunction = (mot, isHovered) => {\n  if (mot === 'rail') {\n    return isHovered ? railLineHoveredStyle : railLineStyle;\n  }\n  if (mot === 'bus') {\n    return isHovered ? busLineHoveredStyle : busLineStyle;\n  }\n  if (mot === 'foot') {\n    return isHovered ? pedestrianLineHoveredStyle : pedestrianLineStyle;\n  }\n  if (mot === 'car') {\n    return isHovered ? carLineHoveredStyle : carLineStyle;\n  }\n  return isHovered ? othersLineHoveredStyle : othersLineStyle;\n};\n\nexport { lineStyleFunction, pointStyleFunction };\n","import React, { Component, createRef } from 'react';\nimport { connect } from 'react-redux';\nimport ConfigReader from 'react-spatial/ConfigReader';\nimport LayerService from 'react-spatial/LayerService';\nimport Layer from 'react-spatial/layers/Layer';\nimport BasicMap from 'react-spatial/components/BasicMap';\nimport { Map, Feature } from 'ol';\nimport { Vector as VectorLayer } from 'ol/layer';\nimport _ from 'lodash/core';\nimport { Point } from 'ol/geom';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { Vector as VectorSource } from 'ol/source';\nimport {\n  defaults as defaultInteractions,\n  Translate,\n  Modify,\n} from 'ol/interaction';\nimport PropTypes from 'prop-types';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport RoutingMenu from '../RoutingMenu';\nimport RouteInfosDialog from '../RouteInfosDialog';\nimport {\n  lineStyleFunction,\n  pointStyleFunction,\n} from '../../config/styleConfig';\nimport {\n  propTypeCoordinates,\n  propTypeCurrentStops,\n  propTypeCurrentStopsGeoJSON,\n} from '../../store/prop-types';\nimport { GRAPHHOPPER_MOTS } from '../../constants';\nimport { to4326 } from '../../utils';\nimport './MapComponent.scss';\nimport * as actions from '../../store/actions';\n\n/**\n * The map props\n * @typedef MapComponentProps\n * @type {props}\n * @property {string} APIKey key obtained from geOps that enables you to used the previous API services.\n * @property {string} routingUrl The API routing url to be used for navigation.\n * @property {string} currentMot The current selected mot by user, example 'bus'.\n * @property {Object} currentStopsGeoJSON The current stops defined by user in geojson format inside a dictionary, key is the stop index(order) and the value is the geoJSON itself.\n * @property {function} onShowNotification A store action that can be dispatched, takes the notification message and type as arguments.\n * @property {function} onSetClickLocation A store action that can be dispatched, takes the clicked location on map array of [long,lat] and stores it in the store.\n * @category Props\n */\n\nlet abortController = new AbortController();\nconst zoom = 6;\n\n/**\n * The only true map that shows inside the application.\n * @category Map\n */\nclass MapComponent extends Component {\n  static getExtentCenter = extent => {\n    const X = extent[0] + (extent[2] - extent[0]) / 2;\n    const Y = extent[1] + (extent[3] - extent[1]) / 2;\n    return [X, Y];\n  };\n\n  static indexInGeom = (lineGeom, point) => {\n    const firstBreakIdx = lineGeom.indexOf(point[0]);\n    const secondBreakIdx = lineGeom.indexOf(point[1]);\n\n    return firstBreakIdx === secondBreakIdx - 1;\n  };\n\n  /**\n   * Default constructor, gets called automatically upon initialization.\n   * @param {...MapComponentProps} props Props received so that the component can function properly.\n   * @category Map\n   */\n  constructor(props) {\n    super(props);\n    const { APIKey, onSetClickLocation, olMap } = this.props;\n    this.map = olMap;\n    this.mapRef = createRef();\n    this.hoveredFeature = null;\n    this.hoveredRoute = null;\n    this.initialRouteDrag = null;\n    this.state = {\n      hoveredStationOpen: false,\n      hoveredStationName: '',\n      isActiveRoute: false,\n      hoveredPoint: null,\n    };\n\n    this.onHighlightPoint = this.onHighlightPoint.bind(this);\n\n    this.projection = 'EPSG:3857';\n\n    const layerService = new LayerService(\n      ConfigReader.readConfig([\n        {\n          name: 'Basemap',\n          visible: true,\n          isBaseLayer: true,\n          data: {\n            type: 'mapbox',\n            url: `https://maps.geops.io/styles/travic/style.json?key=${APIKey}`,\n          },\n        },\n      ]),\n    );\n\n    // Define route vectorLayer.\n    this.routeVectorSource = new VectorSource({\n      features: [],\n    });\n    layerService.addLayer(\n      new Layer({\n        key: 'routeLayer',\n        name: 'routeLayer',\n        olLayer: new VectorLayer({\n          zIndex: 1,\n          source: this.routeVectorSource,\n        }),\n      }),\n    );\n\n    // Define highlight vectorLayer.\n    this.highlightVectorSource = new VectorSource({});\n    layerService.addLayer(\n      new Layer({\n        key: 'highlightLayer',\n        name: 'highlightLayer',\n        olLayer: new VectorLayer({\n          zIndex: 1,\n          source: this.highlightVectorSource,\n        }),\n      }),\n    );\n\n    // Define stop vectorLayer.\n    this.markerVectorSource = new VectorSource({});\n    layerService.addLayer(\n      new Layer({\n        key: 'markerLayer',\n        name: 'markerLayer',\n        olLayer: new VectorLayer({\n          zIndex: 1,\n          source: this.markerVectorSource,\n        }),\n      }),\n    );\n\n    this.markerVectorLayer = layerService.getLayer('markerLayer');\n    this.routeVectorLayer = layerService.getLayer('routeLayer');\n    this.layers = [...layerService.getLayers()];\n\n    const translate = new Translate({\n      layers: [this.markerVectorLayer.olLayer],\n      hitTolerance: 3,\n    });\n\n    translate.on('translateend', evt => {\n      const {\n        currentStops,\n        currentStopsGeoJSON,\n        onSetCurrentStops,\n        onSetCurrentStopsGeoJSON,\n      } = this.props;\n      const newCurrentStops = _.clone(currentStops);\n      const newCurentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n\n      const { name, id } = evt.features.getArray()[0].getProperties();\n      let featureIndex;\n      if (name) {\n        featureIndex = currentStops.indexOf(name);\n      } else {\n        const isCoordPresent = el => {\n          if (!Array.isArray(el)) {\n            return false;\n          }\n          const coords = id.slice().reverse();\n          return el[0] === coords[0] && el[1] === coords[1];\n        };\n        featureIndex = currentStops.findIndex(isCoordPresent);\n      }\n      newCurrentStops[featureIndex] = evt.coordinate;\n      newCurentStopsGeoJSON[featureIndex] = {\n        type: 'FeatureCollection',\n        features: [\n          {\n            type: 'Feature',\n            properties: {\n              id: evt.coordinate.slice().reverse(),\n              type: 'coordinates',\n            },\n            geometry: {\n              type: 'Point',\n              coordinates: evt.coordinate,\n            },\n          },\n        ],\n      };\n      onSetCurrentStops(newCurrentStops);\n      onSetCurrentStopsGeoJSON(newCurentStopsGeoJSON);\n    });\n\n    const modify = new Modify({\n      source: this.routeVectorSource,\n      pixelTolerance: 4,\n      condition: () => {\n        const { currentMot } = this.props;\n        return !GRAPHHOPPER_MOTS.includes(currentMot);\n      },\n      style: () => {\n        const { currentMot } = this.props;\n        return pointStyleFunction(currentMot);\n      },\n    });\n\n    modify.on('modifystart', evt => {\n      // save start point to find where to add the new HOP!\n      this.initialRouteDrag = {\n        features: evt.features.getArray(),\n        coordinate: evt.mapBrowserEvent.coordinate,\n      };\n    });\n\n    modify.on('modifyend', evt => {\n      const { features } = this.initialRouteDrag;\n      const {\n        currentMot,\n        currentStops,\n        currentStopsGeoJSON,\n        onSetCurrentStops,\n        onSetCurrentStopsGeoJSON,\n      } = this.props;\n      const updatedCurrentStops = _.clone(currentStops);\n      const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n      let newHopIdx = -1;\n\n      // No drag for foot/car for now on.\n      if (!GRAPHHOPPER_MOTS.includes(currentMot)) {\n        const flatCoords = features\n          .map(f => f.getGeometry())\n          .map(lineString => {\n            return [\n              ...lineString.getFirstCoordinate(),\n              ...lineString.getLastCoordinate(),\n            ];\n          });\n\n        const closestSegment = this.routeVectorSource\n          .getClosestFeatureToCoordinate(this.initialRouteDrag.coordinate)\n          .getGeometry();\n\n        const closestEdges = [\n          ...closestSegment.getFirstCoordinate(),\n          ...closestSegment.getLastCoordinate(),\n        ];\n\n        flatCoords.forEach((segment, idx) => {\n          if (\n            segment.length === closestEdges.length &&\n            segment.every((value, index) => {\n              return value === closestEdges[index];\n            })\n          ) {\n            newHopIdx = idx + 1;\n          }\n        });\n      }\n\n      if (newHopIdx >= 0) {\n        updatedCurrentStops.splice(\n          newHopIdx,\n          0,\n          evt.mapBrowserEvent.coordinate,\n        );\n\n        if (updatedCurrentStopsGeoJSON[newHopIdx]) {\n          const keys = Object.keys(updatedCurrentStopsGeoJSON).reverse();\n          keys.forEach(k => {\n            if (parseInt(k, 10) >= newHopIdx) {\n              updatedCurrentStopsGeoJSON[`${parseInt(k, 10) + 1}`] =\n                updatedCurrentStopsGeoJSON[k];\n            }\n            if (parseInt(k, 10) === newHopIdx) {\n              updatedCurrentStopsGeoJSON[newHopIdx] = {\n                type: 'FeatureCollection',\n                features: [\n                  {\n                    type: 'Feature',\n                    properties: {\n                      id: evt.mapBrowserEvent.coordinate.slice().reverse(),\n                      type: 'coordinates',\n                    },\n                    geometry: {\n                      type: 'Point',\n                      coordinates: evt.mapBrowserEvent.coordinate,\n                    },\n                  },\n                ],\n              };\n            }\n          });\n        }\n\n        onSetCurrentStops(updatedCurrentStops);\n        onSetCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON);\n      }\n      this.initialRouteDrag = null;\n    });\n\n    const interactions = defaultInteractions().extend([translate, modify]);\n    interactions.getArray().forEach(interaction => {\n      this.map.addInteraction(interaction);\n    });\n\n    this.onZoomRouteClick = () => {\n      let featExtent;\n      if (this.routeVectorSource.getFeatures().length) {\n        featExtent = this.routeVectorSource.getExtent();\n      }\n\n      if (featExtent.filter(f => Number.isFinite(f)).length === 4) {\n        this.map.getView().fit(this.routeVectorSource.getExtent(), {\n          size: this.map.getSize(),\n          duration: 500,\n          padding: [200, 200, 200, 200],\n        });\n      }\n    };\n\n    this.onPanViaClick = (item, idx) => {\n      const { currentStopsGeoJSON } = this.props;\n      if (currentStopsGeoJSON && currentStopsGeoJSON[idx]) {\n        const featureCoord = currentStopsGeoJSON[idx].features\n          ? currentStopsGeoJSON[idx].features[0].geometry.coordinates\n          : currentStopsGeoJSON[idx].geometry.coordinates;\n\n        this.map.getView().animate({\n          center: featureCoord,\n          duration: 500,\n          padding: [100, 100, 100, 100],\n        });\n      }\n    };\n\n    this.map.on('singleclick', evt => {\n      const { isFieldFocused, currentStops } = this.props;\n      // if one field empty or if a field is focused\n      if (currentStops.includes('') || isFieldFocused) {\n        onSetClickLocation(evt.coordinate);\n      }\n    });\n    this.map.on('pointermove', evt => {\n      const { currentMot } = this.props;\n\n      if (this.hoveredFeature) {\n        this.hoveredFeature = null;\n        this.setState({ hoveredStationOpen: false, hoveredStationName: '' });\n      }\n\n      if (this.hoveredRoute) {\n        this.routeVectorLayer.olLayer.setStyle(\n          lineStyleFunction(currentMot, false),\n        );\n        this.hoveredRoute = null;\n        this.setState({\n          hoveredPoint: null,\n        });\n      }\n      const hovFeats = this.map.getFeaturesAtPixel(evt.pixel, {\n        hitTolerance: 2,\n      });\n\n      hovFeats.forEach(feature => {\n        if (feature.getGeometry().getType() === 'Point') {\n          this.hoveredFeature = feature;\n          let name = '';\n          const featCountryCode = feature.get('country_code');\n          if (feature.get('name')) {\n            name = `${feature.get('name')}${\n              featCountryCode ? ` - ${featCountryCode}` : ''\n            }`;\n          } else {\n            name = `${to4326(feature.getGeometry().flatCoordinates)}`;\n          }\n          this.setState({\n            hoveredStationOpen: true,\n            hoveredStationName: name,\n          });\n        }\n        if (feature.getGeometry().getType() === 'LineString') {\n          this.hoveredRoute = feature;\n\n          this.setState({\n            hoveredPoint: evt.coordinate,\n          });\n        }\n        return true;\n      });\n    });\n  }\n\n  /**\n   * Perform the necessary actions when receiving updated props.\n   * If new stops are received, then remove any existing stops/routes and draw those stops/routes.\n   * @category Map\n   */\n  componentDidUpdate(prevProps) {\n    const { currentStopsGeoJSON, currentMot } = this.props;\n    const currentMotChanged = currentMot && currentMot !== prevProps.currentMot;\n    const currentStopsGeoJSONChanged =\n      currentStopsGeoJSON &&\n      currentStopsGeoJSON !== prevProps.currentStopsGeoJSON;\n    if (currentMotChanged || currentStopsGeoJSONChanged) {\n      this.markerVectorSource.clear();\n      Object.keys(currentStopsGeoJSON).forEach(key => {\n        this.markerVectorSource.addFeatures(\n          new GeoJSON().readFeatures(currentStopsGeoJSON[key]),\n        );\n        this.markerVectorSource\n          .getFeatures()\n          .forEach(f => f.setStyle(pointStyleFunction(currentMot)));\n      });\n      // Remove the old route if exists\n      this.routeVectorSource.clear();\n      this.setIsActiveRoute(false);\n\n      // Draw a new route if more than 1 stop is defined\n      if (Object.keys(currentStopsGeoJSON).length > 1) {\n        this.drawNewRoute();\n      }\n    }\n  }\n\n  onMapMoved = evt => {\n    const { center, onSetCenter } = this.props;\n    const newCenter = evt.map.getView().getCenter();\n    if (center[0] !== newCenter[0] || center[1] !== newCenter[1]) {\n      onSetCenter(newCenter);\n    }\n  };\n\n  /*\n   *  Highlight a point on the route.\n   */\n  onHighlightPoint(coords) {\n    const { currentMot } = this.props;\n\n    this.highlightVectorSource.clear();\n    const feat = new Feature({\n      geometry: new Point(coords),\n    });\n    feat.setStyle(pointStyleFunction(currentMot));\n    this.highlightVectorSource.addFeatures([feat]);\n  }\n\n  onFeaturesHover(features) {\n    if (this.mapRef) {\n      this.mapRef.current.node.current.style.cursor = features.length\n        ? 'pointer'\n        : 'inherit';\n    }\n  }\n\n  setIsActiveRoute(isActiveRoute) {\n    this.setState({ isActiveRoute });\n  }\n\n  /**\n   * After receiving the updated stops, send a call to the routingAPI to find a suitable route between\n   * two points/stations, if a route is found, it's returned and drawn to the map.\n   * @category Map\n   */\n  drawNewRoute = () => {\n    const hops = [];\n    const {\n      currentStopsGeoJSON,\n      routingUrl,\n      currentMot,\n      APIKey,\n      routingElevation,\n      resolveHops,\n      onShowNotification,\n      onSetShowLoadingBar,\n      onSetSelectedRoutes,\n    } = this.props;\n\n    onSetShowLoadingBar(true);\n\n    Object.keys(currentStopsGeoJSON).forEach(key => {\n      if (currentStopsGeoJSON[key].features) {\n        // If the current item is a point selected on the map, not a station.\n        hops.push(\n          `${to4326(currentStopsGeoJSON[key].features[0].geometry.coordinates)\n            .slice()\n            .reverse()}`,\n        );\n      } else if (!GRAPHHOPPER_MOTS.includes(currentMot)) {\n        hops.push(`!${currentStopsGeoJSON[key].properties.uid}`);\n      } else {\n        hops.push(`${currentStopsGeoJSON[key].properties.name}`);\n      }\n    });\n\n    abortController.abort();\n    abortController = new AbortController();\n    const { signal } = abortController;\n\n    const reqUrl = `${routingUrl}?via=${hops.join(\n      '|',\n    )}&mot=${currentMot}&resolve-hops=${resolveHops}&key=${APIKey}&elevation=${routingElevation}&coord-radius=100.0&coord-punish=1000.0`;\n\n    fetch(reqUrl, { signal })\n      .then(response => response.json())\n      .then(response => {\n        onSetShowLoadingBar(false);\n        if (response.error) {\n          onShowNotification(\"Couldn't find route\", 'error');\n          onSetSelectedRoutes([]);\n          return;\n        }\n        // A route was found, prepare to draw it.\n        this.routeVectorSource.clear();\n        const format = new GeoJSON({\n          dataProjection: 'EPSG:4326',\n          featureProjection: 'EPSG:3857',\n        });\n        this.routeVectorSource.addFeatures(format.readFeatures(response));\n        this.setIsActiveRoute(!!this.routeVectorSource.getFeatures().length);\n        onSetSelectedRoutes(this.routeVectorSource.getFeatures());\n        this.routeVectorLayer.olLayer.setStyle(\n          lineStyleFunction(currentMot, false),\n        );\n      })\n      .catch(err => {\n        if (err.name === 'AbortError') {\n          // eslint-disable-next-line no-console\n          console.warn(`Abort ${reqUrl}`);\n          return;\n        }\n        onSetShowLoadingBar(false);\n        onSetSelectedRoutes([]);\n        // It's important to rethrow all other errors so you don't silence them!\n        // For example, any error thrown by setState(), will pass through here.\n        throw err;\n      });\n  };\n\n  /**\n   * Render the map component to the dom\n   * @category Map\n   */\n  render() {\n    const {\n      center,\n      mots,\n      APIKey,\n      selectedRoutes,\n      isRouteInfoOpen,\n      stationSearchUrl,\n    } = this.props;\n\n    const {\n      isActiveRoute,\n      hoveredPoint,\n      hoveredStationOpen,\n      hoveredStationName,\n    } = this.state;\n\n    return (\n      <>\n        <RoutingMenu\n          mots={mots}\n          stationSearchUrl={stationSearchUrl}\n          isActiveRoute={isActiveRoute}\n          onZoomRouteClick={this.onZoomRouteClick}\n          onPanViaClick={this.onPanViaClick}\n          APIKey={APIKey}\n        />\n        <Snackbar\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          open={hoveredStationOpen}\n          message={hoveredStationName}\n        />\n        <BasicMap\n          ref={this.mapRef}\n          center={center}\n          layers={this.layers}\n          onMapMoved={evt => this.onMapMoved(evt)}\n          onFeaturesHover={evt => this.onFeaturesHover(evt)}\n          zoom={zoom}\n          tabIndex={null}\n          map={this.map}\n          viewOptions={{\n            projection: this.projection,\n          }}\n        />\n        {isRouteInfoOpen && selectedRoutes.length ? (\n          <RouteInfosDialog\n            routes={selectedRoutes}\n            hoveredCoords={hoveredPoint}\n            onHighlightPoint={this.onHighlightPoint}\n            clearHighlightPoint={() => {\n              this.highlightVectorSource.clear();\n            }}\n          />\n        ) : null}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    center: state.MapReducer.center,\n    selectedRoutes: state.MapReducer.selectedRoutes,\n    isRouteInfoOpen: state.MapReducer.isRouteInfoOpen,\n    currentMot: state.MapReducer.currentMot,\n    currentStops: state.MapReducer.currentStops,\n    currentStopsGeoJSON: state.MapReducer.currentStopsGeoJSON,\n    isFieldFocused: state.MapReducer.isFieldFocused,\n    routingElevation: state.MapReducer.routingElevation,\n    resolveHops: state.MapReducer.resolveHops,\n    olMap: state.MapReducer.olMap,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetCenter: center => dispatch(actions.setCenter(center)),\n    onSetCurrentStops: currentStops =>\n      dispatch(actions.setCurrentStops(currentStops)),\n    onSetCurrentStopsGeoJSON: currentStopsGeoJSON =>\n      dispatch(actions.setCurrentStopsGeoJSON(currentStopsGeoJSON)),\n    onSetClickLocation: clickLocation =>\n      dispatch(actions.setClickLocation(clickLocation)),\n    onShowNotification: (notificationMessage, notificationType) =>\n      dispatch(actions.showNotification(notificationMessage, notificationType)),\n    onSetShowLoadingBar: showLoadingBar =>\n      dispatch(actions.setShowLoadingBar(showLoadingBar)),\n    onSetSelectedRoutes: selectedRoutes =>\n      dispatch(actions.setSelectedRoutes(selectedRoutes)),\n  };\n};\n\nMapComponent.propTypes = {\n  center: propTypeCoordinates.isRequired,\n  selectedRoutes: PropTypes.arrayOf(PropTypes.instanceOf(Feature)).isRequired,\n  isRouteInfoOpen: PropTypes.bool.isRequired,\n  mots: PropTypes.arrayOf(PropTypes.string).isRequired,\n  APIKey: PropTypes.string.isRequired,\n  stationSearchUrl: PropTypes.string.isRequired,\n  onSetCenter: PropTypes.func.isRequired,\n  onSetClickLocation: PropTypes.func.isRequired,\n  onShowNotification: PropTypes.func.isRequired,\n  onSetShowLoadingBar: PropTypes.func.isRequired,\n  onSetSelectedRoutes: PropTypes.func.isRequired,\n  onSetCurrentStops: PropTypes.func.isRequired,\n  onSetCurrentStopsGeoJSON: PropTypes.func.isRequired,\n  currentStops: propTypeCurrentStops.isRequired,\n  currentStopsGeoJSON: propTypeCurrentStopsGeoJSON.isRequired,\n  isFieldFocused: PropTypes.bool.isRequired,\n  routingUrl: PropTypes.string.isRequired,\n  currentMot: PropTypes.string.isRequired,\n  routingElevation: PropTypes.number.isRequired,\n  resolveHops: PropTypes.bool.isRequired,\n  olMap: PropTypes.instanceOf(Map).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MapComponent);\n","import MapComponent from './MapComponent';\n\nexport default MapComponent;\n","/* eslint-disable no-restricted-globals */\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport RSPermalink from 'react-spatial/components/Permalink';\nimport qs from 'query-string';\nimport { to4326, to3857 } from '../../utils';\nimport {\n  setCurrentStops,\n  setCurrentStopsGeoJSON,\n  setCurrentMot,\n  setCenter,\n  setRoutingElevation,\n  setResolveHops,\n} from '../../store/actions/Map';\n\nconst abortController = new AbortController();\nconst { signal } = abortController;\n\nconst validateUrlCoordinates = coordArray => {\n  /* Check if the x and y values are xy-coordinates */\n  if (\n    isFinite(coordArray[1]) &&\n    Math.abs(coordArray[1]) <= 90 &&\n    isFinite(coordArray[0]) &&\n    Math.abs(coordArray[0]) <= 180\n  ) {\n    return true;\n  }\n  return false;\n};\n\nconst getGeoJson = (viaString, APIKey, stationSearchUrl) => {\n  /* When the via is a pair of coordinates */\n  if (viaString.split(',').length > 1) {\n    let geoJson;\n    const coordArray = viaString\n      .split(',')\n      .filter(val => !isNaN(val))\n      .map(string => parseFloat(string));\n    if (coordArray.length === 2 && validateUrlCoordinates(coordArray)) {\n      /* Convert coordinates to 3857 */\n      const coords3857 = to3857(coordArray);\n      geoJson = {\n        type: 'FeatureCollection',\n        features: [\n          {\n            type: 'Feature',\n            properties: {\n              id: coords3857,\n              type: 'coordinates',\n            },\n            geometry: {\n              type: 'Point',\n              coordinates: coords3857,\n            },\n          },\n        ],\n      };\n    }\n    return Promise.resolve(geoJson);\n  }\n  let reqUrl;\n\n  /* When the via is a UID */\n  if (/^![a-zA-Z0-9]{16}$/.test(viaString)) {\n    reqUrl = `${stationSearchUrl}lookup/${viaString.replace(\n      '!',\n      '',\n    )}/?key=${APIKey}`;\n  } else {\n    /* search for the station. Remove ! in case it's an IBNR */\n    reqUrl = `${stationSearchUrl}?q=${viaString.replace(\n      '!',\n      '',\n    )}&key=${APIKey}`;\n  }\n\n  return fetch(reqUrl, { signal })\n    .then(response => response.json())\n    .then(response => {\n      /* Convert coordinates to 3857 */\n      const feature = response.features[0];\n      feature.geometry.coordinates = to3857(\n        response.features[0].geometry.coordinates,\n      );\n      return feature;\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.error('Failed to fetch geoJson');\n      return null;\n    });\n};\n\nconst compileViaString = currentStopsGeoJson => {\n  if (!currentStopsGeoJson || Object.keys(currentStopsGeoJson).length < 2) {\n    return null;\n  }\n\n  const uidStrings = Object.keys(currentStopsGeoJson).map(key => {\n    if (currentStopsGeoJson[key].features) {\n      return `${to4326(\n        currentStopsGeoJson[key].features[0].geometry.coordinates,\n      )}`;\n    }\n    return `!${currentStopsGeoJson[key].properties.uid}`;\n  });\n  return uidStrings.join('|');\n};\n\nfunction Permalink({ mots, APIKey, stationSearchUrl }) {\n  const dispatch = useDispatch();\n  const urlSearch = qs.parse(window.location.search);\n  const center = useSelector(state => state.MapReducer.center);\n  const appState = useSelector(state => state.MapReducer);\n  const currentMot = useSelector(state => state.MapReducer.currentMot);\n  const currentStops = useSelector(state => state.MapReducer.currentStops);\n  const currentStopsGeoJSON = useSelector(\n    state => state.MapReducer.currentStopsGeoJSON,\n  );\n  const routingElevation = useSelector(\n    state => state.MapReducer.routingElevation,\n  );\n  const resolveHops = useSelector(state => state.MapReducer.resolveHops);\n  const map = appState.olMap;\n  const [params, setParams] = useState({});\n\n  /* Configure app on load using url params */\n  useEffect(() => {\n    const newParams = {};\n    if (urlSearch) {\n      if (urlSearch.z && !isNaN(parseFloat(urlSearch.z))) {\n        // Set zoom if defined\n        map.getView().setZoom(urlSearch.z);\n      }\n      if (\n        urlSearch.x &&\n        !isNaN(parseFloat(urlSearch.x)) &&\n        urlSearch.y &&\n        !isNaN(parseFloat(urlSearch.y))\n      ) {\n        // Set center if defined\n        dispatch(setCenter([parseFloat(urlSearch.x), parseFloat(urlSearch.y)]));\n      }\n\n      if (urlSearch.mot) {\n        // Set current mot if defined\n        const newMot = mots.find(mot => mot === urlSearch.mot) || mots[0];\n        newParams.mot = newMot;\n        dispatch(setCurrentMot(newMot));\n      }\n\n      if (urlSearch.via) {\n        // Set via stations if defined\n        newParams.via = urlSearch.via;\n        const viaArray = urlSearch.via.split('|');\n        const geoJsonArray = viaArray.map(viaString =>\n          getGeoJson(viaString, APIKey, stationSearchUrl),\n        );\n        Promise.all(geoJsonArray).then(values => {\n          dispatch(\n            setCurrentStops(\n              values.map(stop => {\n                if (!stop) {\n                  return '';\n                }\n                if (stop.type === 'FeatureCollection') {\n                  return stop.features[0].geometry.coordinates;\n                }\n                return stop.properties.name;\n              }),\n            ),\n          );\n          const geoJsonObject = {};\n          values\n            .filter(stop => !!stop)\n            // eslint-disable-next-line no-return-assign\n            .forEach((stop, idx) => (geoJsonObject[`${idx}`] = stop));\n          dispatch(setCurrentStopsGeoJSON(geoJsonObject));\n        });\n      }\n\n      if (urlSearch.elevation) {\n        // Set elevation if defined\n        dispatch(setRoutingElevation(parseInt(urlSearch.elevation, 10)));\n      }\n\n      if (urlSearch['resolve-hops']) {\n        dispatch(setResolveHops(urlSearch['resolve-hops'] === 'true'));\n      }\n    }\n    setParams(newParams);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /* Update url params on app update */\n  useEffect(() => {\n    const newParams = {};\n    newParams.z = map.getView().getZoom();\n    [newParams.x] = center;\n    [, newParams.y] = center;\n    newParams.mot = currentMot;\n    newParams.elevation = parseInt(routingElevation, 10);\n    newParams['resolve-hops'] = resolveHops;\n    if (Object.keys(currentStopsGeoJSON).length !== 0) {\n      newParams.via = compileViaString(currentStopsGeoJSON);\n    }\n    setParams(newParams);\n  }, [\n    currentMot,\n    currentStops,\n    currentStopsGeoJSON,\n    center,\n    routingElevation,\n    resolveHops,\n    map,\n  ]);\n\n  return <RSPermalink map={map} params={params} />;\n}\n\nPermalink.propTypes = {\n  mots: PropTypes.arrayOf(PropTypes.string).isRequired,\n  APIKey: PropTypes.string.isRequired,\n  stationSearchUrl: PropTypes.string.isRequired,\n};\n\nexport default Permalink;\n","import Permalink from './Permalink';\n\nexport default Permalink;\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { connect } from 'react-redux';\nimport Alert from '@material-ui/lab/Alert';\nimport PropTypes from 'prop-types';\nimport { showNotification } from '../../store/actions';\n\n/**\n * The notification handler props\n * @typedef NotificationHandlerProps\n * @type {props}\n * @property {string} notificationMessage Obtained from the store, the message to be displayed. Can be any valid string.\n * @property {string} notificationType Obtained from the store, the message type (error, success, info, etc...)\n * @category Props\n */\n\n/**\n * Handles all application notification shown to the user\n * @category NotificationHandler\n */\nclass NotificationHandler extends React.Component {\n  /**\n   * Default constructor. visibility is set to false by default. Controlled through state property \"open\"\n   * @param {...NotificationHandlerProps} props Props received so that the component can function properly.\n   * @category NotificationHandler\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n    };\n  }\n\n  /**\n   * If a new notification message is received, show it accordingly.\n   * @category NotificationHandler\n   */\n  componentDidUpdate(prevProps) {\n    const { notificationMessage } = this.props;\n    if (\n      notificationMessage &&\n      notificationMessage !== prevProps.notificationMessage\n    ) {\n      this.handleOpen();\n    }\n  }\n\n  /**\n   * Show the notification to the view.\n   * @category NotificationHandler\n   */\n  handleOpen = () => {\n    this.setState({\n      open: true,\n    });\n  };\n\n  /**\n   * Hide the notification from the view.\n   * @category NotificationHandler\n   */\n  handleClose = () => {\n    const { onShowNotification } = this.props;\n    this.setState({\n      open: false,\n    });\n    onShowNotification(null, 'error');\n  };\n\n  /**\n   * Render the notification to the dom.\n   * @category NotificationHandler\n   */\n  render() {\n    const { notificationMessage, notificationType } = this.props;\n    const { open } = this.state;\n    return (\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        open={open}\n        autoHideDuration={6000}\n        onClose={this.handleClose}\n      >\n        <Alert\n          onClose={this.handleClose}\n          severity={notificationType}\n          elevation={6}\n          variant=\"filled\"\n        >\n          {notificationMessage}\n        </Alert>\n      </Snackbar>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onShowNotification: (notificationMessage, notificationType) =>\n      dispatch(showNotification(notificationMessage, notificationType)),\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    notificationMessage: state.MapReducer.notificationMessage,\n    notificationType: state.MapReducer.notificationType,\n  };\n};\n\nNotificationHandler.propTypes = {\n  onShowNotification: PropTypes.func.isRequired,\n  notificationMessage: PropTypes.string.isRequired,\n  notificationType: PropTypes.string.isRequired,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(NotificationHandler);\n","import NotificationHandler from './NotificationHandler';\n\nexport default NotificationHandler;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport store from '../../store/store';\nimport MapComponent from '../MapComponent';\nimport Permalink from '../Permalink';\nimport NotificationHandler from '../NotificationHandler';\nimport { VALID_MOTS } from '../../constants';\n\nconst propTypes = {\n  routingUrl: PropTypes.string,\n  stationSearchUrl: PropTypes.string,\n  mots: PropTypes.arrayOf(PropTypes.string),\n};\n\nconst defaultProps = {\n  mots: VALID_MOTS,\n  routingUrl: 'https://api.geops.io/routing/v1/',\n  stationSearchUrl: 'https://api.geops.io/stops/v1/',\n};\n\n/**\n * Root component of the application that holds all other sub-components.\n * @param {string[]} mots List of mots to be available (ex: ['bus', 'train'])\n * @param {string} routingUrl The API routing url to be used for navigation.\n * @param {string} stationSearchUrl The API station search URL to be used for searching for stations.\n */\nfunction App(props) {\n  const { mots, routingUrl, stationSearchUrl } = props;\n  const apiKey = process.env.REACT_APP_API_KEY;\n\n  return (\n    <Provider store={store}>\n      <Permalink\n        mots={mots}\n        APIKey={apiKey}\n        stationSearchUrl={stationSearchUrl}\n      />\n      <MapComponent\n        mots={mots}\n        routingUrl={routingUrl}\n        APIKey={apiKey}\n        stationSearchUrl={stationSearchUrl}\n      />\n      <NotificationHandler />\n    </Provider>\n  );\n}\n\nApp.propTypes = propTypes;\nApp.defaultProps = defaultProps;\n\nexport default App;\n","import App from './App';\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              // eslint-disable-next-line no-console\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // eslint-disable-next-line no-console\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      // eslint-disable-next-line no-console\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport default function register() {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import polyfills for ie 11\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}